model_glmnet$modelInfo
model_glmnet$modelInfo$parameters
model_glmnet$modelInfo$predictors
model_glmnet$modelInfo$predictors()
model_rf = train(target ~ ., data = crime, metric = 'ROC', method = 'ranger',
trControl = myControl)
model_list = list(
glmnet = model_glmnet,
rf = model_rf
)
resamps = resamples(model_list)
resamps = resamples(model_list)
resamps
resamps
summary(resamps)
install.packages("caretEnsemble")
library(caretEnsemble)
xyplot(resamps, metric = 'ROC')
densityplot(resamps, metric = 'ROC')
dotplot(resamps, metric = 'ROC')
model_glm = train(target ~ ., data = crime, metric = 'ROC', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm)
model_list = list(glm = model_glm,
glmnet = model_glmnet, rf = model_rf)
dotplot(resamps, metric = 'ROC')
resamps = resamples(model_list)
resamps
dotplot(resamps, metric = 'ROC')
summary(resamps)
summary(model_glmnet)
coef(model_glmnet)
model_glmnet$method
model_glmnet$results
model_glmnet$finalModel
summary(model_glmnet$finalModel)
model_glmnet$finalModel$beta
model_glmnet$finalModel$tuneValue
coef(model_glmnet$finalModel)
coef(model_glmnet$finalModel, s = 0.1)
crime[-1]
crime[1:5, -1]
crime[1:5, 1]
crime[1:5, 1:5]
crime[1:5, :-1]
crime[1:5, 1:(ncol(crime)-1)]
crime[1:5, 1:-ncol(crime)]
crime[1:5, -ncol(crime)]
cvfit = cv.glmnet(crime[1:5, -ncol(crime)], crime$target)
cvfit = cv.glmnet(crime[, -ncol(crime)], crime$target)
crime[, -ncol(crime)]
cvfit = cv.glmnet(crime[, -ncol(crime)], crime$target)
model_glmnet$finalModel$a0
model_glmnet$finalModel$df
model_glmnet$finalModel$lambda
model_glmnet$finalModel$tuneValue
coef(model_glmnet, lambda = model_glmnet$finalModel$tuneValue$lambda)
coef(model_glmnet, l = model_glmnet$finalModel$tuneValue$lambda)
coef(model_glmnet, s = model_glmnet$finalModel$tuneValue$lambda)
coef(model_glmnet, a = model_glmnet$finalModel$tuneValue$lambda)
coef(model_glmnet, a = 1)
coef(model_glmnet, a = 0.1)
model_glmnet = train(target ~ ., data = crime, metric = 'ROC', method = 'glmnet',
preProcess = c('center', 'scale'), trControl = myControl)
coef(model_glmnet, a = 0.1)
coef(model_glmnet, s = 0.1)
coef(model_glmnet)
coef(model_glm)
coef(model_glmnet)
coef(model_glmnet, s=0.1)
coef(model_glmnet$finalModel, s=0.1)
?coef
coef(model_glmnet$finalModel, s = model_glmnet$finalModel$tuneValue$lambda)
model_glm = train(target ~ ., data = crime, metric = 'ROC', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm)
model_glm_sig = train(target ~ nox + age + dis + rad + tax + ptratio + black + medv, data = crime,
preProcess = c('center', 'scale'), trControl = myControl)
model_glm_sig = train(target ~ nox + age + dis + rad + tax + ptratio + black + medv, data = crime,
preProcess = c('center', 'scale'), trControl = myControl)
# model using glmnet,
model_glm_sig = train(target ~ nox + age + dis + rad + tax + ptratio + black + medv, data = crime,
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig)
model_glm_sig = train(target ~ nox + age + dis + rad + tax + ptratio + black + medv, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig)
dotplot(resamps, metric = 'ROC')
model_list = list(glm_full = model_glm_full,
glm_sig = model_glm_sig,
glmnet = model_glmnet, rf = model_rf)
model_glm_full = train(target ~ ., data = crime, metric = 'ROC', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
model_glm_sig1 = train(target ~ nox + age + dis + rad + tax + ptratio + black + medv, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
model_list = list(glm_full = model_glm_full,
glm_sig1 = model_glm_sig1,
glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
summary(model_glm_sig1)
model_glm_sig2 = train(target ~ nox + age + dis + rad + tax + medv, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig2)
model_list = list(glm_full = model_glm_full,
glm_sig1 = model_glm_sig1,
glm_sig2 = model_glm_sig2
glmnet = model_glmnet, rf = model_rf)
model_list = list(glm_full = model_glm_full,
glm_sig1 = model_glm_sig1,
glm_sig2 = model_glm_sig2,
glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
summary(model_glm_sig2)
model_glm_sig3 = train(target ~ nox + rad + tax, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig3)
model_list = list(glm_full = model_glm_full, glm_sig1 = model_glm_sig1, glm_sig2 = model_glm_sig2, glm_sig3 = model_glm_sig3,
glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
coef(model_glmnet$finalModel, s = model_glmnet$finalModel$tuneValue$lambda)
model_glm_sig4 = train(target ~ nox + rad + age, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig4)
model_list = list(glm_full = model_glm_full, glm_sig1 = model_glm_sig1, glm_sig2 = model_glm_sig2, glm_sig3 = model_glm_sig3,
glm_sig4 = model_glm_sig4, glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
summary(model_glm_sig1)
model_glm_full = train(target ~ ., data = crime, metric = 'ROC', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_full)
model_glm_sig2 = train(target ~ nox + age + dis + rad + tax + ptratio + medv, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig2)
model_glm_sig3 = train(target ~ nox + age + rad + tax + ptratio + medv, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig3)
model_glm_sig4 = train(target ~ nox + rad, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
model_glm_sig4 = train(target ~ nox + rad, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig4)
model_list = list(glm_full = model_glm_full, glm_sig1 = model_glm_sig1, glm_sig2 = model_glm_sig2, glm_sig3 = model_glm_sig3,
glm_sig4 = model_glm_sig4, glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
summary(model_glm_sig4)
dotplot(resamps, metric = 'ROC')
final_model = train(target ~ nox + rad, data = crime, method = 'glm', preProcess = c('center', 'scale'))
summary(model_glm_sig4)
crime_test = read.csv('crime-test-data.csv')
crime_test = read.csv('crime-evaluation-data.csv')
pred = predict(final_model, newdata = crime_test)
pred
final_model = train(target ~ nox + rad, data = crime, method = 'glm', preProcess = c('center', 'scale'),
trControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = FALSE))
final_model = train(target ~ nox + rad, data = crime, metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'),
trControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = FALSE))
summary(model_glm_sig4)
pred = predict(final_model, newdata = crime_test)
pred
pred = predict(final_model, newdata = crime_test, type = 'response')
pred = predict(final_model, newdata = crime_test, type = 'prob')
pred
cbind(pred_class, pred_prob)
pred_class = predict(final_model, newdata = crime_test)
pred_prob = predict(final_model, newdata = crime_test, type = 'prob')
cbind(pred_class, pred_prob)
table(pred_class) / nrow(pred_class)
table(pred_class)
nrow(pred_class)
table(pred_class) / nrows(pred_class)
length(pred_class)
table(pred_class) / length(pred_class)
cbind(pred_class, pred_prob)
write.csv(cbind(pred_class, pred_prob), 'crime_evaluation-prediction.csv')
setwd('/Users/brucehao/Google Drive/CUNY/git/DATA624')
setwd('/Users/brucehao/Google Drive/CUNY/git/DATA624/FinalProject')
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/brucehao/Google Drive/CUNY/git/DATA624/FinalProject')
data = read.csv('/Users/brucehao/Google Drive/CUNY/git/DATA624/FinalProject/StudentData.xlsx')
data = read.csv('/Users/brucehao/Google Drive/CUNY/git/DATA624/FinalProject/StudentData.xlsx',
row.names = FALSE)
data = read.csv('/Users/brucehao/Google Drive/CUNY/git/DATA624/FinalProject/StudentData.xlsx')
data = read.csv('/Users/brucehao/Google Drive/CUNY/git/DATA624/FinalProject/StudentData.xlsx',
row.names = FALSE)
data = read.csv('/Users/brucehao/Google Drive/CUNY/git/DATA624/FinalProject/StudentData.xlsx')
data = read.csv('/Users/brucehao/Google Drive/CUNY/git/DATA624/FinalProject/StudentData.csv')
data
data$Brand.Code
summary(data)
library(caret)
preProcess(data$Brand.Code)
preProcess(data)
temp = preProcess(data)
temp
temp$data
temp = preProcess(data, method = 'knnImpute')
temp$data
summary(data)
temp$data
str(data)
myControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE,
verboseIter = FALSE, savePredictions = TRUE)
model_glm = train(Brand.Code ~ ., data = data, metric = 'ROC', method = 'glm',
preProcess = c('medianImpute', 'center', 'scale'), trControl = myControl)
data_brand = data[!is.null(data$Brand.Code)]
data_brand
model_glm = train(Brand.Code ~ ., data = data_brand, metric = 'ROC', method = 'glm',
preProcess = c('medianImpute', 'center', 'scale'), trControl = myControl)
data_brand
unique(data_brand$Brand.Code)
data = read.csv('/Users/brucehao/Google Drive/CUNY/git/DATA624/FinalProject/StudentData.csv',
stringsAsFactors = FALSE)
str(data)
data_brand = data[!is.null(data$Brand.Code),]
data_brand
unique(data_brand$Brand.Code)
data_brand = data[!is.null(data$Brand.Code) | data$Brand.Code == '',]
data_brand
unique(data_brand$Brand.Code)
data_brand = data[!is.null(data$Brand.Code) || data$Brand.Code == '',]
unique(data_brand$Brand.Code)
data[data$Brand.Code == '',]
data[is.null(data$Brand.Code),]
data_brand = data[data$Brand.Code != '',]
unique(data_brand$Brand.Code)
model_glm = train(Brand.Code ~ ., data = data_brand, metric = 'ROC', method = 'glm',
preProcess = c('medianImpute', 'center', 'scale'), trControl = myControl)
unique(data_brand$Brand.Code)
str(data_brand)
str(data)
model_glm = train(Brand.Code ~ ., data = data_brand, metric = 'ROC', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl,
na.action = na.exclude)
myControl = trainControl(summaryFunction = multiClassSummary, classProbs = TRUE,
verboseIter = FALSE, savePredictions = TRUE)
model_glm = train(Brand.Code ~ ., data = data_brand, metric = 'ROC', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl,
na.action = na.exclude)
model_glm = train(Brand.Code ~ ., data = data_brand, metric = 'ROC', method = 'lm',
preProcess = c('center', 'scale'), trControl = myControl,
na.action = na.exclude)
model_glm = train(Brand.Code ~ ., data = data_brand, metric = 'ROC', method = 'ranger',
trControl = myControl)
model_glm = train(Brand.Code ~ ., data = data_brand, metric = 'ROC', method = 'ranger',
trControl = myControl, na.action = na.exclude)
data_brand[, -['Brand.Code']]
subset(data_brand, select = -c('Brand.Code'))
subset(data_brand, select = -c(Brand.Code))
glmnet_model = glmnet(x = subset(data_brand, select = -c(Brand.Code)),
y = data_brand$Brand.Code,
family = 'multinomial', type = 'response')
glmnet_model = cv.glmnet(x = subset(data_brand, select = -c(Brand.Code)),
y = data_brand$Brand.Code,
family = 'multinomial', type = 'response')
library(glmnet)
glmnet_model = cv.glmnet(x = subset(data_brand, select = -c(Brand.Code)),
y = data_brand$Brand.Code,
family = 'multinomial', type = 'response')
glmnet_model = cv.glmnet(x = subset(data_brand, select = -c(Brand.Code)),
y = data_brand$Brand.Code,
type = 'response')
glmnet_model = cv.glmnet(x = subset(data_brand, select = -c(Brand.Code)),
y = data_brand$Brand.Code,
family = 'multinomial', type.measure = 'auc',
type = 'response')
glmnet_model = cv.glmnet(x = subset(data_brand, select = -c(Brand.Code)),
y = data_brand$Brand.Code,
family = 'multinomial', type.measure = 'auc')
data_brand = complete.cases(data_brand)
data_brand
data_brand = data[data$Brand.Code != '',]
data_brand
data_brand = data_brand[complete.cases(data_brand),]
data_brand
unique(data_brand$Brand.Code)
data_brand = data[data$Brand.Code != '',]
data_brand = data_brand[complete.cases(subset(data_brand, select = -c(Brand.Code))),]
data_brand
glmnet_model = cv.glmnet(x = subset(data_brand, select = -c(Brand.Code)),
y = data_brand$Brand.Code,
family = 'multinomial', type.measure = 'auc',
na.action = na.exclude)
data_brand = data[data$Brand.Code != '',]
data_brand = data_brand[complete.cases(subset(data_brand, select = -c(Brand.Code))),]
glmnet_model = cv.glmnet(x = subset(data_brand, select = -c(Brand.Code)),
y = data_brand$Brand.Code,
family = 'multinomial', type.measure = 'auc')
data_brand = data[data$Brand.Code != '',]
glmnet_model = cv.glmnet(x = subset(data_brand, select = -c(Brand.Code)),
y = data_brand$Brand.Code,
family = 'multinomial', type.measure = 'auc')
data_brand = as.matrix(data[data$Brand.Code != '',])
glmnet_model = cv.glmnet(x = subset(data_brand, select = -c(Brand.Code)),
y = data_brand$Brand.Code,
family = 'multinomial', type.measure = 'auc')
data_brand
data_brand = data[data$Brand.Code != '',]
X = as.matrx(subset(data_brand, select = -c(Brand.Code)))
X = as.matrix(subset(data_brand, select = -c(Brand.Code)))
Y = as.matrix(data_brand$Brand.Code)
glmnet_model = cv.glmnet(X, Y, family = 'multinomial', type.measure = 'auc')
data_brand = data_brand[complete.cases(data_brand),]
X = as.matrix(subset(data_brand, select = -c(Brand.Code)))
Y = as.matrix(data_brand$Brand.Code)
glmnet_model = cv.glmnet(X, Y, family = 'multinomial', type.measure = 'auc')
glmnet_model
temp = preProcess(data, method = 'knnImpute')
temp
temp$data
data = read.csv('/Users/brucehao/Google Drive/CUNY/git/DATA624/FinalProject/StudentData.csv',
stringsAsFactors = FALSE)
df_clean = preProcess(data, method = 'knnImpute')
df_clean$data
data
df_clean$data
f=function(x){
x<-as.numeric(as.character(x)) #first convert each column into numeric if it is from factor
x[is.na(x)] =median(x, na.rm=TRUE) #convert the item with NA to median value from the column
x #display the column
}
imputeMedian = function(x) {
x <- as.numeric(as.character(x)) #first convert each column into numeric if it is from factor
x[is.na(x)] = median(x, na.rm=TRUE) #convert the item with NA to median value from the column
x #display the column
}
ss=data.frame(apply(data, 2, imputeMedian))
ss
data
ss=data.frame(apply(subset(data_brand, select = -c(Brand.Code)), 2, imputeMedian))
ss
if (is.numeric(x)) {
x[is.na(x)] = median(x, na.rm=TRUE) #convert the item with NA to median value from the column
}
imputeMedian = function(x) {
if(is.numeric(x)) {
#x <- as.numeric(as.character(x)) #first convert each column into numeric if it is from factor
x[is.na(x)] = median(x, na.rm=TRUE) #convert the item with NA to median value from the column
}
x #display the column
}
ss=data.frame(apply(data, 2, imputeMedian))
ss
str(data)
imputeMedian = function(x) {
x <- as.numeric(as.character(x)) #first convert each column into numeric if it is from factor
x[is.na(x)] = median(x, na.rm=TRUE) #convert the item with NA to median value from the column
x #display the column
}
ss=data.frame(apply(data, 2, imputeMedian))
ss
x <- as.numeric(as.character(x)) #first convert each column into numeric if it is from factor
imputeMedian = function(x) {
x <- as.numeric(as.character(x)) #first convert each column into numeric if it is from factor
#x[is.na(x)] = median(x, na.rm=TRUE) #convert the item with NA to median value from the column
x #display the column
}
ss=data.frame(apply(data, 2, imputeMedian))
ss
imputeMedian = function(x) {
#x <- as.numeric(as.character(x)) #first convert each column into numeric if it is from factor
x[is.na(x)] = median(x, na.rm=TRUE) #convert the item with NA to median value from the column
x #display the column
}
ss=data.frame(apply(data, 2, imputeMedian))
ss
imputeMedian = function(x) {
x <- as.numeric(as.character(x)) #first convert each column into numeric if it is from factor
x[is.na(x)] = median(x, na.rm=TRUE) #convert the item with NA to median value from the column
x #display the column
}
subset(data_brand, select = -c(Brand.Code))
ss=data.frame(apply(subset(data_brand, select = -c(Brand.Code)), 2, imputeMedian))
ss
data
for (i in 2:ncol(data)){
data.frame(apply(data[,i], 2, imputeMedian))
}
ncol(data)
data[,i]
apply(data[,i], 2, imputeMedian)
for (i in 2:ncol(data)){
apply(data[,i], 2, imputeMedian)
}
data[,3]
data[,4]
apply(data[,i], imputeMedian)
for (i in 2:ncol(data)){
apply(data[,i], imputeMedian)
}
for (i in 2:ncol(data)){
data[,i] = apply(data[,i], 2, imputeMedian)
}
for (i in 2:3){
data[,i] = apply(data[,i], 2, imputeMedian)
}
for (i in 2:ncol(data)){
print(i)
#data[,i] = apply(data[,i], 2, imputeMedian)
}
print(data[,i])
for (i in 2:ncol(data)){
data[,i] = apply(data[,i], 2, imputeMedian)
}
for (i in 2:ncol(data)){
x = data[,i]
data[,i] = x[is.na(x)] = median(x, na.rm=TRUE)
}
data
data = read.csv('/Users/brucehao/Google Drive/CUNY/git/DATA624/FinalProject/StudentData.csv',
stringsAsFactors = FALSE)
for (i in 2:ncol(data)){
data[,i] = data[is.na(data[,i]), i] = median(data[,i], na.rm=TRUE)
}
data
data = read.csv('/Users/brucehao/Google Drive/CUNY/git/DATA624/FinalProject/StudentData.csv',
stringsAsFactors = FALSE)
for (i in 2:ncol(data)){
data[,i] = data[is.na(data[,i]), i] = median(data[,i], na.rm=TRUE)
}
data
data = read.csv('/Users/brucehao/Google Drive/CUNY/git/DATA624/FinalProject/StudentData.csv',
stringsAsFactors = FALSE)
for (i in 2:ncol(data)){
data[is.na(data[,i]), i] = median(data[,i], na.rm=TRUE)
}
data
str(data)
summary(data)
train = data[data$Brand.Code != '',]
test  = data[data$Brand.Code == '',]
train
test
X = as.matrix(subset(data_brand, select = -c(Brand.Code)))
Y = as.matrix(data_brand$Brand.Code)
X = as.matrix(subset(train, select = -c(Brand.Code)))
Y = as.matrix(train$Brand.Code)
glmnet_model = cv.glmnet(X, Y, family = 'multinomial', type.measure = 'auc')
glmnet_model = cv.glmnet(X, Y, family = 'multinomial', type.measure = 'mae')
glmnet_model
glmnet_predict = predict(glmnet_model, test, type = 'response')
testX = as.matrix(subset(test, select = -c(Brand.Code)))
testY = as.matrix(test$Brand.Code)
glmnet_predict = predict(glmnet_model, test, type = 'response')
glmnet_predict = predict(glmnet_model, testX, type = 'response')
glmnet_predict
apply(glmnet_predict, 1, sum())
apply(glmnet_predict, 1, sum
apply(glmnet_predict, 1, sum)
apply(glmnet_predict, 1, sum)
glmnet_predict
glmnet_predict = predict(glmnet_model, testX, type = 'class')
glmnet_predict
(names(data) %in% ['PH'])
(names(data) %in% c('PH')
# impute missing values using medians for all but brand.code column
for (i in 2:ncol(data)){
(names(data) %in% c('PH'))
!(names(data) %in% c('PH'))
data = data[,!(names(data) %in% c('PH'))]
data
for (i in 2:ncol(data)){
data[is.na(data[,i]), i] = median(data[,i], na.rm=TRUE)
}
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/brucehao/Google Drive/CUNY/git/DATA624/FinalProject')
data = read.csv('/Users/brucehao/Google Drive/CUNY/git/DATA624/FinalProject/StudentData.csv',
stringsAsFactors = FALSE)
# drop ph since we will not have those values in true test case
data = data[,!(names(data) %in% c('PH'))]
# impute missing values using medians for all but brand.code column
for (i in 2:ncol(data)){
data[is.na(data[,i]), i] = median(data[,i], na.rm=TRUE)
}
# split data; train set == brand.code is present; test set == brand.code is missing
train = data[data$Brand.Code != '',]
test  = data[data$Brand.Code == '',]
# split data into X and Y; also convert data to matrices to use with glmnet model
trainX = as.matrix(subset(train, select = -c(Brand.Code)))
trainY = as.matrix(train$Brand.Code)
testX = as.matrix(subset(test, select = -c(Brand.Code)))
# fit using glmnet model and then output predicted classes
glmnet_model = cv.glmnet(X, Y, family = 'multinomial', type.measure = 'mae')
glmnet_predict = predict(glmnet_model, testX, type = 'class')
trainX
trainY
glmnet_model = cv.glmnet(X, Y, family = 'multinomial', type.measure = 'mae')
glmnet_predict = predict(glmnet_model, testX, type = 'class')
testX
glmnet_predict = predict(glmnet_model, testX, type = 'response')
trainX = as.matrix(subset(train, select = -c(Brand.Code)))
trainY = as.matrix(train$Brand.Code)
testX = as.matrix(subset(test, select = -c(Brand.Code)))
testY = as.matrix(test$Brand.Code)
glmnet_predict = predict(glmnet_model, testX, type = 'class')
glmnet_model = cv.glmnet(X, Y, family = 'multinomial', type.measure = 'mae')
glmnet_predict = predict(glmnet_model, testX, type = 'class')
glmnet_predict = predict(glmnet_model, trainX, type = 'class')
glmnet_predict = predict(glmnet_model, newx = testX, type = 'class')
str(train)
str(test)
str(trainX)
str(testX)
