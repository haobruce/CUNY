model_glm_sig4 = train(target ~ nox + rad, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
model_glm_sig4 = train(target ~ nox + rad, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig4)
model_list = list(glm_full = model_glm_full, glm_sig1 = model_glm_sig1, glm_sig2 = model_glm_sig2, glm_sig3 = model_glm_sig3,
glm_sig4 = model_glm_sig4, glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
summary(model_glm_sig4)
dotplot(resamps, metric = 'ROC')
final_model = train(target ~ nox + rad, data = crime, method = 'glm', preProcess = c('center', 'scale'))
summary(model_glm_sig4)
crime_test = read.csv('crime-test-data.csv')
crime_test = read.csv('crime-evaluation-data.csv')
pred = predict(final_model, newdata = crime_test)
pred
final_model = train(target ~ nox + rad, data = crime, method = 'glm', preProcess = c('center', 'scale'),
trControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = FALSE))
final_model = train(target ~ nox + rad, data = crime, metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'),
trControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = FALSE))
summary(model_glm_sig4)
pred = predict(final_model, newdata = crime_test)
pred
pred = predict(final_model, newdata = crime_test, type = 'response')
pred = predict(final_model, newdata = crime_test, type = 'prob')
pred
cbind(pred_class, pred_prob)
pred_class = predict(final_model, newdata = crime_test)
pred_prob = predict(final_model, newdata = crime_test, type = 'prob')
cbind(pred_class, pred_prob)
table(pred_class) / nrow(pred_class)
table(pred_class)
nrow(pred_class)
table(pred_class) / nrows(pred_class)
length(pred_class)
table(pred_class) / length(pred_class)
cbind(pred_class, pred_prob)
write.csv(cbind(pred_class, pred_prob), 'crime_evaluation-prediction.csv')
setwd('/Users/brucehao/Google Drive/CUNY/git/DATA624')
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(chemicalManufacturing)
data("ChemicalManufacturingProcess")
View(ChemicalManufacturingProcess)
library(caret)
summary(ChemicalManufacturingProcess)
set.seed(123)
set.seed(123)
?createDataPartition
trainIndex
trainIndex = createDataPartition(ChemicalManufacturingProcess$Yield, p = 0.75, list = FALSE, times = 1)
trainIndex
trainSet   = ChemicalManufacturingProcess[ trainIndex, ]
testSet    = ChemicalManufacturingProcess[-trainIndex, ]
trainSet
testSet
myControl = trainControl(verboseIter = FALSE, savePredictions = TRUE)
myControl
head(trainSet)
model_glm_full = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'glm',
preProcess = c('medianimpute', 'center', 'scale'), trConrol = myControl)
cleanChem = preProcess(ChemicalManufacturingProcess, method = c('medianimpute', 'center', 'scale'))
cleanChem = preProcess(ChemicalManufacturingProcess, method = c('medianImpute', 'center', 'scale'))
model_glm_full = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'glm',
preProcess = c('medianImpute', 'center', 'scale'), trConrol = myControl)
summary(cleanChem)
cleanChem
summary(ChemicalManufacturingProcess)
str(ChemicalManufacturingProcess)
str(cleanChem)
str(cleanChem$data)
cleanChem$data
cleanChem
complete.cases(ChemicalManufacturingProcess)
sum(complete.cases(ChemicalManufacturingProcess))
model_glm_full = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'glm',
preProcess = c('medianImpute', 'center', 'scale'), trConrol = myControl,
na.action = na.exclude)
model_glm_full = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'glm',
preProcess = c('medianimpute', 'center', 'scale'), trConrol = myControl,
na.action = na.exclude)
model_glm_full = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'glm',
preProcess = c('medianImpute', 'center', 'scale'), trConrol = myControl,
na.action = na.exclude)
model_glm_full = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'glmnet',
preProcess = c('medianImpute', 'center', 'scale'), trConrol = myControl,
na.action = na.exclude)
trainSet
summary(ChemicalManufacturingProcess)
columns(ChemicalManufacturingProcess)
column(ChemicalManufacturingProcess)
colnames(ChemicalManufacturingProcess)
dim(ChemicalManufacturingProcess)
dim(ChemicalManufacturingProcess)[2]
for (c in 1:dim(ChemicalManufacturingProcess)[2]){
print(c)
}
for (c in 1:dim(ChemicalManufacturingProcess)[2]){
print(sum(ChemicalManufacturingProcess[, c]))
}
for (c in 1:dim(ChemicalManufacturingProcess)[2]){
if (is.null(sum(ChemicalManufacturingProcess[, c]))){
print(c)
}
}
for (c in 1:dim(ChemicalManufacturingProcess)[2]){
if (is.na(sum(ChemicalManufacturingProcess[, c]))){
print(c)
}
}
imputeMedian = function(x) replace(x, is.na(x), median(x, na.rm = TRUE))
for (c in 1:dim(ChemicalManufacturingProcess)[2]){
if (is.na(sum(ChemicalManufacturingProcess[, c]))){
ChemicalManufacturingProcess[, c] = imputeMedian(ChemicalManufacturingProcess, c)
}
}
for (c in 1:dim(ChemicalManufacturingProcess)[2]){
if (is.na(sum(ChemicalManufacturingProcess[, c]))){
ChemicalManufacturingProcess[, c] = imputeMedian(ChemicalManufacturingProcess[, c])
}
}
summary(ChemicalManufacturingProcess)
trainIndex = createDataPartition(ChemicalManufacturingProcess$Yield, p = 0.75, list = FALSE, times = 1)
trainSet   = ChemicalManufacturingProcess[ trainIndex, ]
testSet    = ChemicalManufacturingProcess[-trainIndex, ]
myControl = trainControl(verboseIter = FALSE, savePredictions = TRUE)
model_glm_full = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'glmnet', trConrol = myControl)
model_glm_full = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'glm', trConrol = myControl)
myControl = trainControl(verboseIter = FALSE)
model_glm_full = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'glm', trConrol = myControl)
model_glm_full = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'lm', trConrol = myControl)
model_glm_full
myControl = trainControl(verboseIter = FALSE, savePredictions = TRUE)
model_glm_full = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'glm', trControl = myControl)
model_glm_full
data("ChemicalManufacturingProcess")
summary(ChemicalManufacturingProcess)
trainIndex = createDataPartition(ChemicalManufacturingProcess$Yield, p = 0.75, list = FALSE, times = 1)
trainSet   = ChemicalManufacturingProcess[ trainIndex, ]
testSet    = ChemicalManufacturingProcess[-trainIndex, ]
myControl = trainControl(verboseIter = FALSE, savePredictions = TRUE)
model_glm_full = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'glm',
preProcess = c('medianImpute', 'center', 'scale'), trControl = myControl)
model_glm_full = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'glm',
preProcess = c('medianImpute', 'center', 'scale'), trControl = myControl,
na.action = na.exclude)
model_glm_full
imputeMedian = function(x) replace(x, is.na(x), median(x, na.rm = TRUE))
for (c in 1:dim(ChemicalManufacturingProcess)[2]){
if (is.na(sum(ChemicalManufacturingProcess[, c]))){
ChemicalManufacturingProcess[, c] = imputeMedian(ChemicalManufacturingProcess[, c])
}
}
trainIndex = createDataPartition(ChemicalManufacturingProcess$Yield, p = 0.75, list = FALSE, times = 1)
trainSet   = ChemicalManufacturingProcess[ trainIndex, ]
testSet    = ChemicalManufacturingProcess[-trainIndex, ]
myControl = trainControl(verboseIter = FALSE, savePredictions = TRUE)
model_glm_full = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_full
summary(model_glm_full)
summary(model_glm_full)
model_glmnet = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'glmnet',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glmnet)
model_glmnet
model_glm_full
model_glmnet
model_rf = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'ranger', trControl = myControl)
model_list = list(glm_full = model_glm_full, glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'RMSE')
coef(model_glmnet$finalModel, s = model_glmnet$finalModel$tuneValue$lambda)
pred_glmnet = predict(glmnet, newdata = testSet)
pred_glmnet = predict(model_glmnet, newdata = testSet)
pred_glmnet
testSet
pred_glmnet
sqrt(mean((testSet$Yield - pred_glmnet)^2))
dotplot(resamps, metric = 'RMSE')
model_glmnet
coef(model_glmnet$finalModel, s = model_glmnet$finalModel$tuneValue$lambda)
dotplot(resamps, metric = 'RMSE')
resamps
summary(resamps)
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/brucehao/Google Drive/CUNY/git/DATA624')
library(caret)
library(AppliedPredictiveModeling)
data("ChemicalManufacturingProcess")
#View(ChemicalManufacturingProcess)
library(mlbench)
set.seed(200)
library(mlbench)
set.seed(200)
trainingData = mlbench.friedman1(200, sd = 1)
trainingData$x = data.frame(trainingData$x)
featurePlot(trainingData$x, trainingData$y)
knnModel = train(x = trainingData$x, y = trainingData$y, method = 'knn',
preProcess = c('center', 'scale'), tuneLength = 10)
knnModel
knnPred = predict(knnModel, newdata = testData$x)
testData = mlbench.friedman1(5000, sd = 1)
testData$x = data.frame(testData$x)
knnPred = predict(knnModel, newdata = testData$x)
knnPred = predict(knnModel, newdata = testData$x)
postResample(pred = knnPred, obs = testData$y)
library(mlbench)
set.seed(200)
trainingData = mlbench.friedman1(200, sd = 1)
trainingData$x = data.frame(trainingData$x)
#featurePlot(trainingData$x, trainingData$y)
testData = mlbench.friedman1(5000, sd = 1)
testData$x = data.frame(testData$x)
knnModel = train(x = trainingData$x, y = trainingData$y, method = 'knn',
preProcess = c('center', 'scale'), tuneLength = 10)
knnModel
knnPred = predict(knnModel, newdata = testData$x)
postResample(pred = knnPred, obs = testData$y)
marsFit = earth(trainingData$x, y = trainingData$y)
library(earth)
install.packages('earth')
library(earth)
install.packages('earth')
library(earth)
library(earth)
install.packages('earth')
library(earth)
marsFit = earth(trainingData$x, y = trainingData$y)
summary(marsFit)
marsTunes = train(trainingData$x, trainingData$y, method = 'earth', tuneGrid = marsGrid,
trControl = trainControl(method = 'cv'))
marsGrid = expand.grid(.degree = 1:2, .nprune = 2:38)
set.seed(100)
marsTunes = train(trainingData$x, trainingData$y, method = 'earth', tuneGrid = marsGrid,
trControl = trainControl(method = 'cv'))
marsPred = predict(marsFit, newdata = testData$x)
marsTuned = train(trainingData$x, trainingData$y, method = 'earth', tuneGrid = marsGrid,
trControl = trainControl(method = 'cv'))
model_list = list(knn = knnModel, mars = marsFit, marsTuned = marsTuned)
resamps = resamples(model_list)
marsTuned = train(trainingData$x, trainingData$y, method = 'earth', tuneGrid = marsGrid)
model_list = list(knn = knnModel, mars = marsFit, marsTuned = marsTuned)
resamps = resamples(model_list)
marsFit = earth(trainingData$x, y = trainingData$y)
marsPred = predict(marsFit, newdata = testData$x)
marsGrid = expand.grid(.degree = 1:2, .nprune = 2:38)
set.seed(100)
marsTuned = train(trainingData$x, trainingData$y, method = 'earth', tuneGrid = marsGrid,
trControl = trainControl(method = 'cv'))
marsTunedPred = predict(marsTuned, newdata = testData$x)
marsPred = predict(marsFit, newdata = testData$x)
marsPred
postResample(pred = marsPred, obs = testData$y)
postResample(pred = marsTunedPred, obs = testData$y)
postResample(pred = marsTunedPred, obs = testData$y)$RMSE
postResample(pred = marsTunedPred, obs = testData$y)[1]
library(mlbench)
set.seed(200)
trainingData = mlbench.friedman1(200, sd = 1)
trainingData$x = data.frame(trainingData$x)
#featurePlot(trainingData$x, trainingData$y)
testData = mlbench.friedman1(5000, sd = 1)
testData$x = data.frame(testData$x)
knnModel = train(x = trainingData$x, y = trainingData$y, method = 'knn',
preProcess = c('center', 'scale'), tuneLength = 10)
data.frame(model = c('knn', 'mars', 'marsTuned'),
rmse  = c(postResample(pred = knnPred, obs = testData$y),
postResample(pred = marsPred, obs = testData$y),
postResample(pred = marsTunePred, obs = testData$y)))
library(mlbench)
set.seed(200)
trainingData = mlbench.friedman1(200, sd = 1)
trainingData$x = data.frame(trainingData$x)
#featurePlot(trainingData$x, trainingData$y)
testData = mlbench.friedman1(5000, sd = 1)
testData$x = data.frame(testData$x)
knnModel = train(x = trainingData$x, y = trainingData$y, method = 'knn',
preProcess = c('center', 'scale'), tuneLength = 10)
knnPred = predict(knnModel, newdata = testData$x)
postResample(pred = knnPred, obs = testData$y)
library(earth)
marsFit = earth(trainingData$x, y = trainingData$y)
marsPred = predict(marsFit, newdata = testData$x)
postResample(pred = marsPred, obs = testData$y)
marsGrid = expand.grid(.degree = 1:2, .nprune = 2:38)
set.seed(100)
marsTuned = train(trainingData$x, trainingData$y, method = 'earth', tuneGrid = marsGrid,
trControl = trainControl(method = 'cv'))
marsTunedPred = predict(marsTuned, newdata = testData$x)
postResample(pred = marsTunedPred, obs = testData$y)
data.frame(model = c('knn', 'mars', 'marsTuned'),
rmse  = c(postResample(pred = knnPred, obs = testData$y),
postResample(pred = marsPred, obs = testData$y),
postResample(pred = marsTunePred, obs = testData$y)))
data.frame(model = c('knn', 'mars', 'marsTuned'),
rmse  = c(postResample(pred = knnPred, obs = testData$y)[1],
postResample(pred = marsPred, obs = testData$y)[1],
postResample(pred = marsTunePred, obs = testData$y)[1]))
marsTunedPred
data.frame(model = c('knn', 'mars', 'marsTuned'),
rmse  = c(postResample(pred = knnPred, obs = testData$y)[1],
postResample(pred = marsPred, obs = testData$y)[1],
postResample(pred = marsTunePred, obs = testData$y)[1]))
data.frame(model = c('knn', 'mars', 'marsTuned'),
rmse  = c(postResample(pred = knnPred, obs = testData$y)[1],
postResample(pred = marsPred, obs = testData$y)[1],
postResample(pred = marsTunePred, obs = testData$y)[1]))
marsTunedPred
marsTunedPred = predict(marsTuned, newdata = testData$x)
data.frame(model = c('knn', 'mars', 'marsTuned'),
rmse  = c(postResample(pred = knnPred, obs = testData$y)[1],
postResample(pred = marsPred, obs = testData$y)[1],
postResample(pred = marsTunePred, obs = testData$y)[1]))
data.frame(model = c('knn', 'mars', 'marsTuned'),
rmse  = c(postResample(pred = knnPred, obs = testData$y)[1],
postResample(pred = marsPred, obs = testData$y)[1],
postResample(pred = marsTunedPred, obs = testData$y)[1]))
library(e1071)
svmFit = kvsm(x = trainingData$x, y = trainingData$y, kernel = 'rbfdot', kpar = 'automatic',
C = 1, epsilon = 0.1 )
library(e1071)
svmFit = kvsm(x = trainingData$x, y = trainingData$y, kernel = 'rbfdot', kpar = 'automatic',
C = 1, epsilon = 0.1)
library(kernlab)
install.packages('kernlab')
library(kernlab)
svmFit = kvsm(x = trainingData$x, y = trainingData$y, kernel = 'rbfdot', kpar = 'automatic',
C = 1, epsilon = 0.1)
??kvsm
svmFit = ksvm(x = trainingData$x, y = trainingData$y, kernel = 'rbfdot', kpar = 'automatic',
C = 1, epsilon = 0.1)
svmFit = ksvm(x = trainingData$x, y = trainingData$y, kernel = 'rbfdot', kpar = 'automatic',
C = 1, epsilon = 0.1)
data.frame(model = c('knn', 'mars', 'marsTuned'),
rmse  = c(postResample(pred = knnPred, obs = testData$y)[1],
postResample(pred = marsPred, obs = testData$y)[1],
postResample(pred = marsTunedPred, obs = testData$y)[1]))
marsTuned
marsTuned$finalModel
model_mars = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'earth',
preProcess = c('center', 'scale'), trControl = myControl)
myControl = trainControl(verboseIter = FALSE, savePredictions = TRUE)
model_knn = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'knn',
preProcess = c('center', 'scale'), trControl = myControl)
model_mars = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'earth',
preProcess = c('center', 'scale'), trControl = myControl)
model_marsTuned = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'earth', tuneGrid = marsGrid,
preProcess = c('center', 'scale'),
trControl = trainControl(verboseIter = FALSE, savePredictions = TRUE, method = 'cv'))
model_rf = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'ranger', trControl = myControl)
# compare models
model_list = list(knn = model_knn, mars = model_mars, marsTuned = model_marsTuned, rf = model_rf)
resamps = resamples(model_list)
model_list = list(knn = model_knn, mars = model_mars)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'RMSE')
marsTuned$finalModel
model_list = list(knn = model_knn, mars = model_mars, marsTuned = model_marsTuned$finalModel)
resamps = resamples(model_list)
model_knn
model_mars
model_marsTuned
model_list = list(knn = model_knn, mars = model_mars, marsTuned = model_marsTuned)
resamps = resamples(model_list)
data.frame(model = c('knn', 'mars', 'marsTuned'),
rmse  = c(postResample(pred = knnPred, obs = testSet)[1],
postResample(pred = marsPred, obs = testSet)[1],
postResample(pred = marsTunedPred, obs = testSet)[1]))
pred_knn = predict(model_knn, newdata = testData)
model_knn = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'knn',
preProcess = c('center', 'scale'), trControl = myControl)
pred_knn = predict(model_knn, newdata = testData)
pred_mars = predict(model_mars, newdata = testData)
testData
set.seed(123)
# impute missing values
imputeMedian = function(x) replace(x, is.na(x), median(x, na.rm = TRUE))
for (c in 1:dim(ChemicalManufacturingProcess)[2]){
if (is.na(sum(ChemicalManufacturingProcess[, c]))){
ChemicalManufacturingProcess[, c] = imputeMedian(ChemicalManufacturingProcess[, c])
}
}
# split data into train and test sets
trainIndex = createDataPartition(ChemicalManufacturingProcess$Yield, p = 0.75, list = FALSE, times = 1)
trainSet   = ChemicalManufacturingProcess[ trainIndex, ]
testSet    = ChemicalManufacturingProcess[-trainIndex, ]
myControl = trainControl(verboseIter = FALSE, savePredictions = TRUE)
model_knn = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'knn',
preProcess = c('center', 'scale'), trControl = myControl)
pred_knn = predict(model_knn, newdata = testData)
model_knn = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'knn',
preProcess = c('center', 'scale'), trControl = myControl)
model_knn
testData
pred_knn = predict(model_knn, newdata = testSet)
pred_marsTuned = predict(model_marsTuned, newdata = testSet)
myControl = trainControl(verboseIter = FALSE, savePredictions = TRUE)
model_knn = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'knn',
preProcess = c('center', 'scale'), trControl = myControl)
pred_knn = predict(model_knn, newdata = testSet)
model_mars = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'earth',
preProcess = c('center', 'scale'), trControl = myControl)
pred_mars = predict(model_mars, newdata = testSet)
model_marsTuned = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'earth',
tuneGrid = marsGrid, preProcess = c('center', 'scale'),
trControl = trainControl(verboseIter = FALSE, savePredictions = TRUE, method = 'cv'))
data.frame(model = c('knn', 'mars', 'marsTuned'),
rmse  = c(postResample(pred = pred_knn, obs = testSet)[1],
postResample(pred = pred_mars, obs = testSet)[1],
postResample(pred = pred_marsTuned, obs = testSet)[1]))
myControl = trainControl(verboseIter = FALSE, savePredictions = TRUE)
model_knn = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'knn',
preProcess = c('center', 'scale'), trControl = myControl)
pred_knn = predict(model_knn, newdata = testSet)
model_mars = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'earth',
preProcess = c('center', 'scale'), trControl = myControl)
pred_mars = predict(model_mars, newdata = testSet)
model_marsTuned = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'earth',
tuneGrid = marsGrid, preProcess = c('center', 'scale'),
trControl = trainControl(verboseIter = FALSE, savePredictions = TRUE, method = 'cv'))
pred_marsTuned = predict(model_marsTuned, newdata = testSet)
# compare models
data.frame(model = c('knn', 'mars', 'marsTuned'),
rmse  = c(postResample(pred = pred_knn, obs = testSet)[1],
postResample(pred = pred_mars, obs = testSet)[1],
postResample(pred = pred_marsTuned, obs = testSet)[1]))
postResample(pred = pred_knn, obs = testSet)
postResample(pred = pred_knn, obs = testSet$Yield)
postResample(pred = pred_knn, obs = testSet$Yield
)
data.frame(model = c('knn', 'mars', 'marsTuned'),
rmse  = c(postResample(pred = pred_knn, obs = testSet$Yield)[1],
postResample(pred = pred_mars, obs = testSet$Yield)[1],
postResample(pred = pred_marsTuned, obs = testSet$Yield)[1]))
library(nnet)
model_nnet = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'nnet',
preProcess = c('center', 'scale'), trControl = myControl)
model_nnet = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'nnet',
preProcess = c('center', 'scale'), trControl = myControl,
linout = TRUE, trace = FALSE, MaxNWts = 10 * (ncol(trainSet) + 1) + 10 + 1,
maxit = 500)
)
pred_nnet = predict(model_nnet, newdata = testSet)
data.frame(model = c('knn', 'nnet', 'marsTuned'),
rmse  = c(postResample(pred = pred_knn, obs = testSet$Yield)[1],
postResample(pred = pred_nnet, obs = testSet$Yield)[1],
postResample(pred = pred_marsTuned, obs = testSet$Yield)[1]))
varImp(model_marsTuned)
varImp(model_mars)
varImp(model_marsTuned)
plot(ChemicalManufacturingProcess$ManufacturingProcess32, ChemicalManufacturingProcess$Yield)
par(mfrow = c(2,2))
myControl = trainControl(verboseIter = FALSE, savePredictions = TRUE)
model_knn = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'knn',
preProcess = c('center', 'scale'), trControl = myControl)
pred_knn = predict(model_knn, newdata = testSet)
library(nnet)
model_nnet = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'nnet',
preProcess = c('center', 'scale'), trControl = myControl,
linout = TRUE, trace = FALSE, MaxNWts = 10 * (ncol(trainSet) + 1) + 10 + 1,
maxit = 500)
pred_nnet = predict(model_nnet, newdata = testSet)
model_marsTuned = train(Yield ~ ., data = trainSet, metric = 'RMSE', method = 'earth',
tuneGrid = marsGrid, preProcess = c('center', 'scale'),
trControl = trainControl(verboseIter = FALSE, savePredictions = TRUE, method = 'cv'))
pred_marsTuned = predict(model_marsTuned, newdata = testSet)
# compare models
data.frame(model = c('knn', 'nnet', 'marsTuned'),
rmse  = c(postResample(pred = pred_knn, obs = testSet$Yield)[1],
postResample(pred = pred_nnet, obs = testSet$Yield)[1],
postResample(pred = pred_marsTuned, obs = testSet$Yield)[1]))
# display most important variables for tuned MARS model
varImp(model_marsTuned)
# scatterplots of top 4 predictors vs. response variable
par(mfrow = c(2,2))
plot(ChemicalManufacturingProcess$ManufacturingProcess32, ChemicalManufacturingProcess$Yield)
plot(ChemicalManufacturingProcess$ManufacturingProcess09, ChemicalManufacturingProcess$Yield)
plot(ChemicalManufacturingProcess$ManufacturingProcess13, ChemicalManufacturingProcess$Yield)
plot(ChemicalManufacturingProcess$ManufacturingProcess39, ChemicalManufacturingProcess$Yield)
par(mfrow = c(2,2))
plot(ChemicalManufacturingProcess$ManufacturingProcess32, ChemicalManufacturingProcess$Yield)
plot(ChemicalManufacturingProcess$ManufacturingProcess09, ChemicalManufacturingProcess$Yield)
plot(ChemicalManufacturingProcess$ManufacturingProcess13, ChemicalManufacturingProcess$Yield)
plot(ChemicalManufacturingProcess$ManufacturingProcess39, ChemicalManufacturingProcess$Yield)
par(mfrow = c(2,2))
plot(ChemicalManufacturingProcess$ManufacturingProcess32, ChemicalManufacturingProcess$Yield)
title('hello')
par(mfrow = c(2,2))
plot(ChemicalManufacturingProcess$ManufacturingProcess32, ChemicalManufacturingProcess$Yield, main = 'Process 32')
par(mfrow = c(2,2))
plot(ChemicalManufacturingProcess$ManufacturingProcess32, ChemicalManufacturingProcess$Yield, main = 'Process 32')
plot(ChemicalManufacturingProcess$ManufacturingProcess09, ChemicalManufacturingProcess$Yield, main = 'Process 09')
plot(ChemicalManufacturingProcess$ManufacturingProcess13, ChemicalManufacturingProcess$Yield, main = 'Process 13')
plot(ChemicalManufacturingProcess$ManufacturingProcess39, ChemicalManufacturingProcess$Yield, main = 'Process 39')
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/brucehao/Google Drive/CUNY/git/DATA624')
library(caret)
library(mlbench)
setwd('/Users/brucehao/Google Drive/CUNY/git/DATA624')
library(caret)
install.packages('caret')
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
data("ChemicalManufacturingProcess")
library(mlbench)
install.packages('mlbench')
library(mlbench)
