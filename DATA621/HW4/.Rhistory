mean(insur_acc$TARGET_AMT)
# drop index column
insur = subset(insur, select = -c(INDEX))
insur = read.csv('insurance_training_data.csv', stringsAsFactors = TRUE)
str(insur)
# drop index column
insur = subset(insur, select = -c(INDEX))
# eliminate dollar signs and commas and convert to numbers
insur$INCOME = as.numeric(sub('\\$', '', sub('\\,', '', insur$INCOME)))
insur$HOME_VAL = as.numeric(sub('\\$', '', sub('\\,', '', insur$HOME_VAL)))
insur$BLUEBOOK = as.numeric(sub('\\$', '', sub('\\,', '', insur$BLUEBOOK)))
insur$OLDCLAIM = as.numeric(sub('\\$', '', sub('\\,', '', insur$OLDCLAIM)))
summary(insur)
# mean of actual accidents
insur_acc = insur[insur$TARGET_FLAG == 1,]
mean(insur_acc$TARGET_AMT)
library(caret)
library(caretEnsemble)
set.seed(123)
myFolds = createFolds(insur_acc$TARGET_FLAG, k = 10)
str(insur_acc)
myFolds = createFolds(insur_acc$TARGET_AMT, k = 10)
table(insur_acc$TARGET_AMT) / nrow(insur_acc)
table(insur_acc$TARGET_AMT[myFolds$Fold1]) / length(myFolds$Fold1)
table(insur_acc$TARGET_AMT) / nrow(insur_acc)
myControl = trainControl(verboseIter = FALSE,savePredictions = TRUE, index = myFolds)
model_glm_full = train(TARGET_AMT ~ ., data = insur_acc, metric = 'ROC', method = 'glm',
preProcess = c('medianImpute', 'center', 'scale'), trControl = myControl,
na.action = na.pass)
model_glm_full = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'glm',
preProcess = c('medianImpute', 'center', 'scale'), trControl = myControl,
na.action = na.pass)
summary(model_glm_full)
insur_acc = subset(insur_acc, select = -c(TARGET_FLAG))
myFolds = createFolds(insur_acc$TARGET_AMT, k = 10)
myControl = trainControl(verboseIter = FALSE,savePredictions = TRUE, index = myFolds)
model_glm_full = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'glm',
preProcess = c('medianImpute', 'center', 'scale'), trControl = myControl,
na.action = na.pass)
summary(model_glm_full)
# let's drop any statistically insignificant variables at 5%
model_glm_sig1 = train(TARGET_FLAG ~ KIDSDRIV + INCOME + PARENT1 + HOME_VAL + MSTATUS +
EDUCATION + JOB + TRAVTIME + CAR_USE + BLUEBOOK + TIF + CAR_TYPE +
OLDCLAIM + CLM_FREQ + REVOKED + MVR_PTS + URBANICITY, data = insur_acc,
metric = 'RMSE', method = 'glm', preProcess = c('medianImpute', 'center', 'scale'),
trControl = myControl, na.action = na.pass)
summary(model_glm_full)
model_glm_sig1 = train(TARGET_AMT ~ SEX + BLUEBOOK + REVOKED + CAR_AGE, data = insur_acc,
metric = 'RMSE', method = 'glm', preProcess = c('medianImpute', 'center', 'scale'),
trControl = myControl, na.action = na.pass)
summary(model_glm_sig1)
model_glm_sig2 = train(TARGET_AMT ~ BLUEBOOK, data = insur_acc,
metric = 'RMSE', method = 'glm', preProcess = c('medianImpute', 'center', 'scale'),
trControl = myControl, na.action = na.pass)
summary(model_glm_sig2)
model_glmnet = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'glmnet',
prePRMSEess = c('medianImpute', 'center', 'scale'), trControl = myControl,
na.action = na.pass)
model_rf = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'ranger',
prePRMSEess = c('medianImpute'), trControl = myControl, na.action = na.pass)
model_glmnet = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'glmnet',
prePRMSEess = c('medianImpute', 'center', 'scale'), trControl = myControl,
na.action = na.pass)
model_glmnet = train(TARGET_AMT ~ ., data = insur_acc, method = 'glmnet',
prePRMSEess = c('medianImpute', 'center', 'scale'), trControl = myControl,
na.action = na.pass)
model_glmnet = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'glmnet',
preProcess = c('medianImpute', 'center', 'scale'), trControl = myControl,
na.action = na.pass)
coef(model_glmnet$finalModel, s = model_glmnet$finalModel$tuneValue$lambda)
model_rf = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'ranger',
preProcess = c('medianImpute'), trControl = myControl, na.action = na.pass)
model_rf = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'ranger',
preProcess = c('medianImpute'), trControl = myControl, na.action = na.pass)
model_list = list(glm_full = model_glm_full, glm_sig1 = model_glm_sig1, glm_sig2 = model_glm_sig2,
glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'RMSE')
final_linReg = train(TARGET_AMT ~ BLUEBOOK, data = insur_acc,
metric = 'RMSE', method = 'glm', preProcess = c('medianImpute', 'center', 'scale'),
trControl = trainControl(verboseIter = FALSE), na.action = na.pass)
final_logReg = train(TARGET_FLAG ~ KIDSDRIV + INCOME + PARENT1 + HOME_VAL + MSTATUS +
TRAVTIME + CAR_USE + BLUEBOOK + TIF + CAR_TYPE +
OLDCLAIM + CLM_FREQ + REVOKED + MVR_PTS + URBANICITY, data = insur,
metric = 'ROC', method = 'glm', preProcess = c('medianImpute', 'center', 'scale'),
trControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = FALSE),
na.action = na.pass)
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA621/HW4")
insur = read.csv('insurance_training_data.csv', stringsAsFactors = TRUE)
str(insur)
# drop index column
insur = subset(insur, select = -c(INDEX))
# eliminate dollar signs and commas and convert to numbers
insur$INCOME = as.numeric(sub('\\$', '', sub('\\,', '', insur$INCOME)))
insur$HOME_VAL = as.numeric(sub('\\$', '', sub('\\,', '', insur$HOME_VAL)))
insur$BLUEBOOK = as.numeric(sub('\\$', '', sub('\\,', '', insur$BLUEBOOK)))
insur$OLDCLAIM = as.numeric(sub('\\$', '', sub('\\,', '', insur$OLDCLAIM)))
summary(insur)
# mean of actual accidents
insur_acc = insur[insur$TARGET_FLAG == 1,]
mean(insur_acc$TARGET_AMT)
# convert categorical variables to factors
insur$TARGET_FLAG = factor(insur$TARGET_FLAG, labels = c('no_crash', 'yes_crash'))
str(insur)
insur_acc = subset(insur_acc, select = -c(TARGET_FLAG))
insur = subset(insur, select = -c(TARGET_AMT))
final_linReg = train(TARGET_AMT ~ BLUEBOOK, data = insur_acc,
metric = 'RMSE', method = 'glm', preProcess = c('medianImpute', 'center', 'scale'),
trControl = trainControl(verboseIter = FALSE), na.action = na.pass)
final_logReg = train(TARGET_FLAG ~ KIDSDRIV + INCOME + PARENT1 + HOME_VAL + MSTATUS +
TRAVTIME + CAR_USE + BLUEBOOK + TIF + CAR_TYPE +
OLDCLAIM + CLM_FREQ + REVOKED + MVR_PTS + URBANICITY, data = insur,
metric = 'ROC', method = 'glm', preProcess = c('medianImpute', 'center', 'scale'),
trControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = FALSE),
na.action = na.pass)
summary(final_logReg)
summary(final_linReg)
insur_test = read.csv('insurance-evaluation-data.csv')
insur_test = read.csv('insurance-evaluation-data.csv')
pred_class = predict(final_logReg, newdata = insur_test)
insur_test = read.csv('insurance-evaluation-data.csv', stringsAsFactors = TRUE)
pred_class = predict(final_logReg, newdata = insur_test)
insur_test = read.csv('insurance-evaluation-data.csv', stringsAsFactors = TRUE)
# eliminate dollar signs and commas and convert to numbers
insur_test$INCOME = as.numeric(sub('\\$', '', sub('\\,', '', insur_test$INCOME)))
insur_test$HOME_VAL = as.numeric(sub('\\$', '', sub('\\,', '', insur_test$HOME_VAL)))
insur_test$BLUEBOOK = as.numeric(sub('\\$', '', sub('\\,', '', insur_test$BLUEBOOK)))
insur_test$OLDCLAIM = as.numeric(sub('\\$', '', sub('\\,', '', insur_test$OLDCLAIM)))
pred_class = predict(final_logReg, newdata = insur_test)
pred_prob = predict(final_logReg, newdata = insur_test, type = 'prob')
insur_test_classified = cbind(pred_class, pred_prob)
head(insur_test_classified)
insur_test_classified = cbind(pred_class, pred_prob, insur_test)
str(insur_test)
str(insur_test_classified)
summary(insur_test)
final_linReg = train(TARGET_AMT ~ BLUEBOOK, data = insur_acc,
metric = 'RMSE', method = 'glm', preProcess = c('medianImpute', 'center', 'scale'),
trControl = trainControl(verboseIter = FALSE))
final_linReg = train(TARGET_AMT ~ BLUEBOOK, data = insur_acc,
metric = 'RMSE', method = 'glm', preProcess = c('medianImpute', 'center', 'scale'),
trControl = trainControl(verboseIter = FALSE))
final_logReg = train(TARGET_FLAG ~ KIDSDRIV + INCOME + PARENT1 + HOME_VAL + MSTATUS +
TRAVTIME + CAR_USE + BLUEBOOK + TIF + CAR_TYPE +
OLDCLAIM + CLM_FREQ + REVOKED + MVR_PTS + URBANICITY, data = insur,
metric = 'ROC', method = 'glm', preProcess = c('medianImpute', 'center', 'scale'),
trControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = FALSE))
final_logReg = train(TARGET_FLAG ~ ., data = insur,
metric = 'ROC', method = 'glm', preProcess = c('medianImpute', 'center', 'scale'),
trControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = FALSE))
final_logReg = train(TARGET_FLAG ~ KIDSDRIV + INCOME + PARENT1 + HOME_VAL + MSTATUS +
TRAVTIME + CAR_USE + BLUEBOOK + TIF + CAR_TYPE +
OLDCLAIM + CLM_FREQ + REVOKED + MVR_PTS + URBANICITY, data = insur,
metric = 'ROC', method = 'glm', preProcess = c('medianImpute', 'center', 'scale'),
trControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = FALSE),
na.action = na.exclude)
pred_class = predict(final_logReg, newdata = insur_test)
pred_class = predict(final_logReg, newdata = insur_test)
str(pred_class)
summary(pred_class)
summary(insur_test)
head(insur_test)
head(insur_test$INCOME)
impute_mean = function(x) replace(x, is.na(x), median(x, na.rm = TRUE))
impute_median = function(x) replace(x, is.na(x), median(x, na.rm = TRUE))
rm(impute_mean())
rm(impute_mean)
impute_median(insur_test$INCOME)
summary(impute_median(insur_test$INCOME))
is.na(impute_median(insur_test$INCOME))
sum(is.na(impute_median(insur_test$INCOME)))
summary(insur)
insur$AGE = impute_median(insur$AGE)
summary(insur)
insur$AGE = impute_median(insur$AGE)
insur$YOJ = impute_median(insur$YOJ)
insur$INCOME = impute_median(insur$INCOME)
insur$HOME_VAL = impute_median(insur$HOME_VAL)
insur$CAR_AGE = impute_median(insur$CAR_AGE)
summary(insur)
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA621/HW4")
insur = read.csv('insurance_training_data.csv', stringsAsFactors = TRUE)
str(insur)
# drop index column
insur = subset(insur, select = -c(INDEX))
# eliminate dollar signs and commas and convert to numbers
insur$INCOME = as.numeric(sub('\\$', '', sub('\\,', '', insur$INCOME)))
insur$HOME_VAL = as.numeric(sub('\\$', '', sub('\\,', '', insur$HOME_VAL)))
insur$BLUEBOOK = as.numeric(sub('\\$', '', sub('\\,', '', insur$BLUEBOOK)))
insur$OLDCLAIM = as.numeric(sub('\\$', '', sub('\\,', '', insur$OLDCLAIM)))
summary(insur)
# mean of actual accidents
insur_acc = insur[insur$TARGET_FLAG == 1,]
mean(insur_acc$TARGET_AMT)
# convert categorical variables to factors
insur$TARGET_FLAG = factor(insur$TARGET_FLAG, labels = c('no_crash', 'yes_crash'))
str(insur)
# median imputation
impute_median = function(x) replace(x, is.na(x), median(x, na.rm = TRUE))
insur$AGE = impute_median(insur$AGE)
insur$YOJ = impute_median(insur$YOJ)
insur$INCOME = impute_median(insur$INCOME)
insur$HOME_VAL = impute_median(insur$HOME_VAL)
insur$CAR_AGE = impute_median(insur$CAR_AGE)
library(caret)
library(caretEnsemble)
# drop TARGET_AMT variable
insur_acc = subset(insur_acc, select = -c(TARGET_FLAG))
set.seed(123)
# use cross validation to compare out-of-sample ROC for all models
# use the same folds for each model to ensure comparable results
myFolds = createFolds(insur_acc$TARGET_AMT, k = 10)
# used instead of method = 'cv', number = 10
myControl = trainControl(verboseIter = FALSE,savePredictions = TRUE, index = myFolds)
model_glm_full = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
insur_acc$TARGET_AMT
summary(insur_acc$TARGET_AMT)
View(insur_acc)
insur_acc = subset(insur, select = -c(TARGET_FLAG))
myFolds = createFolds(insur_acc$TARGET_AMT, k = 10)
model_glm_full = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_full)
insur = read.csv('insurance_training_data.csv', stringsAsFactors = TRUE)
str(insur)
# drop index column
insur = subset(insur, select = -c(INDEX))
# eliminate dollar signs and commas and convert to numbers
insur$INCOME = as.numeric(sub('\\$', '', sub('\\,', '', insur$INCOME)))
insur$HOME_VAL = as.numeric(sub('\\$', '', sub('\\,', '', insur$HOME_VAL)))
insur$BLUEBOOK = as.numeric(sub('\\$', '', sub('\\,', '', insur$BLUEBOOK)))
insur$OLDCLAIM = as.numeric(sub('\\$', '', sub('\\,', '', insur$OLDCLAIM)))
summary(insur)
# mean of actual accidents
insur_acc = insur[insur$TARGET_FLAG == 1,]
mean(insur_acc$TARGET_AMT)
# convert categorical variables to factors
insur$TARGET_FLAG = factor(insur$TARGET_FLAG, labels = c('no_crash', 'yes_crash'))
str(insur)
# median imputation
impute_median = function(x) replace(x, is.na(x), median(x, na.rm = TRUE))
insur$AGE = impute_median(insur$AGE)
insur$YOJ = impute_median(insur$YOJ)
insur$INCOME = impute_median(insur$INCOME)
insur$HOME_VAL = impute_median(insur$HOME_VAL)
insur$CAR_AGE = impute_median(insur$CAR_AGE)
library(caret)
library(caretEnsemble)
# drop TARGET_AMT variable
insur_acc = subset(insur, select = -c(TARGET_FLAG))
set.seed(123)
# use cross validation to compare out-of-sample ROC for all models
# use the same folds for each model to ensure comparable results
myFolds = createFolds(insur_acc$TARGET_AMT, k = 10)
# used instead of method = 'cv', number = 10
myControl = trainControl(verboseIter = FALSE,savePredictions = TRUE, index = myFolds)
# model using glm model
model_glm_full = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_full)
# let's drop any statistically insignificant variables at 5%
model_glm_sig1 = train(TARGET_AMT ~ SEX + BLUEBOOK + REVOKED + CAR_AGE, data = insur_acc,
metric = 'RMSE', method = 'glm', preProcess = c('center', 'scale'),
trControl = myControl)
summary(model_glm_sig1)
# let's again drop any additional statistically insigificant variables at 5%
model_glm_sig2 = train(TARGET_AMT ~ BLUEBOOK, data = insur_acc,
metric = 'RMSE', method = 'glm', preProcess = c('center', 'scale'),
trControl = myControl)
summary(model_glm_sig2)
# let's try a glmnet model that combines ridge vs. lasso regression
# since it penalizes either or both magnitude and number of non-zero coefficients, it can be used for variable selection
model_glmnet = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'glmnet',
preProcess = c('center', 'scale'), trControl = myControl)
coef(model_glmnet$finalModel, s = model_glmnet$finalModel$tuneValue$lambda)
# let's also model using random forest just for fun
model_rf = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'ranger',
preProcess = c('medianImpute'), trControl = myControl)
# compare models
model_list = list(glm_full = model_glm_full, glm_sig1 = model_glm_sig1, glm_sig2 = model_glm_sig2,
glmnet = model_glmnet, rf = model_rf)
# collect resamples from the CV folds
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'RMSE')
library(caret)
library(caretEnsemble)
# drop TARGET_AMT variable
insur_acc = subset(insur, select = -c(TARGET_FLAG))
set.seed(123)
# use cross validation to compare out-of-sample ROC for all models
# use the same folds for each model to ensure comparable results
myFolds = createFolds(insur_acc$TARGET_AMT, k = 10)
# used instead of method = 'cv', number = 10
myControl = trainControl(verboseIter = FALSE,savePredictions = TRUE, index = myFolds)
# model using glm model
model_glm_full = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_full)
# let's drop any statistically insignificant variables at 5%
model_glm_sig1 = train(TARGET_AMT ~ SEX + BLUEBOOK + REVOKED + CAR_AGE, data = insur_acc,
metric = 'RMSE', method = 'glm', preProcess = c('center', 'scale'),
trControl = myControl)
summary(model_glm_sig1)
# let's again drop any additional statistically insigificant variables at 5%
model_glm_sig2 = train(TARGET_AMT ~ BLUEBOOK, data = insur_acc,
metric = 'RMSE', method = 'glm', preProcess = c('center', 'scale'),
trControl = myControl)
summary(model_glm_sig2)
# let's try a glmnet model that combines ridge vs. lasso regression
# since it penalizes either or both magnitude and number of non-zero coefficients, it can be used for variable selection
model_glmnet = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'glmnet',
preProcess = c('center', 'scale'), trControl = myControl)
coef(model_glmnet$finalModel, s = model_glmnet$finalModel$tuneValue$lambda)
# let's also model using random forest just for fun
model_rf = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'ranger', trControl = myControl)
# compare models
model_list = list(glm_full = model_glm_full, glm_sig1 = model_glm_sig1, glm_sig2 = model_glm_sig2,
glmnet = model_glmnet, rf = model_rf)
# collect resamples from the CV folds
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'RMSE')
library(caret)
library(caretEnsemble)
# drop TARGET_AMT variable
insur_acc = insur[insur$TARGET_FLAG == 1,]
insur_acc = subset(insur_acc, select = -c(TARGET_FLAG))
set.seed(123)
# use cross validation to compare out-of-sample ROC for all models
# use the same folds for each model to ensure comparable results
myFolds = createFolds(insur_acc$TARGET_AMT, k = 10)
insur_acc = insur[insur$TARGET_FLAG == 1,]
insur_acc
insur[insur$TARGET_FLAG == 1,]
insur$TARGET_FLAG
insur[insur$TARGET_FLAG == 'yes_crash',]
insur_acc = insur[insur$TARGET_FLAG == 'yes_crash',]
insur_acc = subset(insur_acc, select = -c(TARGET_FLAG))
set.seed(123)
myFolds = createFolds(insur_acc$TARGET_AMT, k = 10)
library(caret)
library(caretEnsemble)
# drop TARGET_AMT variable
insur_acc = insur[insur$TARGET_FLAG == 'yes_crash',]
insur_acc = subset(insur_acc, select = -c(TARGET_FLAG))
set.seed(123)
# use cross validation to compare out-of-sample ROC for all models
# use the same folds for each model to ensure comparable results
myFolds = createFolds(insur_acc$TARGET_AMT, k = 10)
# used instead of method = 'cv', number = 10
myControl = trainControl(verboseIter = FALSE,savePredictions = TRUE, index = myFolds)
# model using glm model
model_glm_full = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_full)
# let's drop any statistically insignificant variables at 5%
model_glm_sig1 = train(TARGET_AMT ~ SEX + BLUEBOOK + REVOKED + CAR_AGE, data = insur_acc,
metric = 'RMSE', method = 'glm', preProcess = c('center', 'scale'),
trControl = myControl)
summary(model_glm_sig1)
# let's again drop any additional statistically insigificant variables at 5%
model_glm_sig2 = train(TARGET_AMT ~ BLUEBOOK, data = insur_acc,
metric = 'RMSE', method = 'glm', preProcess = c('center', 'scale'),
trControl = myControl)
summary(model_glm_sig2)
# let's try a glmnet model that combines ridge vs. lasso regression
# since it penalizes either or both magnitude and number of non-zero coefficients, it can be used for variable selection
model_glmnet = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'glmnet',
preProcess = c('center', 'scale'), trControl = myControl)
coef(model_glmnet$finalModel, s = model_glmnet$finalModel$tuneValue$lambda)
# let's also model using random forest just for fun
model_rf = train(TARGET_AMT ~ ., data = insur_acc, metric = 'RMSE', method = 'ranger', trControl = myControl)
# compare models
model_list = list(glm_full = model_glm_full, glm_sig1 = model_glm_sig1, glm_sig2 = model_glm_sig2,
glmnet = model_glmnet, rf = model_rf)
# collect resamples from the CV folds
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'RMSE')
# drop TARGET_AMT variable
insur = subset(insur, select = -c(TARGET_AMT))
set.seed(123)
# use cross validation to compare out-of-sample ROC for all models
# use the same folds for each model to ensure comparable results
myFolds = createFolds(insur$TARGET_FLAG, k = 10)
# confirm that folks preserve class distribution
table(insur$TARGET_FLAG) / nrow(insur)
table(insur$TARGET_FLAG[myFolds$Fold1]) / length(myFolds$Fold1)
myControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = FALSE,
savePredictions = TRUE, index = myFolds)  # used instead of method = 'cv', number = 10
# model using glm model
model_glm_full = train(TARGET_FLAG ~ ., data = insur, metric = 'ROC', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl,
na.action = na.pass)
summary(model_glm_full)
# let's drop any statistically insignificant variables at 5%
model_glm_sig1 = train(TARGET_FLAG ~ KIDSDRIV + INCOME + PARENT1 + HOME_VAL + MSTATUS +
EDUCATION + JOB + TRAVTIME + CAR_USE + BLUEBOOK + TIF + CAR_TYPE +
OLDCLAIM + CLM_FREQ + REVOKED + MVR_PTS + URBANICITY, data = insur,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'),
trControl = myControl, na.action = na.pass)
summary(model_glm_sig1)
# let's again drop any additional statistically insigificant variables at 5%
model_glm_sig2 = train(TARGET_FLAG ~ KIDSDRIV + INCOME + PARENT1 + HOME_VAL + MSTATUS +
TRAVTIME + CAR_USE + BLUEBOOK + TIF + CAR_TYPE +
OLDCLAIM + CLM_FREQ + REVOKED + MVR_PTS + URBANICITY, data = insur,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'),
trControl = myControl, na.action = na.pass)
summary(model_glm_sig2)
# let's try a glmnet model that combines ridge vs. lasso regression
# since it penalizes either or both magnitude and number of non-zero coefficients, it can be used for variable selection
model_glmnet = train(TARGET_FLAG ~ ., data = insur, metric = 'ROC', method = 'glmnet',
preProcess = c('center', 'scale'), trControl = myControl,
na.action = na.pass)
coef(model_glmnet$finalModel, s = model_glmnet$finalModel$tuneValue$lambda)
# let's also model using random forest just for fun
model_rf = train(TARGET_FLAG ~ ., data = insur, metric = 'ROC', method = 'ranger',
preProcess = c('medianImpute'), trControl = myControl, na.action = na.pass)
# compare models
model_list = list(glm_full = model_glm_full, glm_sig1 = model_glm_sig1, glm_sig2 = model_glm_sig2,
glmnet = model_glmnet, rf = model_rf)
# collect resamples from the CV folds
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
final_linReg = train(TARGET_AMT ~ BLUEBOOK, data = insur_acc,
metric = 'RMSE', method = 'glm', preProcess = c('center', 'scale'),
trControl = trainControl(verboseIter = FALSE))
summary(final_linReg)
final_logReg = train(TARGET_FLAG ~ KIDSDRIV + INCOME + PARENT1 + HOME_VAL + MSTATUS +
TRAVTIME + CAR_USE + BLUEBOOK + TIF + CAR_TYPE +
OLDCLAIM + CLM_FREQ + REVOKED + MVR_PTS + URBANICITY, data = insur,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'),
trControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = FALSE),
na.action = na.exclude)
summary(final_logReg)
# import and cleanse test data
insur_test = read.csv('insurance-evaluation-data.csv', stringsAsFactors = TRUE)
# eliminate dollar signs and commas and convert to numbers
insur_test$INCOME = as.numeric(sub('\\$', '', sub('\\,', '', insur_test$INCOME)))
insur_test$HOME_VAL = as.numeric(sub('\\$', '', sub('\\,', '', insur_test$HOME_VAL)))
insur_test$BLUEBOOK = as.numeric(sub('\\$', '', sub('\\,', '', insur_test$BLUEBOOK)))
insur_test$OLDCLAIM = as.numeric(sub('\\$', '', sub('\\,', '', insur_test$OLDCLAIM)))
insur_test$AGE = impute_median(insur_test$AGE)
insur_test$YOJ = impute_median(insur_test$YOJ)
insur_test$INCOME = impute_median(insur_test$INCOME)
insur_test$HOME_VAL = impute_median(insur_test$HOME_VAL)
insur_test$CAR_AGE = impute_median(insur_test$CAR_AGE)
pred_class = predict(final_logReg, newdata = insur_test)
pred_prob = predict(final_logReg, newdata = insur_test, type = 'prob')
insur_test_classified = cbind(pred_class, pred_prob, insur_test)
insur_test_classified
View(insur_test_classified)
table(insur$TARGET_FLAG, insur$URBANICITY)
write.csv(insur_test_classified, 'insur_evaluation-prediction.csv')
table(pred_class) / length(pred_class)
View(insur_test_classified)
insur_test = read.csv('insurance-evaluation-data.csv', stringsAsFactors = TRUE)
# eliminate dollar signs and commas and convert to numbers
insur_test$INCOME = as.numeric(sub('\\$', '', sub('\\,', '', insur_test$INCOME)))
insur_test$HOME_VAL = as.numeric(sub('\\$', '', sub('\\,', '', insur_test$HOME_VAL)))
insur_test$BLUEBOOK = as.numeric(sub('\\$', '', sub('\\,', '', insur_test$BLUEBOOK)))
insur_test$OLDCLAIM = as.numeric(sub('\\$', '', sub('\\,', '', insur_test$OLDCLAIM)))
insur_test$AGE = impute_median(insur_test$AGE)
insur_test$YOJ = impute_median(insur_test$YOJ)
insur_test$INCOME = impute_median(insur_test$INCOME)
insur_test$HOME_VAL = impute_median(insur_test$HOME_VAL)
insur_test$CAR_AGE = impute_median(insur_test$CAR_AGE)
# predict classes and probabilities
pred_class = predict(final_logReg, newdata = insur_test)
pred_prob = predict(final_logReg, newdata = insur_test, type = 'prob')
insur_test$TARGET_FLAG = pred_class
insur_test_classified = cbind(pred_prob, insur_test)
View(insur_test_classified)
insur_test_acc = insur_test[insur_test$TARGET_FLAG == 'yes_accident',]
insur_test_acc
head(insur_test)
insur_test$TARGET_FLAG
insur_test_acc = insur_test[insur_test$TARGET_FLAG == yes_accident,]
insur_test_acc = insur_test[insur_test$TARGET_FLAG == 'yes_crash',]
insur_test_acc
pred_cost = predict(final_linReg, newdata = insur_test_acc)
insur_test[insur_test$TARGET_FLAG == 'yes_crash', 'TARGET_AMT'] = pred_cost
insur_test[insur_test$TARGET_FLAG == 'no_crash', 'TARGET_AMT'] = 0
insur_test_classified = cbind(pred_prob, insur_test)
write.csv(insur_test_classified, 'insur_evaluation-prediction.csv')
table(pred_class) / length(pred_class)
mean(insur_test[insur_test$TARGET_FLAG == 'yes_crash', 'TARGET_AMT'])
hist(insur_test[insur_test$TARGET_FLAG == 'yes_crash', 'TARGET_AMT'])
hist(insur_test[insur_test$TARGET_FLAG == 'yes_crash', 'TARGET_AMT'])
hist(insur[insur$TARGET_FLAG == 'yes_crash', 'TARGET_AMT'])
insur[insur$TARGET_FLAG == 'yes_crash', 'TARGET_AMT']
hist(insur[insur$TARGET_FLAG == 1, 'TARGET_AMT'])
head(insur)
insur = read.csv('insurance_training_data.csv', stringsAsFactors = TRUE)
str(insur)
# drop index column
insur = subset(insur, select = -c(INDEX))
# eliminate dollar signs and commas and convert to numbers
insur$INCOME = as.numeric(sub('\\$', '', sub('\\,', '', insur$INCOME)))
insur$HOME_VAL = as.numeric(sub('\\$', '', sub('\\,', '', insur$HOME_VAL)))
insur$BLUEBOOK = as.numeric(sub('\\$', '', sub('\\,', '', insur$BLUEBOOK)))
insur$OLDCLAIM = as.numeric(sub('\\$', '', sub('\\,', '', insur$OLDCLAIM)))
summary(insur)
# mean of actual accidents
mean(insur[insur$TARGET_FLAG == 1,])
mean(insur[insur$TARGET_FLAG == 1,])
insur[insur$TARGET_FLAG == 1,]
mean(insur[insur$TARGET_FLAG == 1, 'TARGET_AMT'])
