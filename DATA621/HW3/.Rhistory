install.packages('dplyr')
install.packages("tidyr")
install.packages("ggplot2")
install.packages("ggthemes")
install.packages("shiny")
setwd("~/Google Drive/CUNY/git/DATA605/HW1")
A = matrix(seq(1, 6), nrow = 2, byrow = TRUE)
B = matrix(seq(12, 7), nrow = 2)
A
B
A %*% t(B)
t(A) %*% B
C = matrix(c(1, 0, -3, 1), nrow = 2, byrow = TRUE)
C
solve(C)
C %*% solve(C)
solve(C) %*% C
A = matrix(c(1,2,3,1,1,1,2,0,1) nrow = 3)
A = matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3)
A
E21 = matrix(c(1,-2,0,0,1,0,0,0,1), nrow = 3)
E21
E21 %*% A
E31 = matrix(c(1,0,-3,0,1,0,0,0,1), nrow = 3)
E31
E31 %*% E21 %*% A
E32 = matrix(c(1, 0,0,0,1,-2,0,0,1), nrow = 3)
E32
E32 %*% E31 %*% E23 %*% A
E32 %*% E31 %*% E21 %*% A
L = solve(E32 %*% E31 %*% E21)
L
solve(E21 %*% E31 %*% E32)
L * U
U = E32 %*% E31 %*% E21 %*% A
L %*% U
A
L
L %*% solve(L)
solve(L) %*% L
L
A
A %*% solve(A)
solve(A) %*% A
A
U
U %*% solve(U)
solve(U) %*% U
?array
A = array(c(1,2), c(3,4))
A
array(c(1,2))
array(c(1,2), 2)
array(c(1,2), 2, 3)
array(seq(1:4), 2
)
array(seq(1:4))
array(seq(1:4), c(2,2))
array(seq(1:4), c(2,2), byrow=TRUE)
A = array(seq(1:4), c(1,2))
A
A = array(seq(1:4), c(2,2))
AI
A
A %*% A
solve(A) %*% A
a = c(1,2,3)
b = c(4,5,6)
rbind(a, c)
a
b
?rbind
rbind(c(a, b))
cbind(c(a, b))
a = array(seq(1:3))
a
rbind(a, a)
str(a)
str(b)
typeof(a)
typeof(b)
summary(a)
summary(b)
class(a)
class(b)
setwd("~/Google Drive/CUNY/git/DATA605/HW1")
u = c(0.5, 0.5)
v = c(3.0, -4.0)
uv_dot = u %*% v
uv_dot
u %*% v
t(v) %*% u
v = c(3.0, 4.0)
t(v) %*% u
u %*% v
u**2
u %*% u
a = c(4, 3)
a = c(3, 5)
a = c(3, 4)
a %*% a
sqrt(a %*% a)
u = c(0.5, 0.5)
v = c(3.0, 4.0)
uv_dot = u %*% v
uv_dot
u = c(0.5, 0.5)
v = c(3.0, 4.0)
uv_dot = u %*% v
uv_dot
# length of u
u_len = sqrt(sum(u**2))
u_len
#length of v
v_len = sqrt(sum(v**2))
v_len
3*u - 2*v
matrix(c(0.5,0.5))
a = matrix(c(0.5,0.5))
b = matrix(c(3, 4))
a %*% b
t(b) %*% a
# u.v = |u| * |v| * cos(theta)
# theta = arccos(u.v / (|u| * |v|))
theta = acos( uv_dot / ( u_len * v_len ) )
# convert from radians to degrees
theta = theta * 180 / pi
theta
E32 = matrix(c(1,0,0,0,1,0,0,-2,1),3,3,byrow = T)
E32
E21 = matrix(c(1,0,0,-2,1,0,0,0,1),3,3,byrow = T)
E32 %*% E21
E21
A = matrix(c(1,1,1,2,4,5,0,4,0),3,3,byrow = T)
E32 %*% E21 %*% A
solve(E21) %*% solve(E32)
solve(E21)
E21
L = solve(E21) %*% solve(E32)
U = E32 %*% E21
L %*% U
L %*% (U %*% A)
U
U = matrix(c(1,1,1,0,2,3,0,0,-6),3,3,byrow = T)
L %*% U
L
solve(L) %*% L
L %*% solve(L)
data(gala, package = 'faraway')
install.packages('faraway')
data(gala, package = 'faraway')
model.matrix( ~ Area + Elevation + Nearest + Scruz + Adjacent, gala)
head(data, 10)
head(gala, 10)
model.matrix( ~ Area + Elevation + Nearest + Scruz + Adjacent, gala)
x = model.matrix( ~ Area + Elevation + Nearest + Scruz + Adjacent, gala)
class(x)
y = gala$Species
xtxi = solve(t(x) %*% x)
xtxi
solve(crossprod(x,x), crossprod(x,y))
solve(xtxi) %*% t(x) %*% y
xtxi %*% t(x) %*% y
setwd("~/Google Drive/CUNY/git/DATA604/Week6")
x = seq(-1000, 0, 1)
plot(e^(2*x))
plot(exp(2*x))
exp(2*x)
x = seq(0, 1000, 1)
plot(exp(-2*x))
x = seq(-10, 0, 0.01)
plot(exp(2*x))
x = seq(0, 10, 0.01)
plot(exp(-2*x))
plot(x ~ exp(2*x))
plot(exp(2*x) ~ x)
x = 3
exp(2*x)/2
R = exp(2*x)/2
log(2*R)/2
exp(10000000)
exp(-10000000)
exp(0)
X = 5
R = -exp(-2*X)/2
R
-log(-2*R)/2
exp(0)
exp(0)/2
exp(-10)
exp(-1000000)
-exp(-1000000)
-exp(-2*0)
-exp(-2*0)/2
-exp(-2*10000000)/2
x1 = seq(-5, 0, 0.01)
exp(2*x1)
x2 = seq(0, 5, 0.01)
plot(c(exp(2*x1), exp(-2*x)), c(x1, x2))
x1 = seq(-5, 0, 0.01)
x2 = seq(0, 5, 0.01)
plot(c(exp(2*x1), exp(-2*x2)), c(x1, x2))
plot(c(exp(2*x1), exp(-2*x2)) ~ c(x1, x2))
R = runif(100000, -0.5, 0.5)
log(1)/2
log(0)/2
x = if(R < 0) { -log(-2*R)/2 }
x = c(if(R < 0) { -log(-2*R)/2 },
if(R > 0) {  log(2*R)/2) })
x = c(if(R < 0) { -log(-2*R)/2 },
if(R > 0) {  log(2*R)/2 })
par(mfrow = c(1, 2))
hist(x)
plot(ecdf(x))
x
if(R > 0) {  log(2*R)/2 }
x = seq(0,1000, 0.001)
exp(e^x)
plot(exp(x))
x = seq(0.0001,1000, 0.001)
plot(exp(x))
exp(1)
plot(exp(x) ~ x)
x = seq(0, 5, 0.001)
plot(exp(x))
plot(exp(x) ~ x)
x = seq(-5, 0, 0.001)
plot(exp(x) ~ x)
x = seq(0, 5, 0.001)
plot(exp(x) ~ x)
x = seq(-5, 0, 0.001)
plot(exp(x) ~ x)
x1 = seq(-5, 0, 0.01)
x2 = seq(0, 5, 0.01)
abline(c(exp(2*x1), exp(-2*x2)) ~ c(x1, x2))
abline(c(exp(2*x1), exp(-2*x2)) ~ c(x1, x2))
abline(c(exp(2*x1), exp(-2*x2)) ~ c(x1, x2))
plot(c(exp(2*x1), exp(-2*x2)) ~ c(x1, x2))
setwd("~/Google Drive/CUNY/git/DATA621/HW3")
crime = read.csv('crime-training-data.csv')
head(crime)
str(crime)
summary(crime)
library(caret)
myControl = trainControl(method = 'cv', number = 10, summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = TRUE)
crime = read.csv('crime-training-data.csv')
str(crime)
summary(crime)
crime['target']
crime['target'] > median(crime['target'])
median(crime['target'])
typeof(crime['target'])
median(crime['target'][1])
crime['target']
sum(crime['target'])
?median
test = crime['target']
median(test)
table(crime$target) / nrow(crime)
length(myFolds$Fold1)
myFolds = createFolds(crime, k = 10)
length(myFolds$Fold1)
myFolds
myFolds = createFolds(crime$target, k = 10)
myFolds
length(myFolds$Fold1)
table(crime$target[myFolds$Fold1]) / length(myFolds$Fold1)
table(crime$target) / nrow(crime)
table(crime$target[myFolds$Fold1]) / length(myFolds$Fold1)
set.seed(123)
model_glmnet = train(target ~ ., data = crime, metric = 'ROC', method = 'glmnet', trControl = myControl)
myControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = TRUE,
savePredictions = TRUE, index = myFolds)  # used instead of method = 'cv', number = 10
model_glmnet = train(target ~ ., data = crime, metric = 'ROC', method = 'glmnet', trControl = myControl)
crime$chas = factor(crime$chas)
crime$target = factor(crime$target)
myFolds = createFolds(crime$target, k = 10)
table(crime$target) / nrow(crime)
table(crime$target[myFolds$Fold1]) / length(myFolds$Fold1)
myControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = TRUE,
savePredictions = TRUE, index = myFolds)  # used instead of method = 'cv', number = 10
model_glmnet = train(target ~ ., data = crime, metric = 'ROC', method = 'glmnet', trControl = myControl)
crime$chas = factor(crime$chas, levels = c('river_bordered', 'river_not_bordered'))
crime$chas
crime$target = factor(crime$target, levels = c('below_median', 'above_median'))
str(crime)
crime = read.csv('crime-training-data.csv')
str(crime)
crime$target = factor(crime$target, levels = c('below_median', 'above_median'))
str(crime)
crime = read.csv('crime-training-data.csv')
crime$target = factor(crime$target)
str(crime)
crime$target = factor(levels = c('below_median', 'above_median'))
levels(crime$target)
levels(crime$target) = c('below_median', 'above_median'))
levels(crime$target) = c('below_median', 'above_median')
str(crime)
crime = read.csv('crime-training-data.csv')
crime$target = factor(crime$target)
str(crime)
levels(crime$target) = c('below_median', 'above_median')
str(crime)
crime = read.csv('crime-training-data.csv')
crime$target = as.factor(crime$target, labels = c('below_median', 'above_median'))
crime$target = factor(crime$target, labels = c('below_median', 'above_median'))
str(crime)
crime = read.csv('crime-training-data.csv')
str(crime)
crime$target = factor(crime$target, labels = c('below_median', 'above_median'))
str(crime)
crime$chas = factor(crime$chas, levels = c('river_bordered', 'river_not_bordered'))
levels(crime$target) = c('below_median', 'above_median')
str(crime)
crime = read.csv('crime-training-data.csv')
str(crime)
crime$target = factor(crime$target, labels = c('below_median', 'above_median'))
str(crime)
crime$chas = factor(crime$chas, levels = c('river_bordered', 'river_not_bordered'))
str(crime)
crime$chas
crime = read.csv('crime-training-data.csv')
crime$chas
crime$chas = factor(crime$chas)
str(crime)
crime$chas = factor(crime$chas, levels = c('river_bordered', 'river_not_bordered'))
str(crime)
crime$chas = factor(crime$chas, levels = c('bordered', 'not_bordered'))
str(crime)
crime = read.csv('crime-training-data.csv')
crime$chas = factor(crime$chas)
str(crime)
crime$chas = factor(crime$chas, levels = c('bordered', 'not_bordered'))
str(crime)
crime = read.csv('crime-training-data.csv')
str(crime)
crime$chas = factor(crime$chas)
str(crime)
levels(crime$chas) = c('bordered', 'not_bordered')
str(crime)
crime$target = factor(crime$target, labels = c('below_median', 'above_median'))
str(crime)
crime = read.csv('crime-training-data.csv')
crime$chas = factor(crime$chas, labels = c('not_bordered', 'bordered'))
str(crime)
