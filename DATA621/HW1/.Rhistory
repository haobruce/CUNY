summary(simple_model)
simple_model$model
summary(simple_model)
RMSE = mean((train_model1$TARGET_WINS - predict(simple_model, train_model1))^2)^0.5
RMSE
setwd("~/Google Drive/CUNY/git/DATA621/HW1")
library(caret)
library(dplyr)
library(ggplot2)
train_raw = read.csv("~/Google Drive/CUNY/git/DATA621/HW1/moneyball-training-data.csv")
train_clean = train_raw
train_clean = train_clean %>% mutate(TEAM_BATTING_1B = TEAM_BATTING_H - TEAM_BATTING_2B - TEAM_BATTING_3B - TEAM_BATTING_HR) %>%
select(-TEAM_BATTING_H)
train_clean %>% filter(TARGET_WINS == 0)
train_clean = train_clean %>% filter(TARGET_WINS != 0)
train_clean = train_clean %>% mutate(
TEAM_PITCHING_SO = ifelse(is.na(TEAM_PITCHING_SO), median(TEAM_PITCHING_SO, na.rm = TRUE), TEAM_PITCHING_SO),
TEAM_BATTING_SO = ifelse(is.na(TEAM_BATTING_SO), median(TEAM_BATTING_SO, na.rm = TRUE), TEAM_BATTING_SO))
train_clean = train_clean %>% mutate(
TEAM_BASERUN_SB = ifelse(is.na(TEAM_BASERUN_SB), median(TEAM_BASERUN_SB, na.rm = TRUE), TEAM_BASERUN_SB),
TEAM_BASERUN_CS = ifelse(is.na(TEAM_BASERUN_CS), median(TEAM_BASERUN_CS, na.rm = TRUE), TEAM_BASERUN_CS),
TEAM_FIELDING_DP = ifelse(is.na(TEAM_FIELDING_DP), median(TEAM_FIELDING_DP, na.rm = TRUE), TEAM_FIELDING_DP))
train_clean = train_clean %>% mutate(TEAM_BATTING_HBP_YN = ifelse(is.na(TEAM_BATTING_HBP), 0, 1))
plot(density(train_clean$TEAM_PITCHING_H))
train_clean %>% filter(TEAM_PITCHING_H > quantile(TEAM_PITCHING_H, 0.75) + 1.5 * IQR(TEAM_PITCHING_H)) %>%
summarise(n = n())
train_clean = train_clean %>%
mutate('PITCHER_OUTLIER_YN' = as.factor(
ifelse(TEAM_PITCHING_H > quantile(TEAM_PITCHING_H, 0.75) + 1.5 * IQR(TEAM_PITCHING_H) |
TEAM_PITCHING_H < quantile(TEAM_PITCHING_H, 0.25) - 1.5 * IQR(TEAM_PITCHING_H),
1, 0)))
train_clean = train_clean %>%
mutate('BATTING_OUTLIER_YN' = as.factor(
ifelse(TEAM_BATTING_1B > quantile(TEAM_BATTING_1B, 0.75) + 1.5 * IQR(TEAM_BATTING_1B) |
TEAM_BATTING_1B < quantile(TEAM_BATTING_1B, 0.25) - 1.5 * IQR(TEAM_BATTING_1B),
1, 0)))
train_clean = train_clean %>%
mutate('BATTING_OUTLIER_YN' = as.factor(
ifelse(TEAM_BATTING_1B > quantile(TEAM_BATTING_1B, 0.75) + 1.5 * IQR(TEAM_BATTING_1B) |
TEAM_BATTING_1B < quantile(TEAM_BATTING_1B, 0.25) - 1.5 * IQR(TEAM_BATTING_1B),
1, 0)))
train_clean = train_clean %>%
mutate('BASERUN_OUTLIER_YN' = as.factor(
ifelse(TEAM_BASERUN_SB > quantile(TEAM_BASERUN_SB, 0.75) + 1.5 * IQR(TEAM_BASERUN_SB) |
TEAM_BASERUN_SB < quantile(TEAM_BASERUN_SB, 0.25) - 1.5 * IQR(TEAM_BASERUN_SB),
1, 0)))
train_clean = train_clean %>%
mutate('FIELDING_OUTLIER_YN' = as.factor(
ifelse(TEAM_FIELDING_E > quantile(TEAM_FIELDING_E, 0.75) + 1.5 * IQR(TEAM_FIELDING_E) |
TEAM_FIELDING_E < quantile(TEAM_FIELDING_E, 0.25) - 1.5 * IQR(TEAM_FIELDING_E),
1, 0)))
train_clean = train_clean %>%
mutate(TARGET_WINS_Ratio = TARGET_WINS / 162,
TEAM_H_Ratio = (TEAM_BATTING_1B + TEAM_BATTING_2B + TEAM_BATTING_3B + TEAM_BATTING_HR) / TEAM_PITCHING_H,
TEAM_BASERUN_Ratio = TEAM_BASERUN_SB / TEAM_BASERUN_CS,
TEAM_HR_SO_Ratio = TEAM_BATTING_HR / ifelse(TEAM_BATTING_SO == 0, median(TEAM_BATTING_SO), TEAM_BATTING_SO))
summary(train_clean)
data.frame(cor(train_clean[3:ncol(train_clean)], train_clean[2])) %>%
tibble::rownames_to_column() %>%
arrange(desc(`TARGET_WINS`))
data.frame(cor(train_clean[3:ncol(train_clean)], train_clean[2])) %>%
tibble::rownames_to_column() %>%
arrange(desc(`TARGET_WINS`))
# cross validated glm model from caret package
train_control = trainControl(method = 'cv', number = 5)
set.seed(123)
train_model1 = train_clean
train_model1 = train_model1 %>% select(-INDEX, -TARGET_WINS_Ratio, -TEAM_BATTING_HBP)
model1 = train(TARGET_WINS ~ ., data = train_model1, trControl = train_control, method = 'lm')
summary(model1)
model1$results
set.seed(123)
train_model1 = train_model1 %>% select(-TEAM_HR_SO_Ratio, -TEAM_BASERUN_Ratio, -BASERUN_OUTLIER_YN, -BATTING_OUTLIER_YN,
-TEAM_PITCHING_SO, -TEAM_PITCHING_BB, -TEAM_PITCHING_H, -TEAM_BASERUN_CS,
-TEAM_BATTING_SO)
model1 = train(TARGET_WINS ~ ., data = train_model1, trControl = train_control, method = 'lm')
summary(model1)
model1$results
set.seed(123)
train_model2 = train_clean
train_model2 = train_model2 %>% select(TARGET_WINS_Ratio, TEAM_H_Ratio, TEAM_BASERUN_Ratio, TEAM_HR_SO_Ratio, TEAM_PITCHING_HR, PITCHER_OUTLIER_YN)
model2 = train(TARGET_WINS_Ratio ~ ., data = train_model2, trControl = train_control, method = 'lm')
summary(model2)
model2$results
set.seed(123)
model3 = train(TARGET_WINS ~ ., data = train_model1, trControl = train_control, method = 'lm',
preProcess = c('center', 'scale'))
summary(model3)
model3$results
setwd("~/Google Drive/CUNY/git/DATA621/HW1")
library(caret)
library(car)
library(dplyr)
library(ggplot2)
cor(train_model1)
setwd("~/Google Drive/CUNY/git/DATA621/HW1")
library(caret)
library(car)
library(dplyr)
library(ggplot2)
train_raw = read.csv("~/Google Drive/CUNY/git/DATA621/HW1/moneyball-training-data.csv")
summary(train_raw)
par(mfrow=c(4, 4))
boxplot(train_raw[2], show.names=TRUE)
boxplot(train_raw[3], show.names=TRUE)
boxplot(train_raw[4], show.names=TRUE)
boxplot(train_raw[5], show.names=TRUE)
boxplot(train_raw[6], show.names=TRUE)
boxplot(train_raw[7], show.names=TRUE)
boxplot(train_raw[8], show.names=TRUE)
boxplot(train_raw[9], show.names=TRUE)
boxplot(train_raw[10], show.names=TRUE)
boxplot(train_raw[11], show.names=TRUE)
boxplot(train_raw[12], show.names=TRUE)
boxplot(train_raw[13], show.names=TRUE)
boxplot(train_raw[14], show.names=TRUE)
boxplot(train_raw[15], show.names=TRUE)
boxplot(train_raw[16], show.names=TRUE)
boxplot(train_raw[17], show.names=TRUE)
cor_df = data.frame(cbind(cor(train_raw[3:ncol(train_raw)], train_raw[2]),
cor(train_raw[3:ncol(train_raw)], train_raw[2], use = 'pairwise.complete.obs')))
names(cor_df) = c('With NAs', 'Ignoring NAs')
cor_df %>% tibble::rownames_to_column() %>% arrange(desc(`Ignoring NAs`))
train_clean = train_raw
train_clean = train_clean %>% mutate(TEAM_BATTING_1B = TEAM_BATTING_H - TEAM_BATTING_2B - TEAM_BATTING_3B - TEAM_BATTING_HR) %>%
select(-TEAM_BATTING_H)
train_clean %>% filter(TARGET_WINS == 0)
train_clean = train_clean %>% filter(TARGET_WINS != 0)
train_clean = train_clean %>% mutate(
TEAM_PITCHING_SO = ifelse(is.na(TEAM_PITCHING_SO), median(TEAM_PITCHING_SO, na.rm = TRUE), TEAM_PITCHING_SO),
TEAM_BATTING_SO = ifelse(is.na(TEAM_BATTING_SO), median(TEAM_BATTING_SO, na.rm = TRUE), TEAM_BATTING_SO))
train_clean = train_clean %>% mutate(
TEAM_BASERUN_SB = ifelse(is.na(TEAM_BASERUN_SB), median(TEAM_BASERUN_SB, na.rm = TRUE), TEAM_BASERUN_SB),
TEAM_BASERUN_CS = ifelse(is.na(TEAM_BASERUN_CS), median(TEAM_BASERUN_CS, na.rm = TRUE), TEAM_BASERUN_CS),
TEAM_FIELDING_DP = ifelse(is.na(TEAM_FIELDING_DP), median(TEAM_FIELDING_DP, na.rm = TRUE), TEAM_FIELDING_DP))
train_clean = train_clean %>% mutate(TEAM_BATTING_HBP_YN = ifelse(is.na(TEAM_BATTING_HBP), 0, 1))
summary(train_clean)
plot(density(train_clean$TEAM_PITCHING_H))
train_clean %>% filter(TEAM_PITCHING_H > quantile(TEAM_PITCHING_H, 0.75) + 1.5 * IQR(TEAM_PITCHING_H)) %>%
summarise(n = n())
train_clean = train_clean %>%
mutate('PITCHER_OUTLIER_YN' = ifelse(TEAM_PITCHING_H > quantile(TEAM_PITCHING_H, 0.75) + 1.5 * IQR(TEAM_PITCHING_H) |
TEAM_PITCHING_H < quantile(TEAM_PITCHING_H, 0.25) - 1.5 * IQR(TEAM_PITCHING_H),
1, 0))
train_clean = train_clean %>%
mutate('BATTING_OUTLIER_YN' = ifelse(TEAM_BATTING_1B > quantile(TEAM_BATTING_1B, 0.75) + 1.5 * IQR(TEAM_BATTING_1B) |
TEAM_BATTING_1B < quantile(TEAM_BATTING_1B, 0.25) - 1.5 * IQR(TEAM_BATTING_1B),
1, 0))
train_clean = train_clean %>%
mutate('BATTING_OUTLIER_YN' = ifelse(TEAM_BATTING_1B > quantile(TEAM_BATTING_1B, 0.75) + 1.5 * IQR(TEAM_BATTING_1B) |
TEAM_BATTING_1B < quantile(TEAM_BATTING_1B, 0.25) - 1.5 * IQR(TEAM_BATTING_1B),
1, 0))
train_clean = train_clean %>%
mutate('BASERUN_OUTLIER_YN' = ifelse(TEAM_BASERUN_SB > quantile(TEAM_BASERUN_SB, 0.75) + 1.5 * IQR(TEAM_BASERUN_SB) |
TEAM_BASERUN_SB < quantile(TEAM_BASERUN_SB, 0.25) - 1.5 * IQR(TEAM_BASERUN_SB),
1, 0))
train_clean = train_clean %>%
mutate('FIELDING_OUTLIER_YN' = ifelse(TEAM_FIELDING_E > quantile(TEAM_FIELDING_E, 0.75) + 1.5 * IQR(TEAM_FIELDING_E) |
TEAM_FIELDING_E < quantile(TEAM_FIELDING_E, 0.25) - 1.5 * IQR(TEAM_FIELDING_E),
1, 0))
train_clean = train_clean %>%
mutate(TARGET_WINS_Ratio = TARGET_WINS / 162,
TEAM_H_Ratio = (TEAM_BATTING_1B + TEAM_BATTING_2B + TEAM_BATTING_3B + TEAM_BATTING_HR) / TEAM_PITCHING_H,
TEAM_BASERUN_Ratio = TEAM_BASERUN_SB / TEAM_BASERUN_CS,
TEAM_HR_SO_Ratio = TEAM_BATTING_HR / ifelse(TEAM_BATTING_SO == 0, median(TEAM_BATTING_SO), TEAM_BATTING_SO))
summary(train_clean)
data.frame(cor(train_clean[3:ncol(train_clean)], train_clean[2])) %>%
tibble::rownames_to_column() %>%
arrange(desc(`TARGET_WINS`))
train_clean_ex_outliers = train_clean %>%
filter(PITCHER_OUTLIER_YN == 0, BATTING_OUTLIER_YN == 0, FIELDING_OUTLIER_YN ==0)
par(mfrow=c(4, 4))
boxplot(train_clean_ex_outliers[2], show.names=TRUE)
boxplot(train_clean_ex_outliers[3], show.names=TRUE)
boxplot(train_clean_ex_outliers[4], show.names=TRUE)
boxplot(train_clean_ex_outliers[5], show.names=TRUE)
boxplot(train_clean_ex_outliers[6], show.names=TRUE)
boxplot(train_clean_ex_outliers[7], show.names=TRUE)
boxplot(train_clean_ex_outliers[8], show.names=TRUE)
boxplot(train_clean_ex_outliers[9], show.names=TRUE)
boxplot(train_clean_ex_outliers[10], show.names=TRUE)
boxplot(train_clean_ex_outliers[11], show.names=TRUE)
boxplot(train_clean_ex_outliers[12], show.names=TRUE)
boxplot(train_clean_ex_outliers[13], show.names=TRUE)
boxplot(train_clean_ex_outliers[14], show.names=TRUE)
boxplot(train_clean_ex_outliers[15], show.names=TRUE)
boxplot(train_clean_ex_outliers[16], show.names=TRUE)
boxplot(train_clean_ex_outliers[17], show.names=TRUE)
train_model1 = train_clean
train_model1 = train_model1 %>% select(-INDEX, -TARGET_WINS_Ratio, -TEAM_BATTING_HBP)
model1 = train(TARGET_WINS ~ ., data = train_model1, method = 'lm')
summary(model1)
model1$results
train_model1 = train_model1 %>% select(-TEAM_HR_SO_Ratio, -TEAM_BASERUN_Ratio, -BASERUN_OUTLIER_YN, -BATTING_OUTLIER_YN,
-TEAM_PITCHING_SO, -TEAM_PITCHING_BB, -TEAM_PITCHING_H, -TEAM_BASERUN_CS,
-TEAM_BATTING_SO)
model1 = train(TARGET_WINS ~ ., data = train_model1, method = 'lm')
summary(model1)
model1$results
train_model2 = train_clean
train_model2 = train_model2 %>% select(TARGET_WINS_Ratio, TEAM_H_Ratio, TEAM_BASERUN_Ratio, TEAM_HR_SO_Ratio, TEAM_PITCHING_HR, PITCHER_OUTLIER_YN)
model2 = train(TARGET_WINS_Ratio ~ ., data = train_model2, method = 'lm')
summary(model2)
model2$results
cor(train_model1)
train_model3 = train_clean
train_model3 = train_model2 %>% select(TARGET_WINS_Ratio, TEAM_H_Ratio, TEAM_BASERUN_Ratio, TEAM_HR_SO_Ratio, TEAM_PITCHING_HR, PITCHER_OUTLIER_YN)
model3 = train(TARGET_WINS_Ratio ~ ., data = train_model3, method = 'lm')
summary(model3)
model3$results
cor(train_model1)
train_model3 = train_model1 %>% select(-TEAM_BATTING_HR, -FIELDING_OUTLIER_YN, -TEAM_H_RATIO)
train_model1 = train_clean
train_model1 = train_model1 %>% select(-INDEX, -TARGET_WINS_Ratio, -TEAM_BATTING_HBP)
model1 = train(TARGET_WINS ~ ., data = train_model1, method = 'lm')
summary(model1)
model1$results
train_model1 = train_model1 %>% select(-TEAM_HR_SO_Ratio, -TEAM_BASERUN_Ratio, -BASERUN_OUTLIER_YN, -BATTING_OUTLIER_YN,
-TEAM_PITCHING_SO, -TEAM_PITCHING_BB, -TEAM_PITCHING_H, -TEAM_BASERUN_CS,
-TEAM_BATTING_SO)
model1 = train(TARGET_WINS ~ ., data = train_model1, method = 'lm')
summary(model1)
model1$results
train_model3 = train_model1 %>% select(-TEAM_BATTING_HR, -FIELDING_OUTLIER_YN, -TEAM_H_RATIO)
train_model3 = train_model1 %>% select(-TEAM_BATTING_HR, -FIELDING_OUTLIER_YN, -TEAM_H_Ratio)
cor(train_model3)
model3 = train(TARGET_WINS_Ratio ~ ., data = train_model3, method = 'lm')
model3 = train(TARGET_WINS ~ ., data = train_model3, method = 'lm')
summary(model3)
model3$results
setwd("~/Google Drive/CUNY/git/DATA621/HW1")
library(car)
library(stats)
library(dplyr)
library(ggplot2)
train_raw = read.csv("~/Google Drive/CUNY/git/DATA621/HW1/moneyball-training-data.csv")
cor_df = data.frame(cbind(cor(train_raw[3:ncol(train_raw)], train_raw[2]),
cor(train_raw[3:ncol(train_raw)], train_raw[2], use = 'pairwise.complete.obs')))
names(cor_df) = c('With NAs', 'Ignoring NAs')
cor_df %>% tibble::rownames_to_column() %>% arrange(desc(`Ignoring NAs`))
train_clean = train_raw
train_clean = train_clean %>% mutate(TEAM_BATTING_1B = TEAM_BATTING_H - TEAM_BATTING_2B - TEAM_BATTING_3B - TEAM_BATTING_HR) %>%
select(-TEAM_BATTING_H)
train_clean %>% filter(TARGET_WINS == 0)
train_clean = train_clean %>% filter(TARGET_WINS != 0)
train_clean = train_clean %>% mutate(
TEAM_PITCHING_SO = ifelse(is.na(TEAM_PITCHING_SO), median(TEAM_PITCHING_SO, na.rm = TRUE), TEAM_PITCHING_SO),
TEAM_BATTING_SO = ifelse(is.na(TEAM_BATTING_SO), median(TEAM_BATTING_SO, na.rm = TRUE), TEAM_BATTING_SO))
train_clean = train_clean %>% mutate(
TEAM_BASERUN_SB = ifelse(is.na(TEAM_BASERUN_SB), median(TEAM_BASERUN_SB, na.rm = TRUE), TEAM_BASERUN_SB),
TEAM_BASERUN_CS = ifelse(is.na(TEAM_BASERUN_CS), median(TEAM_BASERUN_CS, na.rm = TRUE), TEAM_BASERUN_CS),
TEAM_FIELDING_DP = ifelse(is.na(TEAM_FIELDING_DP), median(TEAM_FIELDING_DP, na.rm = TRUE), TEAM_FIELDING_DP))
train_clean = train_clean %>% mutate(TEAM_BATTING_HBP_YN = ifelse(is.na(TEAM_BATTING_HBP), 0, 1))
summary(train_clean)
plot(density(train_clean$TEAM_PITCHING_H))
train_clean %>% filter(TEAM_PITCHING_H > quantile(TEAM_PITCHING_H, 0.75) + 1.5 * IQR(TEAM_PITCHING_H)) %>%
summarise(n = n())
train_clean = train_clean %>%
mutate('PITCHER_OUTLIER_YN' = ifelse(TEAM_PITCHING_H > quantile(TEAM_PITCHING_H, 0.75) + 1.5 * IQR(TEAM_PITCHING_H) |
TEAM_PITCHING_H < quantile(TEAM_PITCHING_H, 0.25) - 1.5 * IQR(TEAM_PITCHING_H),
1, 0))
train_clean = train_clean %>%
mutate('BATTING_OUTLIER_YN' = ifelse(TEAM_BATTING_1B > quantile(TEAM_BATTING_1B, 0.75) + 1.5 * IQR(TEAM_BATTING_1B) |
TEAM_BATTING_1B < quantile(TEAM_BATTING_1B, 0.25) - 1.5 * IQR(TEAM_BATTING_1B),
1, 0))
train_clean = train_clean %>%
mutate('BATTING_OUTLIER_YN' = ifelse(TEAM_BATTING_1B > quantile(TEAM_BATTING_1B, 0.75) + 1.5 * IQR(TEAM_BATTING_1B) |
TEAM_BATTING_1B < quantile(TEAM_BATTING_1B, 0.25) - 1.5 * IQR(TEAM_BATTING_1B),
1, 0))
train_clean = train_clean %>%
mutate('BASERUN_OUTLIER_YN' = ifelse(TEAM_BASERUN_SB > quantile(TEAM_BASERUN_SB, 0.75) + 1.5 * IQR(TEAM_BASERUN_SB) |
TEAM_BASERUN_SB < quantile(TEAM_BASERUN_SB, 0.25) - 1.5 * IQR(TEAM_BASERUN_SB),
1, 0))
train_clean = train_clean %>%
mutate('FIELDING_OUTLIER_YN' = ifelse(TEAM_FIELDING_E > quantile(TEAM_FIELDING_E, 0.75) + 1.5 * IQR(TEAM_FIELDING_E) |
TEAM_FIELDING_E < quantile(TEAM_FIELDING_E, 0.25) - 1.5 * IQR(TEAM_FIELDING_E),
1, 0))
train_clean = train_clean %>%
mutate(TARGET_WINS_Ratio = TARGET_WINS / 162,
TEAM_H_Ratio = (TEAM_BATTING_1B + TEAM_BATTING_2B + TEAM_BATTING_3B + TEAM_BATTING_HR) / TEAM_PITCHING_H,
TEAM_BASERUN_Ratio = TEAM_BASERUN_SB / TEAM_BASERUN_CS,
TEAM_HR_SO_Ratio = TEAM_BATTING_HR / ifelse(TEAM_BATTING_SO == 0, median(TEAM_BATTING_SO), TEAM_BATTING_SO))
summary(train_clean)
data.frame(cor(train_clean[3:ncol(train_clean)], train_clean[2])) %>%
tibble::rownames_to_column() %>%
arrange(desc(`TARGET_WINS`))
train_clean_ex_outliers = train_clean %>%
filter(PITCHER_OUTLIER_YN == 0, BATTING_OUTLIER_YN == 0, FIELDING_OUTLIER_YN ==0)
par(mfrow=c(4, 4))
boxplot(train_clean_ex_outliers[2], show.names=TRUE)
boxplot(train_clean_ex_outliers[3], show.names=TRUE)
boxplot(train_clean_ex_outliers[4], show.names=TRUE)
boxplot(train_clean_ex_outliers[5], show.names=TRUE)
boxplot(train_clean_ex_outliers[6], show.names=TRUE)
boxplot(train_clean_ex_outliers[7], show.names=TRUE)
boxplot(train_clean_ex_outliers[8], show.names=TRUE)
boxplot(train_clean_ex_outliers[9], show.names=TRUE)
boxplot(train_clean_ex_outliers[10], show.names=TRUE)
boxplot(train_clean_ex_outliers[11], show.names=TRUE)
boxplot(train_clean_ex_outliers[12], show.names=TRUE)
boxplot(train_clean_ex_outliers[13], show.names=TRUE)
boxplot(train_clean_ex_outliers[14], show.names=TRUE)
boxplot(train_clean_ex_outliers[15], show.names=TRUE)
boxplot(train_clean_ex_outliers[16], show.names=TRUE)
boxplot(train_clean_ex_outliers[17], show.names=TRUE)
train_model1 = train_clean
train_model1 = train_model1 %>% select(-INDEX, -TARGET_WINS_Ratio, -TEAM_BATTING_HBP)
model1 = lm(TARGET_WINS ~ ., data = train_model1)
stats::summary.lm(model1)
train_model1 = train_clean
train_model1 = train_model1 %>% select(-INDEX, -TARGET_WINS_Ratio, -TEAM_BATTING_HBP)
model1 = lm(TARGET_WINS ~ ., data = train_model1)
summary.lm(model1)
setwd("~/Google Drive/CUNY/git/DATA621/HW1")
library(caret)
library(car)
library(dplyr)
library(ggplot2)
train_model1 = train_clean
train_model1 = train_model1 %>% select(-INDEX, -TARGET_WINS_Ratio, -TEAM_BATTING_HBP)
model1 = train(TARGET_WINS ~ ., data = train_model1, method = 'lm')
summary(model1)
model1$results
model1$finalModel
stats::summary.lm(model1$finalModel)
outlierTest(model1)
outlierTest(model1$finalModel)
setwd("~/Google Drive/CUNY/git/DATA621/HW1")
library(caret)
library(car)
library(dplyr)
library(ggplot2)
train_raw = read.csv("~/Google Drive/CUNY/git/DATA621/HW1/moneyball-training-data.csv")
summary(train_raw)
par(mfrow=c(4, 4))
boxplot(train_raw[2], show.names=TRUE)
boxplot(train_raw[3], show.names=TRUE)
boxplot(train_raw[4], show.names=TRUE)
boxplot(train_raw[5], show.names=TRUE)
boxplot(train_raw[6], show.names=TRUE)
boxplot(train_raw[7], show.names=TRUE)
boxplot(train_raw[8], show.names=TRUE)
boxplot(train_raw[9], show.names=TRUE)
boxplot(train_raw[10], show.names=TRUE)
boxplot(train_raw[11], show.names=TRUE)
boxplot(train_raw[12], show.names=TRUE)
boxplot(train_raw[13], show.names=TRUE)
boxplot(train_raw[14], show.names=TRUE)
boxplot(train_raw[15], show.names=TRUE)
boxplot(train_raw[16], show.names=TRUE)
boxplot(train_raw[17], show.names=TRUE)
cor_df = data.frame(cbind(cor(train_raw[3:ncol(train_raw)], train_raw[2]),
cor(train_raw[3:ncol(train_raw)], train_raw[2], use = 'pairwise.complete.obs')))
names(cor_df) = c('With NAs', 'Ignoring NAs')
cor_df %>% tibble::rownames_to_column() %>% arrange(desc(`Ignoring NAs`))
train_clean = train_raw
train_clean = train_clean %>% mutate(TEAM_BATTING_1B = TEAM_BATTING_H - TEAM_BATTING_2B - TEAM_BATTING_3B - TEAM_BATTING_HR) %>%
select(-TEAM_BATTING_H)
train_clean %>% filter(TARGET_WINS == 0)
train_clean = train_clean %>% filter(TARGET_WINS != 0)
train_clean = train_clean %>% mutate(
TEAM_PITCHING_SO = ifelse(is.na(TEAM_PITCHING_SO), median(TEAM_PITCHING_SO, na.rm = TRUE), TEAM_PITCHING_SO),
TEAM_BATTING_SO = ifelse(is.na(TEAM_BATTING_SO), median(TEAM_BATTING_SO, na.rm = TRUE), TEAM_BATTING_SO))
train_clean = train_clean %>% mutate(
TEAM_BASERUN_SB = ifelse(is.na(TEAM_BASERUN_SB), median(TEAM_BASERUN_SB, na.rm = TRUE), TEAM_BASERUN_SB),
TEAM_BASERUN_CS = ifelse(is.na(TEAM_BASERUN_CS), median(TEAM_BASERUN_CS, na.rm = TRUE), TEAM_BASERUN_CS),
TEAM_FIELDING_DP = ifelse(is.na(TEAM_FIELDING_DP), median(TEAM_FIELDING_DP, na.rm = TRUE), TEAM_FIELDING_DP))
train_clean = train_clean %>% mutate(TEAM_BATTING_HBP_YN = ifelse(is.na(TEAM_BATTING_HBP), 0, 1))
summary(train_clean)
plot(density(train_clean$TEAM_PITCHING_H))
train_clean %>% filter(TEAM_PITCHING_H > quantile(TEAM_PITCHING_H, 0.75) + 1.5 * IQR(TEAM_PITCHING_H)) %>%
summarise(n = n())
train_clean = train_clean %>%
mutate('PITCHER_OUTLIER_YN' = ifelse(TEAM_PITCHING_H > quantile(TEAM_PITCHING_H, 0.75) + 1.5 * IQR(TEAM_PITCHING_H) |
TEAM_PITCHING_H < quantile(TEAM_PITCHING_H, 0.25) - 1.5 * IQR(TEAM_PITCHING_H),
1, 0))
train_clean = train_clean %>%
mutate('BATTING_OUTLIER_YN' = ifelse(TEAM_BATTING_1B > quantile(TEAM_BATTING_1B, 0.75) + 1.5 * IQR(TEAM_BATTING_1B) |
TEAM_BATTING_1B < quantile(TEAM_BATTING_1B, 0.25) - 1.5 * IQR(TEAM_BATTING_1B),
1, 0))
train_clean = train_clean %>%
mutate('BATTING_OUTLIER_YN' = ifelse(TEAM_BATTING_1B > quantile(TEAM_BATTING_1B, 0.75) + 1.5 * IQR(TEAM_BATTING_1B) |
TEAM_BATTING_1B < quantile(TEAM_BATTING_1B, 0.25) - 1.5 * IQR(TEAM_BATTING_1B),
1, 0))
train_clean = train_clean %>%
mutate('BASERUN_OUTLIER_YN' = ifelse(TEAM_BASERUN_SB > quantile(TEAM_BASERUN_SB, 0.75) + 1.5 * IQR(TEAM_BASERUN_SB) |
TEAM_BASERUN_SB < quantile(TEAM_BASERUN_SB, 0.25) - 1.5 * IQR(TEAM_BASERUN_SB),
1, 0))
train_clean = train_clean %>%
mutate('FIELDING_OUTLIER_YN' = ifelse(TEAM_FIELDING_E > quantile(TEAM_FIELDING_E, 0.75) + 1.5 * IQR(TEAM_FIELDING_E) |
TEAM_FIELDING_E < quantile(TEAM_FIELDING_E, 0.25) - 1.5 * IQR(TEAM_FIELDING_E),
1, 0))
train_clean = train_clean %>%
mutate(TARGET_WINS_Ratio = TARGET_WINS / 162,
TEAM_H_Ratio = (TEAM_BATTING_1B + TEAM_BATTING_2B + TEAM_BATTING_3B + TEAM_BATTING_HR) / TEAM_PITCHING_H,
TEAM_BASERUN_Ratio = TEAM_BASERUN_SB / TEAM_BASERUN_CS,
TEAM_HR_SO_Ratio = TEAM_BATTING_HR / ifelse(TEAM_BATTING_SO == 0, median(TEAM_BATTING_SO), TEAM_BATTING_SO))
summary(train_clean)
data.frame(cor(train_clean[3:ncol(train_clean)], train_clean[2])) %>%
tibble::rownames_to_column() %>%
arrange(desc(`TARGET_WINS`))
train_clean_ex_outliers = train_clean %>%
filter(PITCHER_OUTLIER_YN == 0, BATTING_OUTLIER_YN == 0, FIELDING_OUTLIER_YN ==0)
par(mfrow=c(4, 4))
boxplot(train_clean_ex_outliers[2], show.names=TRUE)
boxplot(train_clean_ex_outliers[3], show.names=TRUE)
boxplot(train_clean_ex_outliers[4], show.names=TRUE)
boxplot(train_clean_ex_outliers[5], show.names=TRUE)
boxplot(train_clean_ex_outliers[6], show.names=TRUE)
boxplot(train_clean_ex_outliers[7], show.names=TRUE)
boxplot(train_clean_ex_outliers[8], show.names=TRUE)
boxplot(train_clean_ex_outliers[9], show.names=TRUE)
boxplot(train_clean_ex_outliers[10], show.names=TRUE)
boxplot(train_clean_ex_outliers[11], show.names=TRUE)
boxplot(train_clean_ex_outliers[12], show.names=TRUE)
boxplot(train_clean_ex_outliers[13], show.names=TRUE)
boxplot(train_clean_ex_outliers[14], show.names=TRUE)
boxplot(train_clean_ex_outliers[15], show.names=TRUE)
boxplot(train_clean_ex_outliers[16], show.names=TRUE)
boxplot(train_clean_ex_outliers[17], show.names=TRUE)
train_model1 = train_clean
train_model1 = train_model1 %>% select(-INDEX, -TARGET_WINS_Ratio, -TEAM_BATTING_HBP)
model1 = train(TARGET_WINS ~ ., data = train_model1, method = 'lm')
summary(model1)
model1$results
train_model1 = train_model1 %>% select(-TEAM_HR_SO_Ratio, -TEAM_BASERUN_Ratio, -BASERUN_OUTLIER_YN, -BATTING_OUTLIER_YN,
-TEAM_PITCHING_SO, -TEAM_PITCHING_BB, -TEAM_PITCHING_H, -TEAM_BASERUN_CS,
-TEAM_BATTING_SO)
model1 = train(TARGET_WINS ~ ., data = train_model1, method = 'lm')
summary(model1)
model1$results
train_model2 = train_clean
train_model2 = train_model2 %>% select(TARGET_WINS_Ratio, TEAM_H_Ratio, TEAM_BASERUN_Ratio, TEAM_HR_SO_Ratio, TEAM_PITCHING_HR, PITCHER_OUTLIER_YN)
model2 = train(TARGET_WINS_Ratio ~ ., data = train_model2, method = 'lm')
summary(model2)
model2$results
cor(train_model1)
vif(model1$finalModel)
# confirm with VIF
train_model3 = train_model1 %>% select(-TEAM_BATTING_HR, -FIELDING_OUTLIER_YN, -TEAM_H_Ratio)
model3 = train(TARGET_WINS ~ ., data = train_model3, method = 'lm')
summary(model3)
model3$results
vif(model3$finalModel)
summary(model3)
outlierTest(model3$finalModel)
leveragePlots(model3$finalModel)
fit = model3$finalModel
leveragePlots(fit)
qqplot(fit)
qqPlot(fit)
qqPlot(fit)
qqPlot(fit)
ncvTest(fit)
spreadLevelPlot(fit)
spreadLevelPlot(fit)
spreadLevelPlot(fit)
durbinWatsonTest(fit)
plot(fit$residuals)
summary(model3)
test_raw = read.csv("~/Google Drive/CUNY/git/DATA621/HW1/moneyball-evaluation-data.csv")
test_clean = test_raw
test_clean = test_clean %>% mutate(TEAM_BATTING_1B = TEAM_BATTING_H - TEAM_BATTING_2B - TEAM_BATTING_3B - TEAM_BATTING_HR) %>%
select(-TEAM_BATTING_H)
test_raw = read.csv("~/Google Drive/CUNY/git/DATA621/HW1/moneyball-evaluation-data.csv")
test_clean = test_raw
# create TEAM_BATTING_1B column
test_clean = test_clean %>% mutate(TEAM_BATTING_1B = TEAM_BATTING_H - TEAM_BATTING_2B - TEAM_BATTING_3B - TEAM_BATTING_HR) %>%
select(-TEAM_BATTING_H)
# fill in missing values
test_clean = test_clean %>% mutate(
TEAM_PITCHING_SO = ifelse(is.na(TEAM_PITCHING_SO), median(TEAM_PITCHING_SO, na.rm = TRUE), TEAM_PITCHING_SO),
TEAM_BATTING_SO = ifelse(is.na(TEAM_BATTING_SO), median(TEAM_BATTING_SO, na.rm = TRUE), TEAM_BATTING_SO)),
test_raw = read.csv("~/Google Drive/CUNY/git/DATA621/HW1/moneyball-evaluation-data.csv")
test_clean = test_raw
# create TEAM_BATTING_1B column
test_clean = test_clean %>% mutate(TEAM_BATTING_1B = TEAM_BATTING_H - TEAM_BATTING_2B - TEAM_BATTING_3B - TEAM_BATTING_HR) %>%
select(-TEAM_BATTING_H)
# fill in missing values
test_clean = test_clean %>% mutate(
TEAM_PITCHING_SO = ifelse(is.na(TEAM_PITCHING_SO), median(TEAM_PITCHING_SO, na.rm = TRUE), TEAM_PITCHING_SO),
TEAM_BATTING_SO = ifelse(is.na(TEAM_BATTING_SO), median(TEAM_BATTING_SO, na.rm = TRUE), TEAM_BATTING_SO),
TEAM_BASERUN_SB = ifelse(is.na(TEAM_BASERUN_SB), median(TEAM_BASERUN_SB, na.rm = TRUE), TEAM_BASERUN_SB),
TEAM_BASERUN_CS = ifelse(is.na(TEAM_BASERUN_CS), median(TEAM_BASERUN_CS, na.rm = TRUE), TEAM_BASERUN_CS),
TEAM_FIELDING_DP = ifelse(is.na(TEAM_FIELDING_DP), median(TEAM_FIELDING_DP, na.rm = TRUE), TEAM_FIELDING_DP))
# add TEAM_BATTING_HBP_YN
test_clean = test_clean %>% mutate(TEAM_BATTING_HBP_YN = ifelse(is.na(TEAM_BATTING_HBP), 0, 1))
# add outlier flags
test_clean = test_clean %>%
mutate('PITCHER_OUTLIER_YN' = ifelse(TEAM_PITCHING_H > quantile(TEAM_PITCHING_H, 0.75) + 1.5 * IQR(TEAM_PITCHING_H) |
TEAM_PITCHING_H < quantile(TEAM_PITCHING_H, 0.25) - 1.5 * IQR(TEAM_PITCHING_H),
1, 0))
test_clean = test_clean %>%
mutate('BATTING_OUTLIER_YN' = ifelse(TEAM_BATTING_1B > quantile(TEAM_BATTING_1B, 0.75) + 1.5 * IQR(TEAM_BATTING_1B) |
TEAM_BATTING_1B < quantile(TEAM_BATTING_1B, 0.25) - 1.5 * IQR(TEAM_BATTING_1B),
1, 0))
test_clean = test_clean %>%
mutate('BATTING_OUTLIER_YN' = ifelse(TEAM_BATTING_1B > quantile(TEAM_BATTING_1B, 0.75) + 1.5 * IQR(TEAM_BATTING_1B) |
TEAM_BATTING_1B < quantile(TEAM_BATTING_1B, 0.25) - 1.5 * IQR(TEAM_BATTING_1B),
1, 0))
test_clean = test_clean %>%
mutate('BASERUN_OUTLIER_YN' = ifelse(TEAM_BASERUN_SB > quantile(TEAM_BASERUN_SB, 0.75) + 1.5 * IQR(TEAM_BASERUN_SB) |
TEAM_BASERUN_SB < quantile(TEAM_BASERUN_SB, 0.25) - 1.5 * IQR(TEAM_BASERUN_SB),
1, 0))
test_clean = test_clean %>%
mutate('FIELDING_OUTLIER_YN' = ifelse(TEAM_FIELDING_E > quantile(TEAM_FIELDING_E, 0.75) + 1.5 * IQR(TEAM_FIELDING_E) |
TEAM_FIELDING_E < quantile(TEAM_FIELDING_E, 0.25) - 1.5 * IQR(TEAM_FIELDING_E),
1, 0))
pred = predict(model3, newdata = test_clean)
pred
write.csv(pred, "~/Google Drive/CUNY/git/DATA621/HW1/moneyball-evaluation-pred.csv")
boxplot(pred)
