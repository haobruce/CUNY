library(jsonlite)
setwd("~/Google Drive/CUNY/git/DATA607/Week11")
username = 'root'
password = 'password'
dbname = 'flights'
host = '127.0.0.1'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
qryString = 'select * from flights'
selectQry = dbSendQuery(myDb, qryString)
results = fetch(selectQry, n = -1)
results
library(dbConnect)
library(jsonlite)
setwd("~/Google Drive/CUNY/git/DATA607/Week11")
username = 'root'
password = 'password'
dbname = 'flights'
host = '127.0.0.1'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
qryString = 'SELECT * FROM v_flights_detail LIMIT 1'
selectQry = dbSendQuery(myDb, qryString)
selectQry = dbSendQuery(myDb, qryString)
library(dbConnect)
library(jsonlite)
setwd("~/Google Drive/CUNY/git/DATA607/Week11")
username = 'root'
password = 'password'
dbname = 'flights'
host = '127.0.0.1'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
qryString = 'SELECT * FROM v_flights_detail LIMIT 1'
selectQry = dbSendQuery(myDb, qryString)
results = fetch(selectQry, n = -1)
results
flights.json = toJSON(results)
prettify(flights.json)
jsoncars <- toJSON(mtcars, pretty=TRUE)
cat(jsoncars)
data2 <- fromJSON("https://api.github.com/users/hadley/repos")
names(data2)
names(data2$owner)
data2$owner$login
toJSON(data2)
prettify(toJSON(data2))
flights = 'SELECT * FROM flights;'
flightsQry = 'SELECT * FROM flights;'
flightsQry = dbSendQuery(myDb, 'SELECT * FROM flights;')
flights.df = fetch(flightsQry, n = -1)
flights.df
str(flights.df)
originsQry = dbSendQuery(myDb, 'SELECT * FROM airports;')
origins.df = fetch(originsQry, n = -1)
origins.df
str(origins.df)
flights.df1 = flights.df[1,]
flights.df1
merge(flights.df1, origins.df, by.x = 'origin', by.y = 'faa')
flights.df1$origin.detail = origins.df[origins.df$faa == flights.df1$origin,]
flights.df1
str(flights.df1)
toJSON(flights.df1)
prettify(toJSON(flights.df1))
flights1 = flights[1, ]
flights.df1 = flights.df[1, ]
airportsQry = dbSendQuery(myDb, 'SELECT * FROM airports;')
airports.df = fetch(airportsQry, n = -1)
airports.df
flights.df1$origin.detail = airports.df[airports.df$faa == flights.df1$origin,]
flights.df1
prettify(toJSON(flights.df1))
library(dbConnect)
library(jsonlite)
library(mongolite)
setwd("~/Google Drive/CUNY/git/DATA607/Project4")
username = 'root'
password = 'password'
dbname = 'flights'
host = '127.0.0.1'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
library(dbConnect)
library(jsonlite)
library(mongolite)
setwd("~/Google Drive/CUNY/git/DATA607/Project4")
username = 'root'
password = 'password'
dbname = 'flights'
host = '127.0.0.1'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
flightsQry = dbSendQuery(myDb, 'SELECT * FROM flights WHERE origin = "EWR" LIMIT 100;')
flights = fetch(flightsQry, n = -1)
airportsQry = dbSendQuery(myDb, 'SELECT * FROM airports;')
airports = fetch(airportsQry, n = -1)
airlinesQry = dbSendQuery(myDb, 'SELECT * FROM airlines;')
airlines = fetch(airlinesQry, n = -1)
planesQry = dbSendQuery(myDb, 'SELECT * FROM planes;')
planes = fetch(planesQry, n = -1)
weatherQry = dbSendQuery(myDb, 'SELECT * FROM weather;')
weather = fetch(weatherQry, n = -1)
for (i in 1:nrow(flights)) {
flights$origin_detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest_detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline_detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane_detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
# check if weather row is NA
weather_row = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
if (!is.na(weather_row[1])) {
flights$weather_detail[[i]] = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
}
}
# check JSON validity
prettify(toJSON(flights[1:3,]))
m = mongo(collection = 'flights')
m$insert(flights)
# check record counts
m$count()
# perform query and retrieve data
m$find( '{ "carrier": "UA" }' )
m$find( ' { "plane_detail.manufacturer" : "BOEING" } ' )
# list distinct values
m$distinct("plane_detail.manufacturer")
# remove the collection
m$drop()
library(recommenderlab)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(gridExtra)
setwd("~/Google Drive/CUNY/git/DATA607/Project4Final")
setwd("~/Google Drive/CUNY/git/DATA607/ProjectFinal")
path_name = "~/Google Drive/CUNY/git/DATA607/Project4Final"
path_name = "~/Google Drive/CUNY/git/DATA607/ProjectFinal"
ratings = read.csv(paste0(path_name, '/ml-latest-small/ratings.csv'), stringsAsFactors = FALSE)
ratings %>% ggplot(aes(x = rating)) +
geom_histogram(bins = 10) +
ggtitle('Histogram of Movie Ratings')
p1 = ratings %>% group_by(userId) %>%
summarise(avgRating = mean(rating), nRatings = n()) %>%
ggplot(aes(x = avgRating)) +
geom_histogram() +
xlab('User Average Rating')
p2 = ratings %>% group_by(userId) %>%
summarise(avgRating = mean(rating), nRatings = n()) %>%
ggplot(aes(x = nRatings)) +
geom_histogram() +
xlab('Number of Rated Movies') +
ylab('Users')
p3 = ratings %>% group_by(movieId) %>%
summarise(avgRating = mean(rating), nRatings = n()) %>%
ggplot(aes(x = avgRating)) +
geom_histogram() +
xlab('Movie Average Rating')
p4 = ratings %>% group_by(movieId) %>%
summarise(avgRating = mean(rating), nRatings = n()) %>%
ggplot(aes(x = nRatings)) +
geom_histogram() +
xlab('Number of Ratings per Movie') +
ylab('Movies')
grid.arrange(p1, p3, p2, p4, ncol = 2)
# transforming numeric IDs into strings so that sparseMatrix function does not fill in missing
# ID numbers and thus preserving correct dimensions
i = paste0('u', ratings$userId)
j = paste0('m', ratings$movieId)
x = ratings$rating
df = data.frame(i, j, x, stringsAsFactors = T)
# interesting that as.integer works on character vector
sparse_matrix = sparseMatrix(as.integer(df$i), as.integer(df$j), x = df$x)
colnames(sparse_matrix) = levels(df$j)
rownames(sparse_matrix) = levels(df$i)
# create recommenderLab real rating object
real_ratings = new('realRatingMatrix', data = sparse_matrix)
# create Recommender object
model = Recommender(real_ratings, method = 'POPULAR', param = list(normalize = 'center'))
# create prediction object
pred = predict(model, real_ratings[1:5], type = 'ratings')
as(pred, 'matrix')[, 1:5]
# evaluate accuracy using RMSE
e = evaluationScheme(real_ratings, method = 'split', train = 0.8, given = -5)
model = Recommender(getData(e, 'train'), method = 'POPULAR', param = list(normalize = 'center'))
pred = predict(model, getData(e, 'known'), type = 'ratings')
rmse_popular = calcPredictionAccuracy(pred, getData(e, 'unknown'))
rmse_popular
?Recommender
# transforming numeric IDs into strings so that sparseMatrix function does not fill in missing
# ID numbers and thus preserving correct dimensions
i = paste0('u', ratings$userId)
j = paste0('m', ratings$movieId)
x = ratings$rating
df = data.frame(i, j, x, stringsAsFactors = T)
# interesting that as.integer works on character vector
sparse_matrix = sparseMatrix(as.integer(df$i), as.integer(df$j), x = df$x)
colnames(sparse_matrix) = levels(df$j)
rownames(sparse_matrix) = levels(df$i)
# create recommenderLab real rating object
real_ratings = new('realRatingMatrix', data = sparse_matrix)
# create Recommender object for popular model
model_popular = Recommender(real_ratings, method = 'POPULAR', param = list(normalize = 'center'))
# create prediction object
pred_popular = predict(model_popular, real_ratings[1:5], type = 'ratings')
as(pred_popular, 'matrix')[, 1:5]
# evaluate accuracy of popular model
e = evaluationScheme(real_ratings, method = 'split', train = 0.8, given = -5)
mode_popular = Recommender(getData(e, 'train'), method = 'POPULAR', param = list(normalize = 'center'))
pred_popular = predict(model_popular, getData(e, 'known'), type = 'ratings')
rmse_popular = calcPredictionAccuracy(pred, getData(e, 'unknown'))
rmse_popular
model_ubcf = Recommender(real_ratings, method = 'UBCF', param = list(normalize = 'center'))
library(recommenderlab)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(gridExtra)
setwd("~/Google Drive/CUNY/git/DATA607/ProjectFinal")
path_name = "~/Google Drive/CUNY/git/DATA607/ProjectFinal"
ratings = read.csv(paste0(path_name, '/ml-latest-small/ratings.csv'), stringsAsFactors = FALSE)
ratings %>% ggplot(aes(x = rating)) +
geom_histogram(bins = 10) +
ggtitle('Histogram of Movie Ratings')
p1 = ratings %>% group_by(userId) %>%
summarise(avgRating = mean(rating), nRatings = n()) %>%
ggplot(aes(x = avgRating)) +
geom_histogram() +
xlab('User Average Rating')
p2 = ratings %>% group_by(userId) %>%
summarise(avgRating = mean(rating), nRatings = n()) %>%
ggplot(aes(x = nRatings)) +
geom_histogram() +
xlab('Number of Rated Movies') +
ylab('Users')
p3 = ratings %>% group_by(movieId) %>%
summarise(avgRating = mean(rating), nRatings = n()) %>%
ggplot(aes(x = avgRating)) +
geom_histogram() +
xlab('Movie Average Rating')
p4 = ratings %>% group_by(movieId) %>%
summarise(avgRating = mean(rating), nRatings = n()) %>%
ggplot(aes(x = nRatings)) +
geom_histogram() +
xlab('Number of Ratings per Movie') +
ylab('Movies')
grid.arrange(p1, p3, p2, p4, ncol = 2)
# transforming numeric IDs into strings so that sparseMatrix function does not fill in missing
# ID numbers and thus preserving correct dimensions
i = paste0('u', ratings$userId)
j = paste0('m', ratings$movieId)
x = ratings$rating
df = data.frame(i, j, x, stringsAsFactors = T)
# interesting that as.integer works on character vector
sparse_matrix = sparseMatrix(as.integer(df$i), as.integer(df$j), x = df$x)
colnames(sparse_matrix) = levels(df$j)
rownames(sparse_matrix) = levels(df$i)
# create recommenderLab real rating object
real_ratings = new('realRatingMatrix', data = sparse_matrix)
# create Recommender object for popular model
model_popular = Recommender(real_ratings, method = 'POPULAR', param = list(normalize = 'center'))
# create prediction object
pred_popular = predict(model_popular, real_ratings[1:5], type = 'ratings')
as(pred_popular, 'matrix')[, 1:5]
# evaluate accuracy of popular model
e_popular = evaluationScheme(real_ratings, method = 'split', train = 0.8, given = -5)
mode_popular = Recommender(getData(e_popular, 'train'), method = 'POPULAR', param = list(normalize = 'center'))
pred_popular = predict(model_popular, getData(e_popular, 'known'), type = 'ratings')
rmse_popular = calcPredictionAccuracy(pred_popular, getData(e_popular, 'unknown'))
rmse_popular
# create Recommender object for ubcf model
model_ubcf = Recommender(real_ratings, method = 'UBCF', param = list(normalize = 'center'))
# create prediction object
pred_ubcf = predict(model_ubcf, real_ratings[1:5], type = 'ratings')
as(pred_ubcf, 'matrix')[, 1:5]
# evaluate accuracy of ubcf model
e_ubcf = evaluationScheme(real_ratings, method = 'split', train = 0.8, given = -5)
mode_ubcf = Recommender(getData(e_ubcf, 'train'), method = 'ubcf', param = list(normalize = 'center'))
pred_ubcf = predict(model_ubcf, getData(e_ubcf, 'known'), type = 'ratings')
rmse_ubcf = calcPredictionAccuracy(pred_ubcf, getData(e_ubcf, 'unknown'))
rmse_ubcf
# create Recommender object for svd model
model_svd = Recommender(real_ratings, method = 'SVD', param = list(normalize = 'center'))
# create prediction object
pred_svd = predict(model_svd, real_ratings[1:5], type = 'ratings')
as(pred_svd, 'matrix')[, 1:5]
# evaluate accuracy of svd model
e_svd = evaluationScheme(real_ratings, method = 'split', train = 0.8, given = -5)
mode_svd = Recommender(getData(e_svd, 'train'), method = 'svd', param = list(normalize = 'center'))
pred_svd = predict(model_svd, getData(e_svd, 'known'), type = 'ratings')
rmse_svd = calcPredictionAccuracy(pred_svd, getData(e_svd, 'unknown'))
rmse_svd
dim(ratings)
dim(df)
dim(sparse_matrix)
dim(real_ratings)
?predict
as(pred_popular, 'matrix')[, 1:5]
getData(e_popular, 'known')
135 * 9066
getData(e_popular, 'known')[1:10, 1:10]
test = getData(e_popular, 'known')[1:10, 1:10]
test@data
pred_popular@data
u = pred_popular@data[1,]
u
t(u)
t(u)[1:10]
head(t(u))
str(t(u))
str(u)
u = t(u)
u[1:10]
u[1:10,]
type(u)
typeof(u)
?double
?attr
attr(u)
attr(u, 'm1')
attr(u, m1)
attr(u, 'm10')
str(u)
str(u, [NULL, 'm1'])
attr(u, [NULL, 'm1'])
attr(u, (, 'm1'))
t = u[1]
t
str(t)
t = u[1,]
t
str(t)
attr(t, 'm1')
attr(t, 'm10')
?which
str(u)
attr(t, 'names')
which(t, attr(t, 'names') == 'm1')
t[attr(t, 'names') == 'm1']
t[attr(t, 'names') == 'm10']
t[attr(t, 'names') == 'm100']
t[is.na(attr(t, 'names'))]
head(t)
df = data.frame(movieID = attr(t, 'names'), rating = t)
str(df)
head(df)
df2 = t
df2 = data.frame(t)
head(df2)
df = data.frame(rating = t)
head(df)
df['m1',]
df['m10',]
rownames(head(df))
customSelections = data.frame(title)
customSelections = data.frame(title = NULL)
customSelections
str(customSelections)
shiny::runApp('~/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('~/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('~/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('~/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('~/Google Drive/CUNY/git/DATA607/ProjectFinal')
tmp_df = data.frame(title = 'abc', rating = 1)
tmp_df
df
customSelections
rbind(tmp_df, customSelections)
?renderDataTable
runApp('~/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('~/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('~/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('~/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('~/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('~/Google Drive/CUNY/git/DATA607/ProjectFinal')
shiny::runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
custom_ratings_df = data.frame(title = c('The Secret Life of Pets (2016)', 'Kung Fu Panda 3 (2016)', 'Zootopia (2016)', 'Inside Out (2015)',
'Minions (2015)', 'The Good Dinosaur (2015)', 'Hotel Transylvania 2 (2015)', 'The Lego Movie (2014)',
'Mr. Peabody & Sherman (2014)', 'How to Train Your Dragon 2 (2014)', 'Big Hero 6 (2014)',
'Song of the Sea (2014)', 'Paperman (2012)', 'Grand Budapest Hotel, The (2014)',
"King's Speech, The (2010)", 'How to Train Your Dragon (2010)', 'Avengers, The (2012)',
'The Imitation Game (2014)'),
rating = c(3.5, 3.5, 5.0, 4.0, 3.0, 1.0, 5.0, 1.0, 1.0, 4.5, 5.0, 5.0, 5.0, 5.0, 5.0, 4.5, 1.0, 4.0))
length(rating)
rating = c(3.5, 3.5, 5.0, 4.0, 3.0, 1.0, 5.0, 1.0, 1.0, 4.5, 5.0, 5.0, 5.0, 5.0, 5.0, 4.5, 1.0, 4.0)
length(rating)
library(recommenderlab)
library(dplyr)
library(stringr)
library(ggplot2)
library(ggthemes)
library(gridExtra)
setwd("~/Google Drive/CUNY/git/DATA607/ProjectFinal")
library(recommenderlab)
library(dplyr)
library(stringr)
library(ggplot2)
library(ggthemes)
library(gridExtra)
#setwd("~/Google Drive/CUNY/git/DATA607/ProjectFinal")
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal")
#path_name = "/Google Drive/CUNY/git/DATA607/ProjectFinal"
path_name = "C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal"
ratings = read.csv(paste0(path_name, '/ml-latest-small/ratings.csv'), stringsAsFactors = FALSE)
movies = read.csv(paste0(path_name, '/ml-latest-small/movies.csv'), stringsAsFactors = FALSE)
# create year column
movies = movies %>% mutate(year = as.integer(str_extract(title, "([[:digit:]]{4})")))
# limit to more recent movies
ratings = ratings %>%
left_join(movies, by = 'movieId') %>%
filter(year >= 2010) %>%
select(userId, movieId, rating, timestamp)
# transforming numeric IDs into strings so that sparseMatrix function does not fill in missing
# ID numbers and thus preserving correct dimensions
i = paste0('u', ratings$userId)
j = paste0('m', ratings$movieId)
x = ratings$rating
df = data.frame(i, j, x, stringsAsFactors = T)
# interesting that as.integer works on character vector
sparse_matrix = sparseMatrix(as.integer(df$i), as.integer(df$j), x = df$x)
colnames(sparse_matrix) = levels(df$j)
rownames(sparse_matrix) = levels(df$i)
# create recommenderLab real rating object
real_ratings = new('realRatingMatrix', data = sparse_matrix)
# create Recommender object for popular model
model_popular = Recommender(real_ratings, method = 'POPULAR', param = list(normalize = 'center'))
# create prediction object
pred_popular = predict(model_popular, real_ratings[1:5], type = 'ratings')
as(pred_popular, 'matrix')[, 1:5]
# evaluate accuracy of popular model
e_popular = evaluationScheme(real_ratings, method = 'split', train = 0.8, given = -5)
# create Recommender object for ubcf model
model_ubcf = Recommender(real_ratings, method = 'UBCF', param = list(normalize = 'center'))
# create prediction object
pred_ubcf = predict(model_ubcf, real_ratings[1:5], type = 'ratings')
as(pred_ubcf, 'matrix')[, 1:5]
# evaluate accuracy of ubcf model
e_ubcf = evaluationScheme(real_ratings, method = 'split', train = 0.8, given = -5)
# find movies based on genre and year
movies %>% filter(str_detect(genres, "Animation") & year == 2014)
# create custom user ratings
custom_ratings_df = data.frame(title = c('The Secret Life of Pets (2016)', 'Kung Fu Panda 3 (2016)', 'Zootopia (2016)', 'Inside Out (2015)',
'Minions (2015)', 'The Good Dinosaur (2015)', 'Hotel Transylvania 2 (2015)', 'The Lego Movie (2014)',
'Mr. Peabody & Sherman (2014)', 'How to Train Your Dragon 2 (2014)', 'Big Hero 6 (2014)',
'Song of the Sea (2014)', 'Paperman (2012)', 'Grand Budapest Hotel, The (2014)',
"King's Speech, The (2010)", 'How to Train Your Dragon (2010)', 'Avengers, The (2012)',
'The Imitation Game (2014)'),
#                            rating = c(3.5, 3.5, 5.0, 4.0, 3.0, 1.0, 5.0, 1.0, 1.0, 4.5, 5.0, 5.0, 5.0, 5.0, 5.0, 4.5, #1.0, 4.0))
rating = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
# add movieId
custom_ratings = custom_ratings_df %>% left_join(movies, by = 'title') %>%
mutate(i = 'uCustom', j = paste0('m', movieId), x = rating) %>% select(i, j, x)
custom_ratings
custom_df = rbind(df, custom_ratings)
custom_sparse_matrix = sparseMatrix(as.integer(custom_df$i), as.integer(custom_df$j), x = custom_df$x)
colnames(custom_sparse_matrix) = levels(custom_df$j)
rownames(custom_sparse_matrix) = levels(custom_df$i)
# check custom user ratings
check = data.frame(custom_sparse_matrix[custom_sparse_matrix@Dimnames[[1]] == 'uCustom',])
check$movieId = rownames(check)
colnames(check)[1] = 'rating'
check[check$rating != 0,]
# create real rating object
custom_real_ratings = new('realRatingMatrix', data = custom_sparse_matrix)
# make prediction using ubcf model
custom_ubcf = predict(model_ubcf, n = 20, custom_real_ratings)
custom_ubcf = as(custom_ubcf, 'list')$uCustom
custom_ubcf = data.frame(rank = 1:10, movieId = as.integer(str_replace(custom_ubcf, 'm', '')))
custom_ubcf %>% left_join(movies, by = 'movieId')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
?selectInput
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
shiny::runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
runApp('C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal')
library(shiny)
library(recommenderlab)
library(dplyr)
library(stringr)
library(ggplot2)
library(ggthemes)
library(gridExtra)
setwd("~/Google Drive/CUNY/git/DATA607/ProjectFinal")
ratings_path = file.path('ml-latest-small', 'ratings.csv')
movies_path = file.path('ml-latest-small', 'movies.csv')
ratings = read.csv(ratings_path, stringsAsFactors = FALSE)
movies = read.csv(movies_path, stringsAsFactors = FALSE)
runApp()
rsconnect::deployApp('~/Google Drive/CUNY/git/DATA607/ProjectFinal')
rsconnect::deployApp('~/Google Drive/CUNY/git/DATA607/ProjectFinal')
