df
head(df)
i = 6
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre_rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
player
state
points
i = 7
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre_rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
player
state
points
df = rbind(df, c(player, state, points, pre_rating, 0.0))
str(df)
df = data.frame('Player Name' = character(),
'Player State'= character(),
'Total Points' = numeric(),
'Pre-Rating' = integer(),
'Opponent Avg Pre-Rating' = integer(),
stringsAsFactors = F)
str(df)
df = rbind(df, c(player, state, points, pre_rating, 0.0))
df
str(df)
setwd("~/Google Drive/CUNY/git/DATA607/Project1")
library(RCurl)
library(stringr)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess = read.csv(text=url, stringsAsFactors = F)
# initialize empty data frame
df = data.frame('Player Name' = character(),
'Player State'= character(),
'Total Points' = numeric(),
'Pre-Rating' = integer(),
'Opponent Avg Pre-Rating' = integer(),
stringsAsFactors = F)
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre_rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
df = rbind(df, list(player, state, points, pre_rating, 0.0))
}
}
head(df)
tail(df)
i=7
str(df)
# initialize empty data frame
df = data.frame('Player Name' = character(),
'Player State'= character(),
'Total Points' = numeric(),
'Pre-Rating' = integer(),
'Opponent Avg Pre-Rating' = integer(),
stringsAsFactors = F)
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre_rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
df = rbind.data.frame(df, list(player, state, points, pre_rating, 0.0))
}
}
head(df)
str(df)
# initialize empty data frame
df = data.frame('Player Name' = character(),
'Player State'= character(),
'Total Points' = numeric(),
'Pre-Rating' = integer(),
'Opponent Avg Pre-Rating' = integer(),
stringsAsFactors = F)
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre_rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
df = rbind.data.frame(df, list(str(player), str(state), points, pre_rating, 0.0))
}
}
head(df)
df = data.frame('Player Name' = character(),
'Player State'= character(),
'Total Points' = numeric(),
'Pre-Rating' = integer(),
'Opponent Avg Pre-Rating' = integer(),
stringsAsFactors = F)
str(df)
?rbind
# initialize empty data frame
df = data.frame('Player Name' = character(),
'Player State'= character(),
'Total Points' = numeric(),
'Pre-Rating' = integer(),
'Opponent Avg Pre-Rating' = integer(),
stringsAsFactors = F)
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre_rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
df = rbind(df, list(player, state, points, pre_rating, 0.0), stringsAsFactors=F)
}
}
head(df)
tail(df)
?setNames
rev(df)
names(df)
# initialize empty data frame
df = data.frame('Player Name' = character(),
'Player State'= character(),
'Total Points' = numeric(),
'Pre-Rating' = integer(),
'Opponent Avg Pre-Rating' = integer(),
stringsAsFactors = F)
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre_rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
df = rbind(df, setNames(df, names(df)),
list(player, state, points, pre_rating, 0.0), stringsAsFactors=F)
}
}
abc
head(df)
# initialize empty data frame
df = data.frame('Player Name' = character(),
'Player State'= character(),
'Total Points' = numeric(),
'Pre-Rating' = integer(),
'Opponent Avg Pre-Rating' = integer(),
stringsAsFactors = F)
for (i in 1:10)) {  #nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre_rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
df = rbind(df, setNames(df, names(df)),
list(player, state, points, pre_rating, 0.0), stringsAsFactors=F)
}
}
# initialize empty data frame
df = data.frame('Player Name' = character(),
'Player State'= character(),
'Total Points' = numeric(),
'Pre-Rating' = integer(),
'Opponent Avg Pre-Rating' = integer(),
stringsAsFactors = F)
for (i in 1:10) {  #nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre_rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
df = rbind(df, setNames(df, names(df)),
list(player, state, points, pre_rating, 0.0), stringsAsFactors=F)
}
}
df
# initialize empty data frame
df = data.frame('PlayerName' = character(),
'PlayerState'= character(),
'TotalPoints' = numeric(),
'PreRating' = integer(),
'OpponentAvgPreRating' = integer(),
stringsAsFactors = F)
for (i in 1:10) {  #nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre_rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
df = rbind(df, list('PlayerName' = player, 'PlayerState' = state, 'TotalPoints' = points,
'PreRating' = pre_rating, 'OpponentAvgPreRating' = 0.0), stringsAsFactors=F)
}
}
head(df)
tail(df)
# initialize empty data frame
df = data.frame('PlayerName' = character(),
'PlayerState'= character(),
'TotalPoints' = numeric(),
'PreRating' = integer(),
'OpponentAvgPreRating' = integer(),
stringsAsFactors = F)
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre_rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
df = rbind(df, list('PlayerName' = player, 'PlayerState' = state, 'TotalPoints' = points,
'PreRating' = pre_rating, 'OpponentAvgPreRating' = 0.0), stringsAsFactors=F)
}
}
head(df)
tail(df)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess = read.csv(text=url, stringsAsFactors = F)
# initialize empty data frame
df = data.frame('PairNum' = integer(), 'PlayerName' = character(), 'PlayerState'= character(),
'TotalPoints' = numeric(), 'PreRating' = integer(), 'OpponentAvgPreRating' = integer(),
stringsAsFactors = F)
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
pairNum = as.numeric(str_sub(chess[i+1,], 4, 5))  # retrieve pair number
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
preRating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
df = rbind(df, list('PlayerName' = player, 'PlayerState' = state, 'TotalPoints' = points,
'PreRating' = preRating, 'OpponentAvgPreRating' = 0.0), stringsAsFactors=F)
}
}
head(df)
df[1]
df[1,]
df[1,5]
df[1,'PreRating']
# initialize empty data frame
df = data.frame('PlayerName' = character(), 'PlayerState'= character(),
'TotalPoints' = numeric(), 'PreRating' = integer(), 'OpponentAvgPreRating' = integer(),
stringsAsFactors = F)
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
preRating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
df = rbind(df, list('PlayerName' = player, 'PlayerState' = state, 'TotalPoints' = points,
'PreRating' = preRating, 'OpponentAvgPreRating' = 0.0), stringsAsFactors=F)
}
}
df[1,'PreRating']
df[1,5]
df[1,]
# initialize empty data frame
df = data.frame('PlayerName' = character(), 'PlayerState'= character(), 'TotalPoints' = numeric(), 'PreRating' = integer(), 'OpponentAvgPreRating' = integer(),
stringsAsFactors = F)
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
preRating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
df = rbind(df, list('PlayerName' = player, 'PlayerState' = state, 'TotalPoints' = points, 'PreRating' = preRating, 'OpponentAvgPreRating' = 0.0), stringsAsFactors=F)
}
}
# initialize empty data frame
df = data.frame('PlayerName' = character(), 'PlayerState'= character(), 'TotalPoints' = numeric(), 'PreRating' = integer(), 'OpponentAvgPreRating' = integer(), 'Opp1' = integer(), 'Opp2' = integer(), 'Opp3' = integer(), 'Opp4' = integer(), 'Opp5' = integer(), 'Opp6' = integer(), 'Opp7' = integer(), stringsAsFactors = F)
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
preRating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
opp1 = as.numeric(str_sub(chess[i,], 51, 52))
opp2 = as.numeric(str_sub(chess[i,], 57, 58))
opp3 = as.numeric(str_sub(chess[i,], 63, 64))
opp4 = as.numeric(str_sub(chess[i,], 69, 70))
opp5 = as.numeric(str_sub(chess[i,], 75, 76))
opp6 = as.numeric(str_sub(chess[i,], 81, 82))
opp7 = as.numeric(str_sub(chess[i,], 87, 88))
# append data to data frame
df = rbind(df, list('PlayerName' = player, 'PlayerState' = state, 'TotalPoints' = points, 'PreRating' = preRating, 'OpponentAvgPreRating' = 0.0, 'Opp1' = opp1, 'Opp2' = opp2, 'Opp3' = opp3, 'Opp4' = opp4, 'Opp5' = opp5, 'Opp6' = opp6, 'Opp7' = opp7), stringsAsFactors=F)
}
}
head(df)
df[12,]
df[16,]
nrow(df)
colName = 'Opp3'
df[1, collName]
df[1, colName]
df[1]
df[1,]
df[1, colName]
r = 1
for (c in 1:7) {
colName = paste('Opp', c, sep = '')  # create dynamic reference to column name
oppRow = df[r, colName]
oppRatings = c(oppRatings, df[oppRow, 'PreRating'])  # append opponent rating to vector
}
oppRatings = NULL  # initialize empty vector
for (c in 1:7) {
colName = paste('Opp', c, sep = '')  # create dynamic reference to column name
oppRow = df[r, colName]
oppRatings = c(oppRatings, df[oppRow, 'PreRating'])  # append opponent rating to vector
}
oppRatings
df[1, ]
df[39, 4]
df[21, 4]
oppRatings
mean(oppRatings)
mean(oppRatings, rm.na=T)
for (r in 1:nrow(df)) {
oppRatings = NULL  # initialize empty vector
for (c in 1:7) {
colName = paste('Opp', c, sep = '')  # create dynamic reference to column name
oppRow = df[r, colName]
oppRatings = c(oppRatings, df[oppRow, 'PreRating'])  # append opponent rating to vector
df['OpponentAvgPreRating'] = mean(oppRatings, rm.na=T)  # calculate avg rating and ignore NAs
}
}
head(df)
r = 1
oppRatings = NULL  # initialize empty vector
for (c in 1:7) {
colName = paste('Opp', c, sep = '')  # create dynamic reference to column name
oppRow = df[r, colName]
oppRatings = c(oppRatings, df[oppRow, 'PreRating'])  # append opponent rating to vector
df['OpponentAvgPreRating'] = mean(oppRatings, rm.na=T)  # calculate avg rating and ignore NAs
}
df[1, ]
oppRatings = NULL  # initialize empty vector
for (c in 1:7) {
colName = paste('Opp', c, sep = '')  # create dynamic reference to column name
oppRow = df[r, colName]
oppRatings = c(oppRatings, df[oppRow, 'PreRating'])  # append opponent rating to vector
df['OpponentAvgPreRating'] = round(mean(oppRatings, rm.na=T), 0)  # calculate avg rating and ignore NAs
}
df
df[1, ]
# initialize empty data frame
df = data.frame('PlayerName' = character(), 'PlayerState'= character(), 'TotalPoints' = numeric(),
'PreRating' = integer(), 'OpponentAvgPreRating' = integer(), 'Opp1' = integer(),
'Opp2' = integer(), 'Opp3' = integer(), 'Opp4' = integer(), 'Opp5' = integer(),
'Opp6' = integer(), 'Opp7' = integer(), stringsAsFactors = F)
# loop through chess txt file and add relevant data to data frame
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
preRating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
opp1 = as.numeric(str_sub(chess[i,], 51, 52))  # retrieve opponent numbers to calculate avg later
opp2 = as.numeric(str_sub(chess[i,], 57, 58))
opp3 = as.numeric(str_sub(chess[i,], 63, 64))
opp4 = as.numeric(str_sub(chess[i,], 69, 70))
opp5 = as.numeric(str_sub(chess[i,], 75, 76))
opp6 = as.numeric(str_sub(chess[i,], 81, 82))
opp7 = as.numeric(str_sub(chess[i,], 87, 88))
# append data to data frame
df = rbind(df, list('PlayerName' = player, 'PlayerState' = state, 'TotalPoints' = points,
'PreRating' = preRating, 'OpponentAvgPreRating' = 0.0, 'Opp1' = opp1,
'Opp2' = opp2, 'Opp3' = opp3, 'Opp4' = opp4, 'Opp5' = opp5, 'Opp6' = opp6,
'Opp7' = opp7), stringsAsFactors=F)
}
}
# loop through data frame to add average opponent ratings
for (r in 1:nrow(df)) {
oppRatings = NULL  # initialize empty vector
for (c in 1:7) {
colName = paste('Opp', c, sep = '')  # create dynamic reference to column name
oppRow = df[r, colName]
oppRatings = c(oppRatings, df[oppRow, 'PreRating'])  # append opponent rating to vector
}
df['OpponentAvgPreRating'] = round(mean(oppRatings, rm.na=T), 0)  # calculate avg rating and ignore NAs
}
df[1, ]
r = 1
# initialize empty data frame
df = data.frame('PlayerName' = character(), 'PlayerState'= character(), 'TotalPoints' = numeric(),
'PreRating' = integer(), 'OpponentAvgPreRating' = integer(), 'Opp1' = integer(),
'Opp2' = integer(), 'Opp3' = integer(), 'Opp4' = integer(), 'Opp5' = integer(),
'Opp6' = integer(), 'Opp7' = integer(), stringsAsFactors = F)
# loop through chess txt file and add relevant data to data frame
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
preRating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
opp1 = as.numeric(str_sub(chess[i,], 51, 52))  # retrieve opponent numbers to calculate avg later
opp2 = as.numeric(str_sub(chess[i,], 57, 58))
opp3 = as.numeric(str_sub(chess[i,], 63, 64))
opp4 = as.numeric(str_sub(chess[i,], 69, 70))
opp5 = as.numeric(str_sub(chess[i,], 75, 76))
opp6 = as.numeric(str_sub(chess[i,], 81, 82))
opp7 = as.numeric(str_sub(chess[i,], 87, 88))
# append data to data frame
df = rbind(df, list('PlayerName' = player, 'PlayerState' = state, 'TotalPoints' = points,
'PreRating' = preRating, 'OpponentAvgPreRating' = 0.0, 'Opp1' = opp1,
'Opp2' = opp2, 'Opp3' = opp3, 'Opp4' = opp4, 'Opp5' = opp5, 'Opp6' = opp6,
'Opp7' = opp7), stringsAsFactors=F)
}
}
oppRatings = NULL  # initialize empty vector
for (c in 1:7) {
colName = paste('Opp', c, sep = '')  # create dynamic reference to column name
oppRow = df[r, colName]
oppRatings = c(oppRatings, df[oppRow, 'PreRating'])  # append opponent rating to vector
}
oppRatings
round(mean(oppRatings, rm.na=T), 0)
r = 2
oppRatings = NULL  # initialize empty vector
for (c in 1:7) {
colName = paste('Opp', c, sep = '')  # create dynamic reference to column name
oppRow = df[r, colName]
oppRatings = c(oppRatings, df[oppRow, 'PreRating'])  # append opponent rating to vector
}
oppRatings
round(mean(oppRatings, rm.na=T), 0)
nrow(df)
# initialize empty data frame
df = data.frame('PlayerName' = character(), 'PlayerState'= character(), 'TotalPoints' = numeric(),
'PreRating' = integer(), 'OpponentAvgPreRating' = integer(), 'Opp1' = integer(),
'Opp2' = integer(), 'Opp3' = integer(), 'Opp4' = integer(), 'Opp5' = integer(),
'Opp6' = integer(), 'Opp7' = integer(), stringsAsFactors = F)
# loop through chess txt file and add relevant data to data frame
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
preRating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
opp1 = as.numeric(str_sub(chess[i,], 51, 52))  # retrieve opponent numbers to calculate avg later
opp2 = as.numeric(str_sub(chess[i,], 57, 58))
opp3 = as.numeric(str_sub(chess[i,], 63, 64))
opp4 = as.numeric(str_sub(chess[i,], 69, 70))
opp5 = as.numeric(str_sub(chess[i,], 75, 76))
opp6 = as.numeric(str_sub(chess[i,], 81, 82))
opp7 = as.numeric(str_sub(chess[i,], 87, 88))
# append data to data frame
df = rbind(df, list('PlayerName' = player, 'PlayerState' = state, 'TotalPoints' = points,
'PreRating' = preRating, 'OpponentAvgPreRating' = 0.0, 'Opp1' = opp1,
'Opp2' = opp2, 'Opp3' = opp3, 'Opp4' = opp4, 'Opp5' = opp5, 'Opp6' = opp6,
'Opp7' = opp7), stringsAsFactors=F)
}
}
# loop through data frame to add average opponent ratings
for (r in 1:nrow(df)) {
oppRatings = NULL  # initialize empty vector
for (c in 1:7) {
colName = paste('Opp', c, sep = '')  # create dynamic reference to column name
oppRow = df[r, colName]
oppRatings = c(oppRatings, df[oppRow, 'PreRating'])  # append opponent rating to vector
}
df[r, 'OpponentAvgPreRating'] = round(mean(oppRatings, rm.na=T), 0)  # calculate avg rating and ignore NAs
}
head(df)
df[16, ]
mean(c(1365, 1220, 1436, 1553, 1355))
mean(c(1365, 1220, 1436, 1553, 1355, NA))
mean(c(1365, 1220, 1436, 1553, 1355, NA), na.rm = T)
# loop through data frame to add average opponent ratings
for (r in 1:nrow(df)) {
oppRatings = NULL  # initialize empty vector
for (c in 1:7) {
colName = paste('Opp', c, sep = '')  # create dynamic reference to column name
oppRow = df[r, colName]
oppRatings = c(oppRatings, df[oppRow, 'PreRating'])  # append opponent rating to vector
}
df[r, 'OpponentAvgPreRating'] = round(mean(oppRatings, na.rm = T), 0)  # calculate avg rating and ignore NAs
}
df[16, ]
View(df)
write.csv(df, '~/Users/brucehao/Google Drive/CUNY/git/DATA607/Project/chess.csv')
write.csv(df, '/Users/brucehao/Google Drive/CUNY/git/DATA607/Project/chess.csv')
write.csv(df, '/Users/brucehao/Google Drive/CUNY/git/DATA607/Project1/chess.csv')
df['PlayerName', 'PlayerState']
df[['PlayerName', 'PlayerState']]
df[, c('PlayerName', 'PlayerState')]
df[, c('PlayerName', 'PlayerState', 'TotalPoints', 'PreRating', 'OpponentAvgPreRating')]
write.csv(df[, c('PlayerName', 'PlayerState', 'TotalPoints', 'PreRating', 'OpponentAvgPreRating')],
'/Users/brucehao/Google Drive/CUNY/git/DATA607/Project1/chess.csv')
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess = read.csv(text=url, stringsAsFactors = F)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess = read.csv(text=url, stringsAsFactors = F)
head(chess)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess = read.csv(text=url, stringsAsFactors = F)
head(chess)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
head(chess)
chess = read.csv(text=url, stringsAsFactors = F)
head(chess)
