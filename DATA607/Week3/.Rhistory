cap_color = hash(keys=c('n','b','c','g','r','p','u','e','w','y'),
values=c('brown','buff','cinnamon','gray','green','pink','purple','red','white','yellow'))
levels(df$classes)[2]
classes('p')
classes['p']
classes['p'][2]
classes['p'][1]
classes['p']
classes[['p']]
classes[[levels(df$classes[1])]]
classes[[levels(df$classes)[1]]]
levels(df$classes)[1] = classes[[levels(df$classes)[1]]]
head(df)
str(df)
levels(df$classes)
levels(df$classes)['p']
for (i in 1:4) {
columnName = colnames(df)[i]
for (level in levels(df[columnName])) {
print(level)
}
#  for (key in as.list(keys(get(columnName)))) {
#    levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
#    df[df[columnName]==key, columnName] = get(columnName)[[key]]
}
}
# loop through whichever columns and rename factors
for (i in 1:4) {
columnName = colnames(df)[i]
for (level in levels(df[columnName])) {
print(level)
}
#  for (key in as.list(keys(get(columnName)))) {
#    levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
#    df[df[columnName]==key, columnName] = get(columnName)[[key]]
#  }
}
for (i in 1:4) {
}
for (i in 1:4) {
columnName = colnames(df)[i]
for (level in levels(df[columnName])) {
print(level)
}
#  for (key in as.list(keys(get(columnName)))) {
#    levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
#    df[df[columnName]==key, columnName] = get(columnName)[[key]]
#  }
}
levels(df$classes)
for (level in levels(df$classes)) {}
for (level in levels(df$classes)) { print(level) }
source('~/Google Drive/R/CUNY/BridgeR_03_Mushrooms.R', echo=TRUE)
source('~/Google Drive/R/CUNY/BridgeR_03_Mushrooms.R', echo=TRUE)
for (level in levels(df$classes)) { print(level) }
for (level in levels(df$classes)) { df_levels=c(df_levels, level) }
df_levels = levels(df$classes)
df_levels
cap_shape(df_levels)
cap_shape[df_levels]
cap_shape[get(df_levels)]
library(RCurl)
install.packages("RCurl")
library(RCurl)
source('~/.active-rstudio-document', echo=TRUE)
View(X)
source('~/.active-rstudio-document', echo=TRUE)
head(x['V1'])
head(x[c('V1', 'V2'])
head(x[c('V1', 'V2')])
x[c('V1', 'V4', 'V15')]
names = c('Age', 'Education', 'Salary')
x.names = names
head(x)
x = x[c('V1', 'V4', 'V15')]
x.names = name
names = c('Age', 'Education', 'Salary')
x.names = name
x.names = names
x
head(x)
names(x) = names
head(x)
subset(x, 'Age')
?subset
subset(x, select='Age')
head(subset(x, select='Age'))
head(subset(x, select=c('Age', 'Education'))
)
head(x)
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/bridges/bridges.data.version2'
x = read.csv(url, header = F, sep = ',')
View(x)
bridge_data = read.csv(url, header = F, sep = ',')
View(bridge_data)
bridge_data = bridge_data[, c(2, 6, 7)]
colnames = c('', 'Lanes', 'Span')
names(bridge_data) = colnames
View(bridge_data)
bridge_data = read.csv(url, header = F, sep = ',', stringsAsFactors = F)
?pnorm
?pnorm
pnorm(2)
pnorm(0)
dnorm(0)
dnorm(2)
dnorm(-2)
dnorm(1)
dnorm(-1)
dnorm(0)
dnorm(3)
pnorm(62, 63.6, 2.5) - pnorm(60, 63.6, 2.5)
out1 = vector("double", ncol(mtcars))
out1
seq_along(mtcars)
for (i in seq_along(mtcars)) {}
for (i in seq_along(mtcars)) {
out1[[i]] = mean(mtcars[ii], na.rm = T)
}
for (i in seq_along(mtcars)) {
out1[[i]] = mean(mtcars[[i]], na.rm = T)
}
out1
install.packages('purrr')
library(purrr)
x = list(1, 'a', 3)
map(x, print)
walk(x, print)
?ppois
ppois(5, 5.5)
choose(6,1)
choose(6,1)*choose(19,7)/choose(25,8)
?pnorm
pnorm(979, 1300, 40000^0.5)
1 - pnorm(8340, 11000, 1960000^0.5)
?pnorm
pnrom(83, 80, 3)
pnorm(83, 80, 3)
pnorm(85, 80, 3) - pnorm(83, 80, 3)
qnorm(0.14, 456, 123)
qnorm(0.86, 456, 123)
qnorm(0.07, 6.13, 0.06)
qnorm(0.93, 6.13, 0.06)
qnorm(0.2, 78.8, 9.8)
qnorm(0.55, 78.8, 9.8)
qnorm(0.55, 21.1, 5.4)
pnrom(48.83, 48, 7/sqrt(147))
pnorm(48.83, 48, 7/sqrt(147))
1-pnorm(48.83, 48, 7/sqrt(147))
1-pnorm(93.54, 91, 10/sqrt(68))
1-pnorm(93.54, 91, 10/sqrt(68-1))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
sqrt(540)
pnorm(0.3, 0.7, 1)
pnorm(0.03, 0, 1)
pnorm(0.03, 1, 1)
pnorm(0.03, 100, 1)
pnorm(0.03, 1, 1)
pnorm(0)
pnorm(-1)
pnorm(-2)
qnorm(0.027)
qnorm(0.0227)
qnorm(0.015)
qnorm(0.4, 3.9, 3.9/sqrt(208))
qnorm(0.2, 3.9, 3.9/sqrt(208))
qnorm(0.1, 3.9, 3.9/sqrt(208))
qnorm(0.9, 3.9, 3.9/sqrt(208))
qnorm(0.1, 3.9, 0.8/sqrt(208))
qnorm(0.9, 3.9, 0.8/sqrt(208))
qnorm(0.01, 16.6, 11/sqrt(7472))
qnorm(0.99, 16.6, 11/sqrt(7472))
se = sqrt(0.23*(1-0.23)/602)
pnorm(0.27, 0.23, se) - pnorm(0.19, 0.23, se)
se = sqrt(0.07*0.93/540)
pnorm(0.1, 0.07, se) - pnorm(0.04, 0.07, se)
se
se = sqrt(0.07*0.93/540)
se
1- (pnorm(0.27, 0.23, se) - pnorm(0.19, 0.23, se))
(pnorm(0.27, 0.23, se) - pnorm(0.19, 0.23, se))
se = sqrt(0.23*(1-0.23)/602)
se
1-[(pnorm(0.27, 0.23, se) - pnorm(0.19, 0.23, se))]
1-([)(pnorm(0.27, 0.23, se) - pnorm(0.19, 0.23, se)))
1-((pnorm(0.27, 0.23, se) - pnorm(0.19, 0.23, se)))
se
source('more/arbuthnot.R')
source('more/arbuthnot.R')
source("more/arbuthnot.R")
library('openintro')
install.packages("devtools")
library(devtools)
install_github("OpenIntroOrg/openintro-r-package", subdir = "openintro")
source("more/arbuthnot.R")
install.packages("HistData")
source("more/arbuthnot.R")
library(HistData)
source("more/arbuthnot.R")
HistData
data("Arbuthnot")
data
arbuthnot = data("Arbuthnot")
arbuthnot
View(arbuthnot)
source("more/arbuthnot.R")
Arbuthnot
data(Arbuthnot)
arbuthnot = data("Arbuthnot")
arbuthnot
arbuthnot = data(Arbuthnot)
arbuthnot
data(Arbuthnot)
library(HistData)
data("Arbuthnot")
data(Arbuthnot)
data
Arbuthnot
arbuthnot = data(Arbuthnot)
arbuthnot
arbuthnot = Arbuthnot
Arbuthnot
library(HistData)
Arbuthnot
View(Arbuthnot)
dim(Arbuthnot)
artbuthnot
Artbuthnot
library(HistData)
Artbuthnot
Arbuthnot
arbuthnot
Arbuthnot
dim(Arbuthnot)
names(Arbuthnot)
head(Arbuthnot)
View(Arbuthnot)
source("http://www.openintro.org/stat/data/arbuthnot.R")
arbuthnot
remove.packages("HistData")
arbuthnot$girls
head(arbuthnot)
View(arbuthnot)
plot(x=arbuthnot$year, y=arbuthnot$girls)
plot(x=arbuthnot$year, y=arbuthnot$girls, type=l)
plot(x=arbuthnot$year, y=arbuthnot$girls, type='l')
plot(x=arbuthnot$year, y=arbuthnot$boys + arbuthnot$girls, type='l')
plot(x=arbuthnot$year, y=arbuthnot$boys / arbuthnot$girls, type='l')
plot(x=arbuthnot$year, y=arbuthnot$boys > arbuthnot$girls, type='l')
y=arbuthnot$boys > arbuthnot$girls
y
source('https://www.openintro.org/stat/data/present.R')
head(present)
plot(x=present$year, y=present$boys > present$girls)
install.packages(c('openintro','OIdata','devtools','ggplot2','psych','reshape2',
'knitr','markdown','shiny'))
devtools::install_github("jbryer/IS606")
install.packages(c('openintro','OIdata','devtools','ggplot2','psych','reshape2',
'knitr','markdown','shiny'))
devtools::install_github("jbryer/IS606")
library('IS606')
library(dbConnect)
install.packages('dbConnect')
library(dbConnect)
myDb = dbConnect(MySQL(), user='root', password='Aspire123', dbname='CUNY', host='127.0.0.1')
myDb = dbConnect(MySQL(), user='root', password='Aspire123', dbname='tb', host='127.0.0.1')
qry <- 'SELECT * FROM tb'
print(qry)
rs = dbSendQuery(myDb, qry)
data = fetch(rs, n=-1)
View(data)
head(data)
str(data)
pop = read.csv('/Users/brucehao/Google Drive/CUNY/2016 Fall/DATA607/Week2/population.csv')
pop
str(pop)
pop = read.csv('/Users/brucehao/Google Drive/CUNY/2016 Fall/DATA607/Week2/population.csv', stringsAsFactors = F)
str(pop)
install.packages('RODBC')
install.packages('RODBC')
library(RODBC)
tb = fetch(rs, n=-1)
tb
# establish database connection and retrieve tb data
myDb = dbConnect(MySQL(), user='root', password='Aspire123', dbname='tb', host='127.0.0.1')
qry <- 'SELECT * FROM tb'
rs = dbSendQuery(myDb, qry)
tb = fetch(rs, n=-1)
str(tb)
View(tb)
View(pop)
View(tb)
?merge.data.frame
dim(pop)
describe(pop)
library(psych)
describe(pop)
describe(tb)
merge.data.frame(tb, pop, by.x = 'country', by.y = 'country', by.x = 'year', by.y = 'year')
merge.data.frame(tb, pop, by=c('country', 'year'))
df = merge.data.frame(tb, pop, by=c('country', 'year'))
View(df)
pop[pop$country='Afghanistan' & pop$year=1995]
pop[pop$country='Afghanistan' & pop$year=1995,]
pop[pop$country=='Afghanistan' & pop$year==1995,]
summary(tb)
str(tb)
2004-1995
unique(tb$country)
length(unique(tb$country))
length(unique(tb$year))
describe(tb)
2013-1995
install.packages('dplyr')
dplyr
library(dplyr)
library(RODBC)
library(RODBC)
getwd()
install.packages('VennDiagram')
library(VennDiagram)
draw.pairwise.venn(area1 = 35, area2 = 23, cross.area = 11,
category = c('% Independent', '% Swing Voter'),
cat.pos = c(3, -1))
table = matrix(c(11,24,35,12,43,65,23,77,100), ncol=3, byrow=T)
colnames(table) = c('Swing', 'Not Swing', 'Total')
rownames(table) = c('Independent', 'Not Independent', 'Total')
table
table = matrix(c(11,24,35,12,53,65,23,77,100), ncol=3, byrow=T)
colnames(table) = c('Swing', 'Not Swing', 'Total')
rownames(table) = c('Independent', 'Not Independent', 'Total')
table
df = as.data.frame(c(1,2,3))
df
max(df)
sample(max(df), 10, replace=T)
df = as.data.frame(c(0, 11, 999))
max(df)
sample(max(df), 10, replace=T)
example.obj = "1. A small sentence. - 2. Another tiny sentence."
install.packages('stringr')
library(stringr)
str_extract_all(example.obj, '([[:alpha:]])')
str_extract_all(example.obj, '([[:alpha:]]).')
str_extract_all(example.obj, '([[:alpha:]]).+?')
str_extract_all(example.obj, '([[:alpha:]]).+?\\1')
str_extract(example.obj, '([[:alpha:]]).+?\\1')
str_extract(example.obj, '([[:alpha:]]).+?\')
str_extract(example.obj, '([[:alpha:]]).+?')
str_extract_all(example.obj, '([[:alpha:]]).+?')
str_extract_all(example.obj, '([[:alpha:]]).+?\\1')
str = '555-1239moe szyslak(636) 555-0113burns, c. montgomery555-6542rev. timothy lovejoy'
library(stringr)
str_extract_all(str, '[[:alpha:]., ]')
str_extract_all(str, '[[:alpha:], ]')
str_extract_all(str, '[[:alpha:]., ]')
str_extract_all(str, '[[:alpha:]., ]'{2,})
str_extract_all(str, '[[:alpha:]., ]{2,}')
str = '555-1239moe szyslak(636) 555-0113burns, c. montgomery555-6542rev. timothy lovejoy'
str_extract_all(str, '\\d')
library(stringr)
str_extract_all(str, '\\d')
str_extract_all(str, '\d')
str_extract_all(str, '\\d')
str_extract_all(str, '\\(d)')
str_extract_all(str, '\\(')
str_extract_all(str, '\\d{3}')
str
str_extract_all(str, '\\(?\\d{3}')
str_extract_all(str, '\\(?\\d{3}\\)?')
str_extract_all(str, '\\(?\\d{3}\\)')
str_extract_all(str, '\\(\\d{3}\\)')
str_extract_all(str, '\\(?\\d{3}\\)?')
str_extract_all(str, '\\(?\\d{3})?')
str_extract_all(str, '\\(?\\d{3})?\\)?')
str_extract_all(str, '\\(?\\(d{3})?\\)?')
str_extract_all(str, '\\(?(\\d{3})?\\)?')
str_extract_all(str, '\\d{3}')
str_extract_all(str, '(\\d{3})?')
str
str_extract_all(str, '\\(?(\\d{3})?\\)?')
str_extract_all(str, '\\(?(\\d{3})?\\)?(-| )?')
str
str_extract_all(str, '\\(?(\\d{3})?\\)?(-| )?\\(?(\\d{3})?\\)?(-| )?')
str_extract_all(str, '\\(?(\\d{3})?\\)?(-| )?')
str_extract_all(str, '\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?')
str_extract_all(str, '\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}?')
str_extract_all(str, '\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}')
str
str_locate_all(str, '\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}')
load("/Users/brucehao/Desktop/episodes-uncleansed.Rdata")
episodes
str = 'clcoCow1zmstc0d87wnkig70vdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr'
str_detect(str)
?str_detect
setwd("~/Google Drive/CUNY/git/DATA607/Week3")
Sys.getlocale()
str
is.ascii(str)
library(taru)
library(tau)
install.packages(tau)
install.packages('tau')
library(tau)
is.ascii(str)
is.locale(str)
is.utf8(str)
raw.data <- "555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5543642Dr. Julius Hibbert"
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name
str_extract_all(name, ',\\>')
name <- str_extract_all(raw.data, "[[:alpha:]., ]{2,}")
name
unlist(name)
typeof(unlist(name))
length(name)
length(unlist(name))
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name
str_extract_all(name, ',\>')
str_extract_all(name, 'Moe')
str_extract_all(name, ',')
name
names <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
str_split(name, ' ')
str_extract(str_split(name, ' '), ',\\>')
str_split(name, ' ')
unlist(str_split(name, ' '))
for (name in names):
print(name)
for (name in names) {
print(name)
}
for (name in names) {
str_extract(name, ',\\>')
}
for (name in names) {
print(str_extract(name, ',\\>'))
}
for (name in names) {
name_split = str_split(name, ', ')
print(name_split)
}
for (name in names) {
name_split = str_split(name, ', ')
print(length(name_split))
}
for (name in names) {
name_split = str_split(name, ', ')
print(length(name_split[[1]]))
}
for (name in names) {
name_split = unlist(str_split(name, ', '))
print(length(name_split))
#print(length(name_split[[1]]))
}
paste('a', 'b')
for (name in names) {
name_split = unlist(str_split(name, ', '))
if (length(name_split) > 1) {
name_split = paste(name_split[2], name_split[1])
}
print(name_split)
}
for (name in names) {
name_split = unlist(str_split(name, ', '))
if (length(name_split) > 1) {
name_split = paste(name_split[2], name_split[1])
}
first_last = c(first_last, name_split)
#print(name_split)
}
first_last = NULL
for (name in names) {
name_split = unlist(str_split(name, ', '))
if (length(name_split) > 1) {
name_split = paste(name_split[2], name_split[1])
}
first_last = c(first_last, name_split)
#print(name_split)
}
first_last
names <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
names
str_split(name, ', ')
str_split(names, ', ')
typeof(str_split(names, ', '))
names_list = str_split(names, ', ')
names_list
length(names_list[[]])
length(names_list[1])
length(names_list[2])
length(names_list[[2]])
apply(names_list, length())
apply(names_list, FUN=length())
?apply
apply(names_list, length)
apply(names_list, FUN=length)
apply(names_list, 1, FUN=length)
names_list
unlist(names_list)
unlist(names_list, recursive = F)
names
str_detect(names, '.\\>')
str_detect(names, '.')
str_detect(names, '[.]')
str_extract_all(names, '[.]')
str_extract_all(names, '[[:alpha:].]{2,}')
str_extract_all(names, '[[:alpha:][.]]{2,}')
str_extract_all(names, '[[:alpha:].]+')
