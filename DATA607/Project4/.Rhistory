weather$hour == flights$hour[i]
, ]
}
prettify(toJSON(flights2))
m$insert(toJSON(flights))
prettify(toJSON(flights))
prettify(toJSON(flights[1:3,]))
flights.json = toJSON(flights)
m = mongo(collection = 'flights')
m$insert(flights.json
)
write(flights.json, '~/desktop/fights.json')
m$insert(flights.json)
flightsQry = dbSendQuery(myDb, 'SELECT * FROM flights WHERE origin = "EWR" LIMIT 1;')
flights = fetch(flightsQry, n = -1)
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
flights$weather[[i]] = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ]
}
prettify(toJSON(flights[1:3,]))
flights.json = toJSON(flights)
m = mongo(collection = 'flights')
m$insert(flights.json)
write(flights.json, '~/desktop/fights.json')
m$insert(flights)
flightsQry = dbSendQuery(myDb, 'SELECT * FROM flights WHERE origin = "EWR" LIMIT 100;')
flights = fetch(flightsQry, n = -1)
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
flights$weather[[i]] = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ]
}
prettify(toJSON(flights[1:3,]))
m = mongo(collection = 'flights')
m$insert(flights)
m$count()
m$drop
m = mongo(collection = 'flights')
m$insert(flights)
m$count()
m$drop
m$drop()
m = mongo(collection = 'flights')
m$insert(flights)
m$count()
m$find( '{ "carrier": "UAL" }' )
m$find( '{ "carrier": "UA" }' )
ua = m$find( '{ "carrier": "UA" }' )
ua
m$find( '{ "carrier": "UA" }' )
unique(flights$origin)
unique(flights$carrier)
m$drop()
install.packages("RMongo")
library(RMongo)
mg = mongoDbConnect('db')
dbShowCollections(mg)
mg = mongoDbConnect('db', 'localhost', 27017)
dbShowCollections(mg)
output = dbInsertDocument(mg, 'flights', flights.json)
flights.json
prettify(flights.json)
dbInsertDocument(mongo, "test_data", '{"foo": "bar"}')
m$find( '{ "carrier": "UA" }' )
m = mongo(collection = 'flights')
m$insert(flights)
m$count()
m$find( '{ "carrier": "UA" }' )
tmp <- tempfile()
m$export(file(tmp))
mydata <- stream_in(file(tmp))
m$distinct( 'carrier' )
flights = fetch(flightsQry, n = -1)
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
#  flights$weather[[i]] = weather[weather$origin == flights$origin[i] &
#                                   weather$year == flights$year[i] &
#                                   weather$month == flights$month[i] &
#                                   weather$day == flights$day[i] &
#                                   weather$hour == flights$hour[i]
#                                   , ]
}
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
#  flights$weather[[i]] = weather[weather$origin == flights$origin[i] &
#                                   weather$year == flights$year[i] &
#                                   weather$month == flights$month[i] &
#                                   weather$day == flights$day[i] &
#                                   weather$hour == flights$hour[i]
, ]
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
, ]
flights = fetch(flightsQry, n = -1)
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
, ]
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
}
flights
flights = fetch(flightsQry, n = -1)
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
}
flights
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
flightsQry = dbSendQuery(myDb, 'SELECT * FROM flights WHERE origin = "EWR" LIMIT 100;')
flights = fetch(flightsQry, n = -1)
flights
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
}
flights
prettify(toJSON(flights[1:3,]))
m = mongo(collection = 'flights')
m$insert(flights)
m$drop()
m = mongo(collection = 'flights')
m$insert(flights)
m$count()
m$find( '{ "carrier": "UA" }' )
flightsQry = dbSendQuery(myDb, 'SELECT * FROM flights WHERE origin = "EWR" LIMIT 100;')
flights = fetch(flightsQry, n = -1)
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
flights$weather[[i]] = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ]
}
prettify(toJSON(flights[1:3,]))
str(weather)
!complete.cases(weather)
weather[!complete.cases(weather),]
View(weather)
unique(weather$origin)
summary(weather)
weather[is.na(weather$month),]
i
weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ]
weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1]
weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
flights$weather[[i]] = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
}
m$drop()
m = mongo(collection = 'flights')
m$insert(flights)
m$count()
m$find( '{ "carrier": "UA" }' )
prettify(toJSON(flights[1:3,]))
i = 1
weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ]
tmp =
weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$hour == flights$hour[i]
weather$day == flights$day[i] &
tmp =
weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ]
tmp
is.na(tmp)
sum(is.na(tmp))
tmp[1]
is.na(tmp[1])
flights = fetch(flightsQry, n = -1)
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
if (!is.na(weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1])) {
flights$weather[[i]] = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
}
}
!is.na(weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1]))
!is.na(weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1])
i
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
weather_row = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
if (!is.na(weather_row[1]) {
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
weather_row = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
if (!is.na(weather_row[1])) {
flights$weather[[i]] = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
}
}
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
weather_row = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
if (!is.na(weather_row[1])) {
flights$weather[[i]] = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
} else flights$weather[[i]] = data.frame()
}
flights = fetch(flightsQry, n = -1)
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
weather_row = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
if (!is.na(weather_row[1])) {
flights$weather[[i]] = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
} #else flights$weather[[i]] = data.frame()
}
flights
flightsQry = dbSendQuery(myDb, 'SELECT * FROM flights WHERE origin = "EWR" LIMIT 100;')
flights = fetch(flightsQry, n = -1)
flights
for (i in 1:nrow(flights)) {
flights$origin.detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest.detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline.detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane.detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
weather_row = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
if (!is.na(weather_row[1])) {
flights$weather[[i]] = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
} #else flights$weather[[i]] = data.frame()
}
flights
prettify(toJSON(flights[1:3,]))
m$drop()
m = mongo(collection = 'flights')
m$insert(flights)
m$find( '{ "carrier": "UA" }' )
m$distinct( ' { "plane.detail" : { "manufacturer" } } ')
m$find( ' { "plane.detail" : { "manufacturer" : "AIRBUS INDUSTRIE" } } ')
m$find( ' { "origin.detail" : { "faa" : "EWR" } } ')
flights = fetch(flightsQry, n = -1)
for (i in 1:nrow(flights)) {
flights$origin_detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest_detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline_detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane_detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
# check if weather row is NA
weather_row = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
if (!is.na(weather_row[1])) {
flights$weather_detail[[i]] = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
}
}
flightsQry = dbSendQuery(myDb, 'SELECT * FROM flights WHERE origin = "EWR" LIMIT 100;')
flights = fetch(flightsQry, n = -1)
for (i in 1:nrow(flights)) {
flights$origin_detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest_detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline_detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane_detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
# check if weather row is NA
weather_row = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
if (!is.na(weather_row[1])) {
flights$weather_detail[[i]] = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
}
}
flights
m$drop()
m = mongo(collection = 'flights')
m$insert(flights)
m$count()
m$find( '{ "carrier": "UA" }' )
m$find( ' { "origin.detail" : { "faa" : "EWR" } } ')
m$find( ' { "origin_detail" : { "faa" : "EWR" } } ')
m$find( ' { "origin_detail.faa" : "EWR" } } ')
m$find( ' { "plane_detail.manufacturer" : "BOEING" } ' )
m$distinct( ' { "plane.detail" : { "manufacturer" } } ')
m$distinct( ' { "plane.detail.manufacturer" } ')
m$distinct( ' { "carrier" } ')
m$distinct("plane.detail.manufacturer")
m$distinct("carrier")
m$distinct("{ plane.detail.manufacturer }")
m$distinct('{ "plane.detail.manufacturer }')
m$distinct('{ "plane_detail.manufacturer }')
m$distinct("plane_detail.manufacturer")
library(dbConnect)
library(jsonlite)
library(mongolite)
setwd("~/Google Drive/CUNY/git/DATA607/Week11")
username = 'root'
password = 'password'
dbname = 'flights'
host = '127.0.0.1'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
flightsQry = dbSendQuery(myDb, 'SELECT * FROM flights WHERE origin = "EWR" LIMIT 100;')
flights = fetch(flightsQry, n = -1)
airportsQry = dbSendQuery(myDb, 'SELECT * FROM airports;')
airports = fetch(airportsQry, n = -1)
airlinesQry = dbSendQuery(myDb, 'SELECT * FROM airlines;')
airlines = fetch(airlinesQry, n = -1)
planesQry = dbSendQuery(myDb, 'SELECT * FROM planes;')
planes = fetch(planesQry, n = -1)
weatherQry = dbSendQuery(myDb, 'SELECT * FROM weather;')
weather = fetch(weatherQry, n = -1)
for (i in 1:nrow(flights)) {
flights$origin_detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest_detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline_detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane_detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
# check if weather row is NA
weather_row = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
if (!is.na(weather_row[1])) {
flights$weather_detail[[i]] = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
}
}
# check JSON validity
prettify(toJSON(flights[1:3,]))
flights
m = mongo(collection = 'flights')
m$insert(flights)
# check record counts
m$count()
# perform query and retrieve data
m$find( '{ "carrier": "UA" }' )
m$find( ' { "plane_detail.manufacturer" : "BOEING" } ' )
# list distinct values
m$distinct("plane_detail.manufacturer")
# remove the collection
m$drop()
m$drop()
m = mongo(collection = 'flights')
m$insert(flights)
# check record counts
m$count()
# perform query and retrieve data
m$find( '{ "carrier": "UA" }' )
m$find( ' { "plane_detail.manufacturer" : "BOEING" } ' )
# list distinct values
m$distinct("plane_detail.manufacturer")
# remove the collection
m$drop()
setwd("~/Google Drive/CUNY/git/DATA607/Project4")
