stringsAsFactors = FALSE)
my_data <- read.csv("https://raw.githubusercontent.com/dhnanjay/607Project3/master/data2.csv",
stringsAsFactors = FALSE)
?all.equal
role_desc <- unique(str_replace(my_data$Job_Title, "\\'", ""))  # BH: removed apostrophes for SQL import
role_id <- seq.int(length(role_desc))
roles <- data.frame(role_id=role_id,role_desc=role_desc)
roles = roles %>% mutate(insertValue = paste0("(", role_id, ", '", role_desc, "')"))
insertValues = paste(unlist(roles$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO roles VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
locations <- unique(my_data[,c("City","State")])
locations <- cbind(loc_id =  seq.int(nrow(locations)), locations)
locations = locations %>% mutate(insertValue = paste0("(", loc_id, ", '", City, "', '", State, "')"))
insertValues = paste(unlist(locations$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO locations VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
key_list <- unlist(str_split(tolower(my_data$keywordtag),","))
key_desc <- unique(key_list[key_list!=""])
key_id <- seq.int(length(key_desc))
keywords <- data.frame(key_id = key_id, key_desc = key_desc)
keywords = keywords %>% mutate(insertValue = paste0("(", key_id, ", '", key_desc, "')"))
insertValues = paste(unlist(keywords$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO keywords VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
key_list <- str_split(tolower(my_data$keywordtag),",")
key_list <- lapply(key_list,unique)
post_id = integer(); key_desc = character()
for (i in 1:length(key_list)){
for (j in 1:length(key_list[[i]])) {
post_id <- append(post_id,i)
key_desc <- append(key_desc,key_list[[i]][[j]])
}
}
post_keys <- data.frame(post_id = post_id,key_desc = key_desc)
post_keys <- filter(post_keys, key_desc != "" & key_desc !=" ")
post_keys <- merge(keywords, post_keys, by = "key_desc")
post_keys <- subset(post_keys, select = c(post_id, key_id))
post_keys = post_keys %>% mutate(insertValue = paste0("(", post_id, ", '", key_id, "')"))
insertValues = paste(unlist(post_keys$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO post_keys VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
jobs <- my_data
names(jobs)[names(jobs)=="Job_Title"] <- "role_desc"
names(jobs)[names(jobs)=="X"] <- "post_id"
jobs <- merge(jobs, roles, by ="role_desc")
jobs <- merge(jobs, locations, by= c("City","State"))
jobs <- subset(jobs, select= c(post_id,role_id,loc_id))
jobs = jobs %>% mutate(insertValue = paste0("(", post_id, ", ", role_id, ", ", loc_id, ")"))
insertValues = paste(unlist(jobs$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO jobs VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
source('C:/Users/bhao/Google Drive/CUNY/TeamProjects/607Project3/mySqlR_1.0.R', echo=TRUE)
str(results)
source('C:/Users/bhao/Google Drive/CUNY/TeamProjects/607Project3/mySqlR_1.0.R', echo=TRUE)
str(results)
unique(results$post_id)
length(unique(results$post_id))
my_data <- read.csv("https://raw.githubusercontent.com/dhnanjay/607Project3/master/data2.csv",
stringsAsFactors = FALSE)
str(my_data)
my_data %>% filter(trimws(keywordtag) != '')
filter(my_data, trimws(keywordtag) != '')
my_data$keywordtag
my_data$Keyword
my_data$keywordtag
filter(my_data, trimws(my_data$keywordtag) != '')
length(filter(my_data, trimws(my_data$keywordtag) != ''))
nrow(filter(my_data, trimws(my_data$keywordtag) != ''))
head(my_data, 20)
my_data[trimws(my_data$keywordtag) == '',]
nrow(my_data[trimws(my_data$keywordtag) == '',])
library(stringr)
library(dplyr)
library(dbConnect)
username = 'data607'
password = 'project3'
dbname = 'ds_skills'
host = 'data607-project3.ce2dfe0qxt5q.us-west-2.rds.amazonaws.com'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
my_data <- read.csv("https://raw.githubusercontent.com/dhnanjay/607Project3/master/data2.csv",
stringsAsFactors = FALSE)
key_list <- str_split(tolower(my_data$keywordtag),",")
key_list <- lapply(key_list,unique)
post_id = integer(); key_desc = character()
key_list
length(key_list)
post_id
for (i in 1:length(key_list)){
for (j in 1:length(key_list[[i]])) {
post_id <- append(post_id,i)
key_desc <- append(key_desc,key_list[[i]][[j]])
}
}
post_id
length(unique(post_id))
post_keys <- data.frame(post_id = post_id,key_desc = key_desc)
post_keys <- filter(post_keys, key_desc != "" & key_desc !=" ")
head(post_keys)
length(unique(post_keys$post_id))
post_keys <- merge(keywords, post_keys, by = "key_desc")
role_desc <- unique(str_replace(my_data$Job_Title, "\\'", ""))  # BH: removed apostrophes for SQL import
role_id <- seq.int(length(role_desc))
roles <- data.frame(role_id=role_id,role_desc=role_desc)
roles = roles %>% mutate(insertValue = paste0("(", role_id, ", '", role_desc, "')"))
locations <- unique(my_data[,c("City","State")])
locations <- cbind(loc_id =  seq.int(nrow(locations)), locations)
locations = locations %>% mutate(insertValue = paste0("(", loc_id, ", '", City, "', '", State, "')"))
key_list <- unlist(str_split(tolower(my_data$keywordtag),","))
key_desc <- unique(key_list[key_list!=""])
key_id <- seq.int(length(key_desc))
keywords <- data.frame(key_id = key_id, key_desc = key_desc)
keywords = keywords %>% mutate(insertValue = paste0("(", key_id, ", '", key_desc, "')"))
post_keys <- merge(keywords, post_keys, by = "key_desc")
length(unique(post_keys$post_id))
post_keys = post_keys %>% mutate(insertValue = paste0("(", post_id, ", '", key_id, "')"))
length(unique(post_keys$post_id))
results
length(unique(results$post_id))
length(unique(post_keys$post_id))
key_list <- str_split(tolower(my_data$keywordtag),",")
key_list <- lapply(key_list,unique)
post_id = integer(); key_desc = character()
for (i in 1:length(key_list)){
for (j in 1:length(key_list[[i]])) {
post_id <- append(post_id,i)
key_desc <- append(key_desc,key_list[[i]][[j]])
}
}
post_keys <- data.frame(post_id = post_id,key_desc = key_desc)
post_keys <- filter(post_keys, key_desc != "" & key_desc !=" ")
post_keys <- merge(keywords, post_keys, by = "key_desc")
post_keys <- subset(post_keys, select = c(post_id, key_id))
post_keys = post_keys %>% mutate(insertValue = paste0("(", post_id, ", '", key_id, "')"))
head(post_keys)
jobs <- my_data
head(jobs)
names(jobs)[names(jobs)=="Job_Title"] <- "role_desc"
names(jobs)[names(jobs)=="X"] <- "post_id"
names(jobs)[names(jobs)=="Job_Title"] <- "role_desc"
head(jobs)
jobs <- merge(jobs, roles, by ="role_desc")
head(jobs)
key_list <- str_split(tolower(my_data$keywordtag),",")
head(key_list)
library(stringr)
library(dplyr)
library(dbConnect)
username = 'data607'
password = 'project3'
dbname = 'ds_skills'
host = 'data607-project3.ce2dfe0qxt5q.us-west-2.rds.amazonaws.com'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
my_data <- read.csv("https://raw.githubusercontent.com/dhnanjay/607Project3/master/data2.csv",
stringsAsFactors = FALSE)
post_id = unique(my_data$X)
post_id
my_data$keywordtag[1]
my_data[1,]
str(my_data)
my_data[1, c('X', 'keywordtag')]
my_data[4, c('X', 'keywordtag')]
post_id = 6
str_split(tolower(my_data[my_data$X == post_id, 'keywordtag']),",")
my_data[4, c('X', 'keywordtag')]
key_list <- str_split(tolower(my_data[my_data$X == post_id[i], 'keywordtag']),",")
i = 4
key_list <- str_split(tolower(my_data[my_data$X == post_id[i], 'keywordtag']),",")
key_list <- lapply(key_list, unique)
key_list
head(key_list)
str_split(tolower(my_data[my_data$X == post_id[i], 'keywordtag']),",")
my_data[my_data$X == post_id[i], 'keywordtag'])
my_data[my_data$X == post_id[i], 'keywordtag'])
my_data[my_data$X == post_id[i], 'keywordtag']
post_id = unique(my_data$X)
post_id
my_data[my_data$X == post_id[i], 'keywordtag']
key_list <- lapply(key_list, unique)
key_list
key_list <- str_split(tolower(my_data[my_data$X == post_id[i], 'keywordtag']),",")
key_list <- lapply(key_list, unique)
key_list
key_list[1]
key_list[[1]]
length(key_list[[1]])
key_desc <- append(key_desc, key_list[[1]][[j]]
)
key_desc = character()
key_desc <- append(key_desc, key_list[[1]][[j]])
for (j in 1:length(key_list[[1]])) {
key_desc <- append(key_desc, key_list[[1]][[j]])
}
key_desc
library(stringr)
library(dplyr)
library(dbConnect)
username = 'data607'
password = 'project3'
dbname = 'ds_skills'
host = 'data607-project3.ce2dfe0qxt5q.us-west-2.rds.amazonaws.com'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
my_data <- read.csv("https://raw.githubusercontent.com/dhnanjay/607Project3/master/data2.csv",
stringsAsFactors = FALSE)
post_ids = unique(my_data$X)
key_desc = character()
i = 4
key_list <- str_split(tolower(my_data[my_data$X == post_ids[i], 'keywordtag']),",")
key_list <- lapply(key_list, unique)
key_list
for (j in 1:length(key_list[[1]])) {
key_desc <- append(key_desc, key_list[[1]][[j]])
}
key_desc
for (j in 1:length(key_list[[1]])) {
post_id = rep(post_ids[i], length(key_list[[1]]))
key_desc <- append(key_desc, key_list[[1]][[j]])
}
post_id
length(post_id)
post_id = integer(); key_desc = character()
for (j in 1:length(key_list[[1]])) {
post_id = append(post_id, rep(post_ids[i], length(key_list[[1]])))
key_desc <- append(key_desc, key_list[[1]][[j]])
}
post_id
post_id = integer(); key_desc = character()
for (j in 1:length(key_list[[1]])) {
post_id = append(post_id, post_ids[i])
key_desc <- append(key_desc, key_list[[1]][[j]])
}
post_id
post_ids = unique(my_data$X)
post_id = integer(); key_desc = character()
for (i in 1:length(post_id)) {
key_list <- str_split(tolower(my_data[my_data$X == post_ids[i], 'keywordtag']),",")
key_list <- lapply(key_list, unique)
for (j in 1:length(key_list[[1]])) {
post_id = append(post_id, post_ids[i])
key_desc <- append(key_desc, key_list[[1]][[j]])
}
}
post_keys <- data.frame(post_id = post_id,key_desc = key_desc)
post_keys <- filter(post_keys, key_desc != "" & key_desc !=" ")
post_keys <- merge(keywords, post_keys, by = "key_desc")
post_keys <- subset(post_keys, select = c(post_id, key_id))
post_keys = post_keys %>% mutate(insertValue = paste0("(", post_id, ", '", key_id, "')"))
# roles df
role_desc <- unique(str_replace(my_data$Job_Title, "\\'", ""))  # BH: removed apostrophes for SQL import
role_id <- seq.int(length(role_desc))
roles <- data.frame(role_id=role_id,role_desc=role_desc)
roles = roles %>% mutate(insertValue = paste0("(", role_id, ", '", role_desc, "')"))
# location df
locations <- unique(my_data[,c("City","State")])
locations <- cbind(loc_id =  seq.int(nrow(locations)), locations)
locations = locations %>% mutate(insertValue = paste0("(", loc_id, ", '", City, "', '", State, "')"))
# keywords df
key_list <- unlist(str_split(tolower(my_data$keywordtag),","))
key_desc <- unique(key_list[key_list!=""])
key_id <- seq.int(length(key_desc))
keywords <- data.frame(key_id = key_id, key_desc = key_desc)
keywords = keywords %>% mutate(insertValue = paste0("(", key_id, ", '", key_desc, "')"))
post_ids = unique(my_data$X)
post_id = integer(); key_desc = character()
for (i in 1:length(post_id)) {
key_list <- str_split(tolower(my_data[my_data$X == post_ids[i], 'keywordtag']),",")
key_list <- lapply(key_list, unique)
for (j in 1:length(key_list[[1]])) {
post_id = append(post_id, post_ids[i])
key_desc <- append(key_desc, key_list[[1]][[j]])
}
}
post_keys <- data.frame(post_id = post_id,key_desc = key_desc)
post_keys <- filter(post_keys, key_desc != "" & key_desc !=" ")
post_keys <- merge(keywords, post_keys, by = "key_desc")
post_keys <- subset(post_keys, select = c(post_id, key_id))
post_keys = post_keys %>% mutate(insertValue = paste0("(", post_id, ", '", key_id, "')"))
head(post_keys)
head(post_keys, 3-)
head(post_keys, 30)
post_keys[20:30,]
jobs <- my_data
names(jobs)[names(jobs)=="Job_Title"] <- "role_desc"
jobs$post_id <-seq.int(nrow(jobs))
jobs <- merge(jobs, roles, by ="role_desc")
jobs <- merge(jobs, locations, by= c("City","State"))
jobs <- subset(jobs, select= c(post_id,role_id,loc_id))
jobs = jobs %>% mutate(insertValue = paste0("(", post_id, ", ", role_id, ", ", loc_id, ")"))
head(jobs)
# roles df
role_desc <- unique(str_replace(my_data$Job_Title, "\\'", ""))  # BH: removed apostrophes for SQL import
role_id <- seq.int(length(role_desc))
roles <- data.frame(role_id=role_id,role_desc=role_desc)
roles = roles %>% mutate(insertValue = paste0("(", role_id, ", '", role_desc, "')"))
insertValues = paste(unlist(roles$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO roles VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
locations <- unique(my_data[,c("City","State")])
locations <- cbind(loc_id =  seq.int(nrow(locations)), locations)
locations = locations %>% mutate(insertValue = paste0("(", loc_id, ", '", City, "', '", State, "')"))
insertValues = paste(unlist(locations$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO locations VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
key_list <- unlist(str_split(tolower(my_data$keywordtag),","))
key_desc <- unique(key_list[key_list!=""])
key_id <- seq.int(length(key_desc))
keywords <- data.frame(key_id = key_id, key_desc = key_desc)
keywords = keywords %>% mutate(insertValue = paste0("(", key_id, ", '", key_desc, "')"))
insertValues = paste(unlist(keywords$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO keywords VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
key_list <- str_split(tolower(my_data$keywordtag),",")
key_list <- lapply(key_list,unique)
post_id = integer(); key_desc = character()
for (i in 1:length(key_list)){
for (j in 1:length(key_list[[i]])) {
post_id <- append(post_id,i)
key_desc <- append(key_desc,key_list[[i]][[j]])
}
}
post_keys <- data.frame(post_id = post_id,key_desc = key_desc)
post_keys <- filter(post_keys, key_desc != "" & key_desc !=" ")
post_keys <- merge(keywords, post_keys, by = "key_desc")
post_keys <- subset(post_keys, select = c(post_id, key_id))
post_keys = post_keys %>% mutate(insertValue = paste0("(", post_id, ", '", key_id, "')"))
insertValues = paste(unlist(post_keys$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO post_keys VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
jobs <- my_data
names(jobs)[names(jobs)=="Job_Title"] <- "role_desc"
jobs$post_id <-seq.int(nrow(jobs))
jobs <- merge(jobs, roles, by ="role_desc")
jobs <- merge(jobs, locations, by= c("City","State"))
jobs <- subset(jobs, select= c(post_id,role_id,loc_id))
jobs = jobs %>% mutate(insertValue = paste0("(", post_id, ", ", role_id, ", ", loc_id, ")"))
insertValues = paste(unlist(jobs$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO jobs VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
library(RCurl)
url = "https://api.nytimes.com/svc/search/v2/articlesearch.json"
api_key = '368fbac19ccc4179ae2db761a426699d'
library(jsonlite)
nyt = fromJSON(url)
head(nyt)
str(nyt)
api_key
api_key = paste0('&api-key=', api_key)
api_key
req = fromJSON(paste0(url, api_key))
article_key <- "&api-key=b75da00e12d54774a2d362adddcc9bef"
url <- "http://api.nytimes.com/svc/search/v2/articlesearch.json?q=obamacare+socialism"
req <- fromJSON(paste0(url, article_key))
str(req)
url
url = "https://api.nytimes.com/svc/search/v2/articlesearch.json"
req = fromJSON(paste0(url, api_key))
req = fromJSON(paste0(url, '?', api_key))
head(req)
head(req$response)
head(req$response$docs)
url <- "http://api.nytimes.com/svc/search/v2/articlesearch.json?q=obamacare+socialism&fq=trump"
req <- fromJSON(paste0(url, article_key))
head(req$response$docs)
head(req$response$docs, 1)
str(req$response$docs)
str(head(req$response$docs,1))
str(head(req$response$docs, 1))
str(head(req$response, 1))
str(head(req, 1))
str(head(req$status, 1))
str(head(req$copyright, 1))
str(head(req$response, 1))
str(head(req$response$meta, 1))
str(head(req$response$meta$hits, 1))
str(head(req$response$meta$time, 1))
str(head(req$response$docs, 1))
str(head(req$response))
str(head(req$response, 2))
url
api_key
req
docs = req$response$docs
fromJSON(docs)
req
req = fromJSON(paste0(url, '?', api_key))
req[[1]]
req[[2]]
req$response$docs
req
article_key <- "&api-key=b75da00e12d54774a2d362adddcc9bef"
url <- "http://api.nytimes.com/svc/search/v2/articlesearch.json?q=obamacare+socialism"
req <- fromJSON(paste0(url, article_key))
fromJSON(req$response$docs)
req
req[1]
str(head(req,1))
str(head(req$response$docs,1))
df = req$response$docs
write.csv(df, '/Users/bhao/Desktop/df.csv')
View(df)
write.csv2(df, '/Users/bhao/Desktop/df.csv')
install.packages('boilerpipeR')
library(boilerpipeR)
library(jsonlite)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
api_key = 'api-key=368fbac19ccc4179ae2db761a426699d'
base_url = 'https://api.nytimes.com/svc/books/v3/lists/'
resp_format = '.json'
fict = 'combined-print-and-e-book-fiction'
nonfict = 'combined-print-and-e-book-nonfiction'
fict_url = paste0(base_url, fict, resp_format, '?', api_key)
fict_res = fromJSON(fict_url)
fict_df = fict_res$results$books
fict_df$category = 'fiction'
df = fict_df$buy_links
head(df.kernel())
head(df)
nrow(df)
length(df)
str(df)
flatten(df)
str(df)
df = data.frame(df)
head(df)
flatten(df)
head(df)
str(df)
df %>% gather('name', 'url')
head(df %>% gather('name', 'url'), 1)
head(df %>% gather('name', 'url'), 3)
head(df %>% gather('name', 'url'), 5)
head(df %>% gather('name', 'url', -1:2), 5)
head(df %>% gather('name', 'url', -1), 5)
?gather
head(df %>% gather('name', 'url', -(1:2)), 5)
head(df %>% gather('name', 'url', -(1:2)), 1)
head(df %>% gather('name', 'url'), 1)
head(df, 1)
setwd("~/Google Drive/CUNY/git/DATA607/Week9")
library(jsonlite)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
api_key = 'api-key=368fbac19ccc4179ae2db761a426699d'
base_url = 'https://api.nytimes.com/svc/books/v3/lists/'
resp_format = '.json'
fict = 'combined-print-and-e-book-fiction'
nonfict = 'combined-print-and-e-book-nonfiction'
fict_url = paste0(base_url, fict, resp_format, '?', api_key)
fict_res = fromJSON(fict_url)
fict_df = fict_res$results$books
fict_df$category = 'fiction'
nonfict_url = paste0(base_url, nonfict, resp_format, '?', api_key)
nonfict_res = fromJSON(nonfict_url)
nonfict_df = nonfict_res$results$books
nonfict_df$category = 'nonfiction'
nytbestsellers = bind_rows(fict_df, nonfict_df)
nytbestsellers$vendor_link = paste0('[Amazon](', nytbestsellers$amazon_product_url, ')')
nytbestsellers$cover = paste0("<img src=", nytbestsellers$book_image, " width='50px'/>")
nytbestsellers %>% mutate(rankChange = ifelse(rank_last_week == 0, 21, rank_last_week) - rank) %>%
group_by(category) %>%
summarise(avgAbsRankChange = mean(abs(rankChange)))
knitr::kable(nytbestsellers[1:5, c('category', 'rank', 'title', 'description', 'author', 'vendor_link', 'cover')], row.names = FALSE, caption = 'New York Times Best Sellers - Top 5 in Fiction')
knitr::kable(nytbestsellers[21:25, c('category', 'rank', 'title', 'description', 'author', 'vendor_link', 'cover')], row.names = FALSE, caption = 'New York Times Best Sellers - Top 5 in Non-Fiction')
nytbestsellers %>% ggplot(aes(x = weeks_on_list, col = category, fill = category)) +
geom_histogram(alpha = 0.5, binwidth = 1, position = 'identity') +
facet_grid(category ~ .) +
scale_fill_economist() + scale_color_economist() +
ggtitle('Number of Weeks on NYT Best Sellers List Histogram')
library(jsonlite)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
api_key = 'api-key=368fbac19ccc4179ae2db761a426699d'
base_url = 'https://api.nytimes.com/svc/books/v3/lists/'
resp_format = '.json'
fict = 'combined-print-and-e-book-fiction'
nonfict = 'combined-print-and-e-book-nonfiction'
fict_url = paste0(base_url, fict, resp_format, '?', api_key)
fict_res = fromJSON(fict_url)
fict_df = fict_res$results$books
fict_df$category = 'fiction'
nonfict_url = paste0(base_url, nonfict, resp_format, '?', api_key)
nonfict_res = fromJSON(nonfict_url)
nonfict_df = nonfict_res$results$books
nonfict_df$category = 'nonfiction'
nytbestsellers = bind_rows(fict_df, nonfict_df)
nytbestsellers$vendor_link = paste0('[Amazon](', nytbestsellers$amazon_product_url, ')')
nytbestsellers$cover = paste0("<img src=", nytbestsellers$book_image, " width='50px'/>")
knitr::kable(nytbestsellers[1:5, c('category', 'rank', 'title', 'description', 'author', 'vendor_link', 'cover')], row.names = FALSE, caption = 'New York Times Best Sellers - Top 5 in Fiction')
knitr::kable(nytbestsellers[21:25, c('category', 'rank', 'title', 'description', 'author', 'vendor_link', 'cover')], row.names = FALSE, caption = 'New York Times Best Sellers - Top 5 in Non-Fiction')
nytbestsellers %>% ggplot(aes(x = weeks_on_list, col = category, fill = category)) +
geom_histogram(alpha = 0.5, binwidth = 1, position = 'identity') +
facet_grid(category ~ .) +
scale_fill_economist() + scale_color_economist() +
ggtitle('Number of Weeks on NYT Best Sellers List Histogram')
nytbestsellers %>% mutate(newAddition = ifelse(rank_last_week == 0, 'New Addition', 'Not New Addition')) %>%
group_by(category, newAddition) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n)) %>%
ggplot(aes(x = category, y = freq, fill = newAddition)) +
geom_bar(stat = 'identity') +
scale_fill_economist() + scale_color_economist() +
ggtitle('Proportion of New Additions to NYT Best Sellers List')
nytbestsellers %>% mutate(rankChange = ifelse(rank_last_week == 0, 21, rank_last_week) - rank) %>%
group_by(category) %>%
summarise(avgAbsRankChange = mean(abs(rankChange)))
