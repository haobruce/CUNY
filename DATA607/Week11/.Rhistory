ggplot(aes(x = performance@x.values[1], y = performance@y.values[1])) + geom_line()
performance@x.values[1]
typeof(performance@x.values[1])
typeof(performance@x.values[[1]])
ggplot(aes(x = performance@x.values[[1]], y = performance@y.values[[1]])) + geom_line()
data = data.frame(x = performance@x.values[[1]], y = performance@y.values[[1]])
data = ggplot(aes(x = x, y = y)) + geom_line()
typeof(data$x)
typeof(data$y)
str(data)
data = ggplot(aes(x = x, y = y)) + geom_point()
data %>% ggplot(aes(x = x, y = y)) + geom_line()
svm_out %>% mutate(SVM_PROB2 = ifelse(SVM_LABEL == 0, 1 - SVM_PROB, SVM_PROB)) %>%
ggplot(aes(x = SVM_PROB2, y = SVM_LABEL)) + geom_point()
svm_out %>% mutate(SVM_PROB2 = ifelse(SVM_LABEL == 0, 1 - SVM_PROB, SVM_PROB)) %>%
ggplot(aes(x = SVM_PROB2, y = SVM_LABEL)) + geom_point()
library(ROCR)
svm_out2 = svm_out %>% mutate(SVM_PROB2 = ifelse(SVM_LABEL == 0, 1 - SVM_PROB, SVM_PROB))
?prediction
prediction = prediction(svm_out2$SVM_PROB2, labels_out$correct_label)
?performance
performance = performance(prediction, measure="tpr", x.measure="fpr")
plot(performance())
plot(performance
plot(performance)
plot(performance)
tree_out2 = tree_out %>% mutate(tree_PROB2 = ifelse(tree_LABEL == 0, 1 - tree_PROB, tree_PROB))
tree_out2 = tree_out %>% mutate(TREE_PROB2 = ifelse(TREE_LABEL == 0, 1 - TREE_PROB, TREE_PROB))
maxent_out2 = maxent_out %>% mutate(MAXENT_PROB2 = ifelse(MAXENT_LABEL == 0, 1 - MAXENT_PROB, MAXENT_PROB))
maxent_out
head(maxent_out)
maxent_out2 = maxent_out %>% mutate(MAXENT_PROB2 = ifelse(MAXENTROPY_LABEL == 0, 1 - MAXENTROPY_PROB,
MAXENTROPY_PROB))
svm_pred1 = prediction(svm_out2$SVM_PROB2, labels_out$correct_label)
tree_pred1 = prediction(tree_out2$SVM_PROB2, labels_out$correct_label)
tree_pred1 = prediction(tree_out2$TREE_PROB2, labels_out$correct_label)
maxent_pred1 = prediction(maxent_out2$MAXENTROPY_PROB2, labels_out$correct_label)
head(maxent_out2)
maxent_out2 = maxent_out %>% mutate(MAXENTROPY_PROB2 = ifelse(MAXENTROPY_LABEL == 0, 1 - MAXENTROPY_PROB,
MAXENTROPY_PROB))
maxent_pred1 = prediction(maxent_out2$MAXENTROPY_PROB2, labels_out$correct_label)
svm_perf1 = performance(prediction, measure="tpr", x.measure="fpr")
svm_perf1 = performance(svm_pred1, measure="tpr", x.measure="fpr")
tree_perf1 = performance(tree_pred1, measure="tpr", x.measure="fpr")
maxet_perf1 = performance(maxet_pred1, measure="tpr", x.measure="fpr")
maxent_pred1 = prediction(maxent_out2$MAXENTROPY_PROB2, labels_out$correct_label)
maxet_perf1 = performance(maxet_pred1, measure="tpr", x.measure="fpr")
maxet_perf1 = performance(maxent_pred1, measure="tpr", x.measure="fpr")
plot(svm_perf1, colorize = TRUE)
plot(tree_perf1, add = TRUE, color = TRUE)
plot(svm_perf1, colorize = TRUE)
maxent_perf1 = performance(maxent_pred1, measure="tpr", x.measure="fpr")
rep('a', 3)
seq(1:3)
seq('a', 1:3)
seq('a', 3)
?rep
rbind(rep('a', 3), rep('b', 3))
rbind(seq(1:3), seq(1:3))
cbind(rep('a', 3), rep('b', 3))
c(rep('a', 3), rep('b', 3))
nrow(labels_out)
roc_df = data.frame(x = rbind(svm_perf1@x.values[[1]], tree_perf1@x.values[[1]], maxent_perf1@x.values[[1]]),
y = rbind(svm_perf1@y.values[[1]], tree_perf1@y.values[[1]], maxent_perf1@y.values[[1]]),
model = c(rep('svm', nrow(labels_out)), rep('tree', nrow(labels_out)),
rep('maxent', nrow(labels_out))))
str(roc_df)
roc_df = data.frame(x = c(svm_perf1@x.values[[1]], tree_perf1@x.values[[1]], maxent_perf1@x.values[[1]]),
y = c(svm_perf1@y.values[[1]], tree_perf1@y.values[[1]], maxent_perf1@y.values[[1]]),
model = c(rep('svm', nrow(labels_out)), rep('tree', nrow(labels_out)),
rep('maxent', nrow(labels_out))))
c(svm_perf1@x.values[[1]], tree_perf1@x.values[[1]], maxent_perf1@x.values[[1]])
x = c(svm_perf1@x.values[[1]], tree_perf1@x.values[[1]], maxent_perf1@x.values[[1]])
str(x)
length(x)
length(svm_perf1@x.values[[1]])
length(tree_perf1@x.values[[1]])
length(maxent_perf1@x.values[[1]])
length(maxent_perf1@y.values[[1]])
svm_out2 = svm_out %>% mutate(SVM_PROB2 = ifelse(SVM_LABEL == 0, 1 - SVM_PROB, SVM_PROB))
tree_out2 = tree_out %>% mutate(TREE_PROB2 = ifelse(TREE_LABEL == 0, 1 - TREE_PROB, TREE_PROB))
maxent_out2 = maxent_out %>% mutate(MAXENTROPY_PROB2 = ifelse(MAXENTROPY_LABEL == 0, 1 - MAXENTROPY_PROB,
MAXENTROPY_PROB))
nrow(svm_out2)
nrow(tree_out2)
nrow(maxent_out2)
svm_pred1 = prediction(svm_out2$SVM_PROB2, labels_out$correct_label)
tree_pred1 = prediction(tree_out2$TREE_PROB2, labels_out$correct_label)
maxent_pred1 = prediction(maxent_out2$MAXENTROPY_PROB2, labels_out$correct_label)
nrow(tree_pred1)
nrow(tree_pred1@predictions)
nrow(svm_pred1@predictions)
nrow(svm_pred1@labels)
length(svm_pred1@labels)
svm_pred1@labels
length(svm_pred1@labels[[1]])
length(tree_pred1@labels[[1]])
length(maxent_pred1@labels[[1]])
svm_perf1 = performance(svm_pred1, measure="tpr", x.measure="fpr")
tree_perf1 = performance(tree_pred1, measure="tpr", x.measure="fpr")
maxent_perf1 = performance(maxent_pred1, measure="tpr", x.measure="fpr")
length(svm_perf1@x.values[[1]])
length(tree_perf1@x.values[[1]])
plot(tree_perf1)
plot(maxent_perf1)
lines(tree_perf1@x.values[[1]], tree_perf1@y.values[[1]], col = 2)
plot(svm_perf1)
svm_perf1 = performance(svm_pred1, measure="tpr", x.measure="fpr")
plot(svm_perf1)
line(tree_perf1@x.values[[1]], tree_perf1@y.values[[1]], col = 2)
plot(svm_perf1)
line(tree_perf1@x.values[[1]], tree_perf1@y.values[[1]], col = 2)
line(tree_perf1@x.values[[1]], tree_perf1@y.values[[1]])
plot(svm_perf1)
lines(tree_perf1@x.values[[1]], tree_perf1@y.values[[1]], col = 2)
plot(svm_perf1)
lines(tree_perf1@x.values[[1]], tree_perf1@y.values[[1]], col = 2)
plot(svm_perf1)
lines(tree_perf1@x.values[[1]], tree_perf1@y.values[[1]], col = 2)
lines(maxent_perf1@x.values[[1]], maxent_perf1@y.values[[1]], col = 3)
plot(svm_perf1)
lines(tree_perf1@x.values[[1]], tree_perf1@y.values[[1]], col = 2)
lines(maxent_perf1@x.values[[1]], maxent_perf1@y.values[[1]], col = 3)
legend('bottomright', names = c('svm', 'tree', 'maxent'),
lty=1, col=c('black', 'red', 'green'), bty='n', cex=.75)
?legend
plot(svm_perf1)
lines(tree_perf1@x.values[[1]], tree_perf1@y.values[[1]], col = 2)
lines(maxent_perf1@x.values[[1]], maxent_perf1@y.values[[1]], col = 3)
legend('bottomright', legend = c('svm', 'tree', 'maxent'),
lty=1, col=c('black', 'red', 'green'), bty='n', cex=.75)
library(tm)
library(stringr)
library(XML)
library(RTextTools)
library(ROCR)
library(dplyr)
library(ggplot2)
setwd("~/Google Drive/CUNY/git/DATA607/Week10")
#setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA607/Week10")
set.seed(123)
# create function to cleanse emails by removing non ASCII characters
cleanse_emails = function(dat) {
dat = str_c(dat, collapse = " ")
dat2 <- unlist(strsplit(dat, split=" "))
dat3 <- grep("dat2", iconv(dat2, "latin1", "ASCII", sub="dat2"))
if (length(dat3) == 0) {
dat4 = dat2
} else dat4 = dat2[-dat3]
dat5 <- paste(dat4, collapse = " ")
}
cleanse_corpus = function(x) {
x = tm_map(x, PlainTextDocument)  # to make tm package play nice
x = tm_map(x, removeNumbers)
x = tm_map(x, removePunctuation)  # leaving punctuation in case relevant to spam ham filter
x = tm_map(x, stripWhitespace)
x = tm_map(x, stemDocument)
x = tm_map(x, content_transformer(tolower))  # content_transformer required because tolower not tm function
x = tm_map(x, removeWords, stopwords('en'))
}
spam_path = '20021010_spam/'
# add spam to email corpus
# create initial corpus
email = readLines(str_c(spam_path, list.files(spam_path)[1]))
email = cleanse_emails(email)
email_corpus = Corpus(VectorSource(email))
email_corpus = cleanse_corpus(email_corpus)
meta(email_corpus[[1]], 'spam') = 1
for (i in 2:length(list.files(spam_path))) {
email = readLines(str_c(spam_path, list.files(spam_path)[i]))
email = cleanse_emails(email)
# add meta data to house spam classification
if (length(email) != 0) {
tmp_corpus = Corpus(VectorSource(email))
tmp_corpus = cleanse_corpus(tmp_corpus)
meta(tmp_corpus[[1]], 'spam') = 1
email_corpus = c(email_corpus, tmp_corpus)
}
}
easy_ham_path = '20021010_easy_ham/'
# add ham to email corpus
for (i in 1:length(list.files(easy_ham_path))) {
email = readLines(str_c(easy_ham_path, list.files(easy_ham_path)[i]))
email = cleanse_emails(email)
# add meta data to house spam classification
if (length(email) != 0) {
tmp_corpus = Corpus(VectorSource(email))
tmp_corpus = cleanse_corpus(tmp_corpus)
meta(tmp_corpus[[1]], 'spam') = 0
email_corpus = c(email_corpus, tmp_corpus)
}
}
hard_ham_path = '20021010_hard_ham/'
# add ham to email corpus
for (i in 1:length(list.files(hard_ham_path))) {
email = readLines(str_c(hard_ham_path, list.files(hard_ham_path)[i]))
email = cleanse_emails(email)
# add meta data to house spam classification
if (length(email) != 0) {
tmp_corpus = Corpus(VectorSource(email))
tmp_corpus = cleanse_corpus(tmp_corpus)
meta(tmp_corpus[[1]], 'spam') = 0
email_corpus = c(email_corpus, tmp_corpus)
}
}
# randomize corpus order
N = length(email_corpus)
rand_index = sample(1:N)
email_corpus = email_corpus[rand_index]
tm_filter(email_corpus[1:100], FUN = function(x) meta(x)[['spam']] == 1)  # check that spam and ham have been randomized
# create document term matrix
dtm = DocumentTermMatrix(email_corpus)
dtm = removeSparseTerms(dtm, 1-(10/length(email_corpus)))
#inspect(dtm[100:120, 100:110])
spam_labels = unlist(meta(email_corpus, 'spam'))
# create container
container = create_container(dtm, labels = spam_labels,
trainSize = 1:round(N*0.8,0), testSize = (round(N*0.8,0)+1):N,  # use 80% of data for train
virgin = FALSE)
# estimation procedure
svm_model = train_model(container, 'SVM')
#cross_validate(container, nfold = 5, algorithm = 'SVM')
tree_model = train_model(container, 'TREE')
#cross_validate(container, nfold = 5, algorithm = 'TREE')
maxent_model = train_model(container, 'MAXENT')
#cross_validate(container, nfold = 5, algorithm = 'MAXENT')
svm_out = classify_model(container, svm_model)
tree_out = classify_model(container, tree_model)
maxent_out = classify_model(container, maxent_model)
# evaluation
labels_out = data.frame(
correct_label = spam_labels[(round(N*0.8,0)+1):N],
svm = as.character(svm_out[,1]),
tree = as.character(tree_out[,1]),
maxent = as.character(maxent_out[,1]),
stringsAsFactors = FALSE
)
# svm confusion table
table(actual = labels_out[,1], predicted = labels_out[,2])
# tree confusion table
table(actual = labels_out[,1], predicted = labels_out[,3])
# maxent confusion table
table(actual = labels_out[,1], predicted = labels_out[,4])
# analytics
svm_analytics = create_analytics(container, svm_out)
summary(svm_analytics)
tree_analytics = create_analytics(container, tree_out)
summary(tree_analytics)
maxent_analytics = create_analytics(container, maxent_out)
summary(maxent_analytics)
svm_out2 = svm_out %>% mutate(SVM_PROB2 = ifelse(SVM_LABEL == 0, 1 - SVM_PROB, SVM_PROB))
tree_out2 = tree_out %>% mutate(TREE_PROB2 = ifelse(TREE_LABEL == 0, 1 - TREE_PROB, TREE_PROB))
maxent_out2 = maxent_out %>% mutate(MAXENTROPY_PROB2 = ifelse(MAXENTROPY_LABEL == 0, 1 - MAXENTROPY_PROB,
MAXENTROPY_PROB))
# create ROCR prediction object
svm_pred1 = prediction(svm_out2$SVM_PROB2, labels_out$correct_label)
tree_pred1 = prediction(tree_out2$TREE_PROB2, labels_out$correct_label)
maxent_pred1 = prediction(maxent_out2$MAXENTROPY_PROB2, labels_out$correct_label)
# create ROCR performance object
svm_perf1 = performance(svm_pred1, measure="tpr", x.measure="fpr")
tree_perf1 = performance(tree_pred1, measure="tpr", x.measure="fpr")
maxent_perf1 = performance(maxent_pred1, measure="tpr", x.measure="fpr")
plot(svm_perf1)
lines(tree_perf1@x.values[[1]], tree_perf1@y.values[[1]], col = 2)
lines(maxent_perf1@x.values[[1]], maxent_perf1@y.values[[1]], col = 3)
legend('bottomright', legend = c('svm', 'tree', 'maxent'),
lty=1, col=c('black', 'red', 'green'), bty='n', cex=.75)
# attempt modeling using caret package
library(caret)
#library(parallel)
#library(doParallel)  # for OSX use library(doMC)
library(caTools)
# convert dtm to matrix
full_mat = as.matrix(dtm)
train_mat = full_mat[1:round(N*0.8,0),]
test_mat = full_mat[(round(N*0.8,0)+1):N,]
# caret twoClassSummary requires non-numeric classes
spam_labels = factor(spam_labels, levels = c(0, 1), labels = c('ham', 'spam'))
train_y = spam_labels[1:round(N*0.8,0)]
test_y = spam_labels[(round(N*0.8,0)+1):N]
#use_cores = detectCores()-1
#cl = makeCluster(use_cores)
#registerDoParallel(cl)  # for OSX use registerDoMC(cl)
# summaryFunction = twoClassSummary allows train() function to use AUC metric to rank models;
# classProbs = TRUE allows summaryFunction to work properly
myControl = trainControl(method = 'cv', number = 5, summaryFunction = twoClassSummary, classProbs = T, verboseIter = T)
# glmnet = a general linear model with combination of lasso regression (penalizes number of non-zero coefficients) and
# ridge regression (penalizes absolute magnitude of coefficients);
# glmnet has two tuning parameters: 1) alpha (0 to 1 or 100% lasso to 100% ridge) and 2) lambda (0 to Inf or the size
# of the penalty)
glm = train(x = train_mat, y = train_y, method = 'glmnet', metric = 'ROC', family = 'binomial', trControl = myControl)
#            tuneGrid = expand.grid(alpha = seq(0, 1, 0.1), lambda = seq(0, 0.1, 0.01)))
glm
plot(glm)
glm_pred = predict(glm, newdata = test_mat, type = 'raw')
colAUC(as.numeric(glm_pred), test_y, plotROC = T)
confusionMatrix(glm_pred, test_y)
# support vector machine
svm = train(x = train_mat, y = train_y, method = 'svmRadial', metric = 'ROC', family = 'binomial', trControl = myControl)
svm
plot(svm)
svm_pred = predict(svm, newdata = test_mat, type = 'raw')
colAUC(as.numeric(svm_pred), test_y, plotROC = T)
confusionMatrix(svm_pred, test_y)
# naive bayes -- FAILED
# nb = train(x = train_mat, y = train_y, method = 'nb', metric = 'ROC', family = 'binomial', trControl = myControl)
# plot(nb)
# nb_pred = predict(nb, newdata = test_mat, type = 'raw')
# colAUC(as.numeric(nb_pred), test_y, plotROC = T)
# random forest -- TOO SLOW
#rf = train(x = train_mat, y = train_y, method = 'rf', metric = 'ROC', family = 'binomial', trControl = myControl)
# ranger = random forest model which has one tuning parameter mtry (2 to 100) or the number of variables to consider
# at each split; this can be controlled by adjusting the tuneLength parameter or by defining a custom tuneGrid
# -- FAILED
#rf = train(x = train_mat, y = make.names(train_y), method = 'ranger', metric = 'ROC', trControl = myControl)
# neural network -- FAILED
#nnet = train(x = train_mat, y = train_y, method = 'nnet', metric = 'ROC', family = 'binomial', trControl = myControl)
#stopCluster(cl)
#registerDoSEQ()
library(caretEnsemble)
# compare models using resample
model_list = list(glm = glm, svm = svm)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
library(dbConnect)
library(jsonlite)
setwd("~/Google Drive/CUNY/git/DATA607/Week11")
username = 'root'
password = 'password'
dbname = 'flights'
host = '127.0.0.1'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
qryString = 'select * from flights'
selectQry = dbSendQuery(myDb, qryString)
results = fetch(selectQry, n = -1)
results
library(dbConnect)
library(jsonlite)
setwd("~/Google Drive/CUNY/git/DATA607/Week11")
username = 'root'
password = 'password'
dbname = 'flights'
host = '127.0.0.1'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
qryString = 'SELECT * FROM v_flights_detail LIMIT 1'
selectQry = dbSendQuery(myDb, qryString)
selectQry = dbSendQuery(myDb, qryString)
library(dbConnect)
library(jsonlite)
setwd("~/Google Drive/CUNY/git/DATA607/Week11")
username = 'root'
password = 'password'
dbname = 'flights'
host = '127.0.0.1'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
qryString = 'SELECT * FROM v_flights_detail LIMIT 1'
selectQry = dbSendQuery(myDb, qryString)
results = fetch(selectQry, n = -1)
results
flights.json = toJSON(results)
prettify(flights.json)
jsoncars <- toJSON(mtcars, pretty=TRUE)
cat(jsoncars)
data2 <- fromJSON("https://api.github.com/users/hadley/repos")
names(data2)
names(data2$owner)
data2$owner$login
toJSON(data2)
prettify(toJSON(data2))
flights = 'SELECT * FROM flights;'
flightsQry = 'SELECT * FROM flights;'
flightsQry = dbSendQuery(myDb, 'SELECT * FROM flights;')
flights.df = fetch(flightsQry, n = -1)
flights.df
str(flights.df)
originsQry = dbSendQuery(myDb, 'SELECT * FROM airports;')
origins.df = fetch(originsQry, n = -1)
origins.df
str(origins.df)
flights.df1 = flights.df[1,]
flights.df1
merge(flights.df1, origins.df, by.x = 'origin', by.y = 'faa')
flights.df1$origin.detail = origins.df[origins.df$faa == flights.df1$origin,]
flights.df1
str(flights.df1)
toJSON(flights.df1)
prettify(toJSON(flights.df1))
flights1 = flights[1, ]
flights.df1 = flights.df[1, ]
airportsQry = dbSendQuery(myDb, 'SELECT * FROM airports;')
airports.df = fetch(airportsQry, n = -1)
airports.df
flights.df1$origin.detail = airports.df[airports.df$faa == flights.df1$origin,]
flights.df1
prettify(toJSON(flights.df1))
library(dbConnect)
library(jsonlite)
library(mongolite)
setwd("~/Google Drive/CUNY/git/DATA607/Project4")
username = 'root'
password = 'password'
dbname = 'flights'
host = '127.0.0.1'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
library(dbConnect)
library(jsonlite)
library(mongolite)
setwd("~/Google Drive/CUNY/git/DATA607/Project4")
username = 'root'
password = 'password'
dbname = 'flights'
host = '127.0.0.1'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
flightsQry = dbSendQuery(myDb, 'SELECT * FROM flights WHERE origin = "EWR" LIMIT 100;')
flights = fetch(flightsQry, n = -1)
airportsQry = dbSendQuery(myDb, 'SELECT * FROM airports;')
airports = fetch(airportsQry, n = -1)
airlinesQry = dbSendQuery(myDb, 'SELECT * FROM airlines;')
airlines = fetch(airlinesQry, n = -1)
planesQry = dbSendQuery(myDb, 'SELECT * FROM planes;')
planes = fetch(planesQry, n = -1)
weatherQry = dbSendQuery(myDb, 'SELECT * FROM weather;')
weather = fetch(weatherQry, n = -1)
for (i in 1:nrow(flights)) {
flights$origin_detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest_detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline_detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane_detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
# check if weather row is NA
weather_row = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
if (!is.na(weather_row[1])) {
flights$weather_detail[[i]] = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
}
}
# check JSON validity
prettify(toJSON(flights[1:3,]))
m = mongo(collection = 'flights')
m$insert(flights)
# check record counts
m$count()
# perform query and retrieve data
m$find( '{ "carrier": "UA" }' )
m$find( ' { "plane_detail.manufacturer" : "BOEING" } ' )
# list distinct values
m$distinct("plane_detail.manufacturer")
# remove the collection
m$drop()
library(dbConnect)
library(jsonlite)
library(mongolite)
setwd("~/Google Drive/CUNY/git/DATA607/Project4")
username = 'root'
password = 'password'
dbname = 'flights'
host = '127.0.0.1'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
flightsQry = dbSendQuery(myDb, 'SELECT * FROM flights WHERE origin = "EWR" LIMIT 100;')
flights = fetch(flightsQry, n = -1)
airportsQry = dbSendQuery(myDb, 'SELECT * FROM airports;')
airports = fetch(airportsQry, n = -1)
airlinesQry = dbSendQuery(myDb, 'SELECT * FROM airlines;')
airlines = fetch(airlinesQry, n = -1)
planesQry = dbSendQuery(myDb, 'SELECT * FROM planes;')
planes = fetch(planesQry, n = -1)
weatherQry = dbSendQuery(myDb, 'SELECT * FROM weather;')
weather = fetch(weatherQry, n = -1)
for (i in 1:nrow(flights)) {
flights$origin_detail[[i]] = airports[airports$faa == flights$origin[i],]
flights$dest_detail[[i]] = airports[airports$faa == flights$dest[i],]
flights$airline_detail[[i]] = airlines[airlines$carrier == flights$carrier[i],]
flights$plane_detail[[i]] = planes[planes$tailnum == flights$tailnum[i],]
# check if weather row is NA
weather_row = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
if (!is.na(weather_row[1])) {
flights$weather_detail[[i]] = weather[weather$origin == flights$origin[i] &
weather$year == flights$year[i] &
weather$month == flights$month[i] &
weather$day == flights$day[i] &
weather$hour == flights$hour[i]
, ][1,]
}
}
# check JSON validity
prettify(toJSON(flights[1:3,]))
m = mongo(collection = 'flights')
m$insert(flights)
# check record counts
m$count()
# perform query and retrieve data
m$find( '{ "carrier": "UA" }' )
m$find( ' { "plane_detail.manufacturer" : "BOEING" } ' )
# list distinct values
m$distinct("plane_detail.manufacturer")
# remove the collection
m$drop()
setwd("~/Google Drive/CUNY/git/DATA607/Week11")
