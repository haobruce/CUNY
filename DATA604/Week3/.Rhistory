View(results)
results * 1
results
tbl_results[, .(sum = sum(est), sd = sd(est))]
tbl_results[, .(mean = mean(est), sd = sd(est))]
set.seed(123)
# create function for simulation
integrate_sim = function(mu, sig, a, b, n) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results[, .(mean = mean(est), sd = sd(est))]
return(tbl_results)
}
results = integrate_sim(5.8, 2.3, 4.5, 6.7, 50)
integrate_sim(5.8, 2.3, 4.5, 6.7, 50)
set.seed(123)
# create function for simulation
integrate_sim = function(mu, sig, a, b, n) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results[, .(mean = mean(est), sd = sd(est))]
}
results = integrate_sim(5.8, 2.3, 4.5, 6.7, 50)
results
pnorm(0.975, 0, 1)
?pnorm
qnorm(0.975, 0, 1)
qnorm(0.975, 0, 1, lower.tail = FALSE)
qnorm(mean(0.95,1))
qnorm(mean(0.95,1))
mean(0.95,1)
average(0.95,1)
mean(c(0.95,1))
qnorm(mean(c(0.95,1)))
qnorm(mean(c(0.90,1)))
qnorm(mean(c(0.997,1)))
qnorm(mean(c(0.95)))
set.seed(123)
# create function for simulation
integrate_sim = function(mu, sig, a, b, n, ci) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results = tbl_results[, .(mean = mean(est), sd = sd(est))]
ci = qnorm(mean(c(ci, 1)))
return(list(lowerCI = tbl_results$mean - ci * tbl_results$mean))
}
results = integrate_sim(5.8, 2.3, 4.5, 6.7, 50)
results = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 95)
set.seed(123)
# create function for simulation
integrate_sim = function(mu, sig, a, b, n, ci) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results = tbl_results[, .(mean = mean(est), sd = sd(est))]
ci = qnorm(mean(c(ci, 1)))
return(list(lowerCI = tbl_results$mean - ci * tbl_results$mean))
}
results = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 95)
ci = 95
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results = tbl_results[, .(mean = mean(est), sd = sd(est))]
ci = qnorm(mean(c(ci, 1)))
ci = qnorm(mean(c(ci, 1)))
ci
ci = 95
ci = qnorm(mean(c(ci, 1)))
ci
results = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.95)
results
set.seed(123)
# create function for simulation
integrate_sim = function(mu, sig, a, b, n, ci) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results = tbl_results[, .(mean = mean(est), sd = sd(est))]
ci = qnorm(mean(c(ci, 1)))
return(list(lowerCI = tbl_results$mean - ci * tbl_results$sd))
}
results = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.95)
results
set.seed(123)
# create function for simulation
integrate_sim = function(mu, sig, a, b, n, ci) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results = tbl_results[, .(mean = mean(est), sd = sd(est))]
ci = qnorm(mean(c(ci, 1)))
return(list(lowerCI = tbl_results$mean - ci * tbl_results$sd),
upperCI = tbl_results$mean + ci * tbl_results$sd))
set.seed(123)
# create function for simulation
integrate_sim = function(mu, sig, a, b, n, ci) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results = tbl_results[, .(mean = mean(est), sd = sd(est))]
ci = qnorm(mean(c(ci, 1)))
return(list(lowerCI = tbl_results$mean - ci * tbl_results$sd),
upperCI = tbl_results$mean + ci * tbl_results$sd)
}
results = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.95)
set.seed(123)
# create function for simulation
integrate_sim = function(mu, sig, a, b, n, ci) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results = tbl_results[, .(mean = mean(est), sd = sd(est))]
ci = qnorm(mean(c(ci, 1)))
return(list(lowerCI = tbl_results$mean - ci * tbl_results$sd,
upperCI = tbl_results$mean + ci * tbl_results$sd))
}
results = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.95)
results
pnorm(6.7, 5.8, 2.3) - pnorm(4.5, 5.8, 2.3)
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.95)
ci$lowerCI < pnorm(6.7, 5.8, 2.3) - pnorm(4.5, 5.8, 2.3) < ci$upperCI
ci$lowerCI < (pnorm(6.7, 5.8, 2.3) - pnorm(4.5, 5.8, 2.3)) < ci$upperCI
ci$lowerCI < (pnorm(6.7, 5.8, 2.3) - pnorm(4.5, 5.8, 2.3))
ci$lowerCI < (pnorm(6.7, 5.8, 2.3) - pnorm(4.5, 5.8, 2.3)) &
(pnorm(6.7, 5.8, 2.3) - pnorm(4.5, 5.8, 2.3)) < ci$upperCI
ci$lowerCI < (pnorm(6.7, 5.8, 2.3) - pnorm(4.5, 5.8, 2.3)) &
(pnorm(6.7, 5.8, 2.3) - pnorm(4.5, 5.8, 2.3)) > ci$upperCI
exact = (pnorm(6.7, 5.8, 2.3) - pnorm(4.5, 5.8, 2.3))
ci$lowerCI < exact & exact < ci$upperCI
df = data.frame(rep(0, 100))
set.seed(123)
# create function for simulation
integrate_sim = function(mu, sig, a, b, n, ci) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results = tbl_results[, .(mean = mean(est), sd = sd(est))]
ci = qnorm(mean(c(ci, 1)))
return(list(lowerCI = tbl_results$mean - ci * tbl_results$sd,
upperCI = tbl_results$mean + ci * tbl_results$sd))
}
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.95)
exact = (pnorm(6.7, 5.8, 2.3) - pnorm(4.5, 5.8, 2.3))
ci$lowerCI < exact & exact < ci$upperCI
df = data.frame(rep(0, 100))
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.95)
df[i] = ci$lowerCI < exact & exact < ci$upperCI
}
df
str(df)
df = data.frame(rep(0, 100))
df
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.95)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
df
sum(df)
df
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.95)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.95)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.95)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
ci$lowerCI < exact & exact < ci$upperCI
ci$lowerCI < exact & exact < ci$upperCI
ci$lowerCI < exact & exact < ci$upperCI
df = data.frame(rep(0, 100))
for (i in 1:10000) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.95)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
df = data.frame(rep(0, 100))
for (i in 1:10000) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
# create function for simulation
integrate_sim = function(mu, sig, a, b, n, ci) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results = tbl_results[, .(mean = mean(est), sd = sd(est))]
ci = qnorm(mean(c(ci, 1)))
return(list(lowerCI = tbl_results$mean - ci * tbl_results$sd,
upperCI = tbl_results$mean + ci * tbl_results$sd))
}
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.95)
exact = (pnorm(6.7, 5.8, 2.3) - pnorm(4.5, 5.8, 2.3))
ci$lowerCI < exact & exact < ci$upperCI
df = data.frame(rep(0, 100))
for (i in 1:10000) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
# create function for simulation
integrate_sim = function(mu, sig, a, b, n, ci) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results = tbl_results[, .(mean = mean(est), sd = sd(est))]
ci = qnorm(mean(c(ci, 1)))
return(list(lowerCI = tbl_results$mean - ci * tbl_results$sd,
upperCI = tbl_results$mean + ci * tbl_results$sd))
}
df = data.frame(rep(0, 100))
for (i in 1:10000) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
# create function for simulation
integrate_sim = function(mu, sig, a, b, n, ci) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results = tbl_results[, .(mean = mean(est), sd = sd(est))]
ci = qnorm(mean(c(ci, 1)))
return(list(lowerCI = tbl_results$mean - ci * tbl_results$sd,
upperCI = tbl_results$mean + ci * tbl_results$sd))
}
df = data.frame(rep(0, 100))
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
# create function for simulation
integrate_sim = function(mu, sig, a, b, n, ci) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results = tbl_results[, .(mean = mean(est), sd = sd(est))]
ci = qnorm(mean(c(ci, 1)))
return(list(lowerCI = tbl_results$mean - ci * tbl_results$sd,
upperCI = tbl_results$mean + ci * tbl_results$sd))
}
df = data.frame(rep(0, 100))
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
# create function for simulation
integrate_sim = function(mu, sig, a, b, n, ci) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results = tbl_results[, .(mean = mean(est), sd = sd(est))]
ci = qnorm(mean(c(ci, 1)))
return(list(lowerCI = tbl_results$mean - ci * tbl_results$sd,
upperCI = tbl_results$mean + ci * tbl_results$sd))
}
df = data.frame(rep(0, 100))
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
df = data.frame(rep(0, 100))
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
qnorm(mean(c(ci, 1)))
ci = 0.5
qnorm(mean(c(ci, 1)))
for (i in 1:20) {
integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50)
}
for (i in 1:20) {
print(integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50))
}
qnorm(0.75)
qnorm(0)
qnorm(1)
qnorm(0.975)
qnorm(0.68)
qnorm(0.84)
qnorm(mean(c(0.68, 1)))
qnorm(1-mean(c(0.68, 1)))
mean(c(0.68, 1))
mean(c(0.5, 1))
qnorm(mean(c(0.5, 1)))
exact = (pnorm(6.7, 5.8, 2.3) - pnorm(4.5, 5.8, 2.3))
df = data.frame(rep(0, 100))
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
for (i in 1:20) {
print(integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50))
}
# create function for simulation
integrate_sim = function(mu, sig, a, b, n, ci) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results = tbl_results[, .(mean = mean(est), se = sd(est) / sqrt(n))]
ci = qnorm(mean(c(ci, 1)))
return(list(lowerCI = tbl_results$mean - ci * tbl_results$se,
upperCI = tbl_results$mean + ci * tbl_results$se))
}
exact = (pnorm(6.7, 5.8, 2.3) - pnorm(4.5, 5.8, 2.3))
df = data.frame(rep(0, 100))
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
df = data.frame(rep(0, 100))
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
df = data.frame(rep(0, 100))
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
df = data.frame(rep(0, 100))
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
df = data.frame(rep(0, 100))
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
df = data.frame(rep(0, 100))
for (i in 1:100) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, 0.50)
df[i,] = ci$lowerCI < exact & exact < ci$upperCI
}
sum(df)
df = data.frame(sim = rep(0, 100), ci_90 = rep(0, 100),
ci_95 = rep(0, 100), ci_99 = rep(0, 100))
for (i in c(90, 95, 90)) { print i}
for (i in c(90, 95, 90)) { print(i) }
df = data.frame(sim = rep(0, 100), ci_90 = rep(0, 100),
ci_95 = rep(0, 100), ci_99 = rep(0, 100))
for (i in 1:100) {
c = 1
for (test in c(0.90, 0.95, 0.99)) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, test)
df[i, c] = ci$lowerCI < exact & exact < ci$upperCI
c = c + 1
}
}
sum(df)
df
colSums(df)
head(df)
exact = (pnorm(6.7, 5.8, 2.3) - pnorm(4.5, 5.8, 2.3))
df = data.frame(sim = rep(0, 100), ci_90 = rep(0, 100),
ci_95 = rep(0, 100), ci_99 = rep(0, 100))
for (i in 1:100) {
c = 2
for (test in c(0.90, 0.95, 0.99)) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, test)
df[i, c] = ci$lowerCI < exact & exact < ci$upperCI
c = c + 1
}
}
colSums(df)
head(df)
# create function for simulation
integrate_sim = function(mu, sig, a, b, n, ci) {
tbl_results = data.table(sim = seq(1:n), Xi = runif(n) * (b - a ) + a)
tbl_results[, est := (b - a) * dnorm(Xi, mu, sig)]
tbl_results = tbl_results[, .(mean = mean(est), se = sd(est) / sqrt(n))]
ci = qnorm(mean(c(ci, 1)))
return(list(lowerCI = tbl_results$mean - ci * tbl_results$se,
upperCI = tbl_results$mean + ci * tbl_results$se))
}
exact = (pnorm(6.7, 5.8, 2.3) - pnorm(4.5, 5.8, 2.3))
df = data.frame(sim = rep(0, 100), ci_90 = rep(0, 100),
ci_95 = rep(0, 100), ci_99 = rep(0, 100))
for (i in 1:100) {
c = 2
for (test in c(0.90, 0.95, 0.99)) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, test)
df[i, c] = ci$lowerCI < exact & exact < ci$upperCI
c = c + 1
}
}
colSums(df)
for (i in 1:100) {
c = 2
for (test in c(0.90, 0.95, 0.99)) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, test)
df[i, c] = ci$lowerCI < exact & exact < ci$upperCI
c = c + 1
}
}
colSums(df)
for (i in 1:100) {
c = 2
for (test in c(0.90, 0.95, 0.99)) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, test)
df[i, c] = ci$lowerCI < exact & exact < ci$upperCI
c = c + 1
}
}
colSums(df)
for (i in 1:100) {
c = 2
for (test in c(0.90, 0.95, 0.99)) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, test)
df[i, c] = ci$lowerCI < exact & exact < ci$upperCI
c = c + 1
}
}
colSums(df)
for (i in 1:100) {
c = 2
for (test in c(0.90, 0.95, 0.99)) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, test)
df[i, c] = ci$lowerCI < exact & exact < ci$upperCI
c = c + 1
}
}
colSums(df)
for (i in 1:100) {
c = 2
for (test in c(0.90, 0.95, 0.99)) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, test)
df[i, c] = ci$lowerCI < exact & exact < ci$upperCI
c = c + 1
}
}
colSums(df)
df = data.frame(ci_90 = rep(0, 100), ci_95 = rep(0, 100), ci_99 = rep(0, 100))
for (i in 1:100) {
c = 1
for (test in c(0.90, 0.95, 0.99)) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, test)
df[i, c] = ci$lowerCI < exact & exact < ci$upperCI
c = c + 1
}
}
colSums(df)
df = data.frame(ci_90 = rep(0, 100), ci_95 = rep(0, 100), ci_99 = rep(0, 100))
for (i in 1:100) {
c = 1
for (test in c(0.90, 0.95, 0.99)) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, test)
df[i, c] = ci$lowerCI < exact & exact < ci$upperCI
c = c + 1
}
}
colSums(df)
df = data.frame(ci_90 = rep(0, 100), ci_95 = rep(0, 100), ci_99 = rep(0, 100))
for (i in 1:100) {
c = 1
for (test in c(0.90, 0.95, 0.99)) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, test)
df[i, c] = ci$lowerCI < exact & exact < ci$upperCI
c = c + 1
}
}
colSums(df)
df = data.frame(ci_90 = rep(0, 100), ci_95 = rep(0, 100), ci_99 = rep(0, 100))
for (i in 1:1000) {
c = 1
for (test in c(0.90, 0.95, 0.99)) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, test)
df[i, c] = ci$lowerCI < exact & exact < ci$upperCI
c = c + 1
}
}
colSums(df)
colSums(df)/1000
df = data.frame(ci_90 = rep(0, 100), ci_95 = rep(0, 100), ci_99 = rep(0, 100))
for (i in 1:1000) {
c = 1
for (test in c(0.90, 0.95, 0.99)) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, test)
df[i, c] = ci$lowerCI < exact & exact < ci$upperCI
c = c + 1
}
}
colSums(df)/1000
df = data.frame(ci_90 = rep(0, 100), ci_95 = rep(0, 100), ci_99 = rep(0, 100))
for (i in 1:1000) {
c = 1
for (test in c(0.90, 0.95, 0.99)) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, test)
df[i, c] = ci$lowerCI < exact & exact < ci$upperCI
c = c + 1
}
}
colSums(df)/1000
df = data.frame(ci_90 = rep(0, 100), ci_95 = rep(0, 100), ci_99 = rep(0, 100))
for (i in 1:1000) {
c = 1
for (test in c(0.90, 0.95, 0.99)) {
ci = integrate_sim(5.8, 2.3, 4.5, 6.7, 50, test)
df[i, c] = ci$lowerCI < exact & exact < ci$upperCI
c = c + 1
}
}
colSums(df)/1000
