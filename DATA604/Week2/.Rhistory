install.packages('dplyr')
install.packages("tidyr")
install.packages("ggplot2")
install.packages("ggthemes")
install.packages("shiny")
setwd("~/Google Drive/CUNY/git/DATA605/HW1")
A = matrix(seq(1, 6), nrow = 2, byrow = TRUE)
B = matrix(seq(12, 7), nrow = 2)
A
B
A %*% t(B)
t(A) %*% B
C = matrix(c(1, 0, -3, 1), nrow = 2, byrow = TRUE)
C
solve(C)
C %*% solve(C)
solve(C) %*% C
A = matrix(c(1,2,3,1,1,1,2,0,1) nrow = 3)
A = matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3)
A
E21 = matrix(c(1,-2,0,0,1,0,0,0,1), nrow = 3)
E21
E21 %*% A
E31 = matrix(c(1,0,-3,0,1,0,0,0,1), nrow = 3)
E31
E31 %*% E21 %*% A
E32 = matrix(c(1, 0,0,0,1,-2,0,0,1), nrow = 3)
E32
E32 %*% E31 %*% E23 %*% A
E32 %*% E31 %*% E21 %*% A
L = solve(E32 %*% E31 %*% E21)
L
solve(E21 %*% E31 %*% E32)
L * U
U = E32 %*% E31 %*% E21 %*% A
L %*% U
A
L
L %*% solve(L)
solve(L) %*% L
L
A
A %*% solve(A)
solve(A) %*% A
A
U
U %*% solve(U)
solve(U) %*% U
setwd("~/Google Drive/CUNY/git/DATA604/Week2")
interarrival = 1.25  # minutes
S = 1  # minutes
lambda = 1 / interarrival  # customers per minute
L = rho / (1 - rho)  # total customers for c = 1 and M/M/1
interarrival = 1.25  # minutes
S = 1  # minutes
lambda = 1 / interarrival  # customers per minute
lambda
mu = 1 / S  # customers per minute
mu
rho = lambda / mu  # utilization
rho
L = rho / (1 - rho)  # steady state average number of customers in the system for c = 1 and M/M/1
L
W = L / lambda  # average wait time
W
interarrival = 1.25  # minutes
a = 0.1  # minutes
b = 1.9  # minutes
S = (a + b) / 2  # minutes
S
lambda = 1 / interarrival  # entities per minute
lambda
mu = 1 / S  # entities per minute
mu
rho = lambda / mu  # utilization
rho
sigma = sqrt((b - a)^2 / 12)
sigma
Wq = (lambda * (sigma^2 + 1 / mu^2)) / (2 * (1 - lambda / mu))
Wq
interarrival = 1.25  # minutes
lambda = 1 / interarrival  # entities per minute
lambda
a = 0.1  # minutes
b = 1.9  # minutes
S = (a + b) / 2  # minutes
S
sigma = sqrt((b - a)^2 / 12)
sigma
mu = 1 / S  # entities per minute
mu
Wq = (lambda * (sigma^2 + 1 / mu^2)) / (2 * (1 - lambda / mu))  # steady state average time in queue in minutes
Wq
W = Wq + S  # steady state average time in system in minutes
W
L = lambda * W  # steady state average number of entities in system
L
Lq = lambda * Wq  # steady state average number of entities in quque
interarrival = 1.25  # minutes
lambda = 1 / interarrival  # entities per minute
lambda
S = 1  # minutes
mu = 1 / S  # entities per minute
mu
rho = lambda / mu  # utilization
rho
L = rho / (1 - rho)  # steady state average number of entities in the system for c = 1 and M/M/1
L
W = L / lambda  # steady state average time in system in minutes
W
Wq = S - W  # steady state average time in queue in minutes
Wq
Lq = lambda * Wq  # steady state average number of entities in queue
Lq
?rexp
hist(rexp(100))
mean(rexp(100))
mean(rexp(10000))
mean(rexp(1000000))
interarrival = 1.25  # minutes
lambda = 1 / interarrival  # entities per minute
lambda
a = 0.1  # minutes
b = 1.9  # minutes
m = 1.0  # minutes
S = (a + m + b) / 3  # minutes
S
sigma = sqrt((b - a)^2 / 12)
sigma
mu = 1 / S  # entities per minute
mu
rho = lambda / mu  # utilization
rho
Wq = (lambda * (sigma^2 + 1 / mu^2)) / (2 * (1 - lambda / mu))  # steady state average time in queue in minutes
Wq
W = Wq + S  # steady state average time in system in minutes
W
L = lambda * W  # steady state average number of entities in system
L
Lq = lambda * Wq  # steady state average number of entities in queue
Lq
factorial(3)
p0 = 1 /
(
(c*rho)^c / (factorial(c) * (1 - rho)) +
for (i in 1:3) {
i = i + 1
}
)
c*rho
c = 3  # servers
p0 = 1 /
(
(c*rho)^c / (factorial(c) * (1 - rho)) +
for (i in 1:3) {
i = i + 1
}
)
p0
p0 = 10 * for (i in 1:3) {i = i + 1}
p0
for (i in n:(c-1)) {
sum_n_c = sum_n_c + (c * rho)^i / factorial(i)
}
for (n in 0:(c-1)) {
sum_n_c = sum_n_c + (c * rho)^n / factorial(n)
}
sum_n_c = 0
for (n in 0:(c-1)) {
sum_n_c = sum_n_c + (c * rho)^n / factorial(n)
}
sum_n_c
p0 = 1 /
(
(c*rho)^c / (factorial(c) * (1 - rho)) + sum_n_c
)
p0
Lq = (rho * (c * rho)^c * p0) / (factorial(c) * (1 - rho)^2) # steady state average number of entities in queue
Lq
L = Lq + lambda / mu  # steady state average number of entities in the system for c = 1 and M/M/1
L
c = 3  # servers
interarrival = 1.25  # minutes
lambda = 1 / interarrival  # entities per minute
lambda
S = 3  # minutes
mu = 1 / S  # entities per minute
mu
rho = lambda / (c * mu)  # utilization
rho
sum_n_c = 0
for (n in 0:(c-1)) {
sum_n_c = sum_n_c + (c * rho)^n / factorial(n)
}
p0 = 1 / ((c*rho)^c / (factorial(c) * (1 - rho)) + sum_n_c)
Lq = (rho * (c * rho)^c * p0) / (factorial(c) * (1 - rho)^2) # steady state average number of entities in queue
Lq
L = Lq + lambda / mu  # steady state average number of entities in the system for c = 1 and M/M/1
L
W = L / lambda  # steady state average time in system in minutes
W
Wq = W - S  # steady state average time in queue in minutes
Wq
hist(rexp(100, 3))
hist(rexp(100, 1))
hist(rexp(100, 3))
hist(rexp(100, 1/3))
?rexp
hist(rexp(100, 1/3))
rho_calc = function(prob, lambda, c, mu) {
(prob * lambda) / (c * mu)
}
rho_calc(1, lambda, 2, 1 / 3)
rho_calc = function(prob, lambda, c, mu) {
(prob * lambda) / (c * mu)
}
interarrival = 6  # minutes
lambda = 1 / interarrival  # entities per minute
lambda
S = 3  # minutes
mu = 1 / S  # entities per minute
mu
# Sign in
rho_calc(1, lambda, 2, 1 / 3)
rho_calc(0.9, lambda, 1, 1/5)
rho_calc(0.1, lambda, 2, 1/90)
rho_calc(0.9, lambda, 3, 1/16)
rho_calc(0.9*0.6+0.1, lambda, 2, 1/15)
rho_calc = function(prob, lambda, c, mu) {
(prob * lambda) / (c * mu)
}
interarrival = 6  # minutes
lambda = 1 / interarrival  # entities per minute
# Sign in
rho_calc(1, lambda, 2, 1/3)
# Registration
rho_calc(0.9, lambda, 1, 1/5)
# Trauma rooms
rho_calc(0.1, lambda, 2, 1/90)
# Exam rooms
rho_calc(0.9, lambda, 3, 1/16)
# Treatment rooms
rho_calc(0.9*0.6+0.1, lambda, 2, 1/15)
rho_calc(0.9, lambda, 3, 1/16)
rho_calc(0.9, lambda, 4, 1/16)
rho_calc(0.9*0.6+0.1, lambda, 2, 1/15)
rho_calc(0.9*0.6+0.1, lambda, 3, 1/15)
