array(seq(1:4), c(2,2), byrow=TRUE)
A = array(seq(1:4), c(1,2))
A
A = array(seq(1:4), c(2,2))
AI
A
A %*% A
solve(A) %*% A
a = c(1,2,3)
b = c(4,5,6)
rbind(a, c)
a
b
?rbind
rbind(c(a, b))
cbind(c(a, b))
a = array(seq(1:3))
a
rbind(a, a)
str(a)
str(b)
typeof(a)
typeof(b)
summary(a)
summary(b)
class(a)
class(b)
setwd("~/Google Drive/CUNY/git/DATA605/HW1")
u = c(0.5, 0.5)
v = c(3.0, -4.0)
uv_dot = u %*% v
uv_dot
u %*% v
t(v) %*% u
v = c(3.0, 4.0)
t(v) %*% u
u %*% v
u**2
u %*% u
a = c(4, 3)
a = c(3, 5)
a = c(3, 4)
a %*% a
sqrt(a %*% a)
u = c(0.5, 0.5)
v = c(3.0, 4.0)
uv_dot = u %*% v
uv_dot
u = c(0.5, 0.5)
v = c(3.0, 4.0)
uv_dot = u %*% v
uv_dot
# length of u
u_len = sqrt(sum(u**2))
u_len
#length of v
v_len = sqrt(sum(v**2))
v_len
3*u - 2*v
matrix(c(0.5,0.5))
a = matrix(c(0.5,0.5))
b = matrix(c(3, 4))
a %*% b
t(b) %*% a
# u.v = |u| * |v| * cos(theta)
# theta = arccos(u.v / (|u| * |v|))
theta = acos( uv_dot / ( u_len * v_len ) )
# convert from radians to degrees
theta = theta * 180 / pi
theta
E32 = matrix(c(1,0,0,0,1,0,0,-2,1),3,3,byrow = T)
E32
E21 = matrix(c(1,0,0,-2,1,0,0,0,1),3,3,byrow = T)
E32 %*% E21
E21
A = matrix(c(1,1,1,2,4,5,0,4,0),3,3,byrow = T)
E32 %*% E21 %*% A
solve(E21) %*% solve(E32)
solve(E21)
E21
L = solve(E21) %*% solve(E32)
U = E32 %*% E21
L %*% U
L %*% (U %*% A)
U
U = matrix(c(1,1,1,0,2,3,0,0,-6),3,3,byrow = T)
L %*% U
L
solve(L) %*% L
L %*% solve(L)
data(gala, package = 'faraway')
install.packages('faraway')
data(gala, package = 'faraway')
model.matrix( ~ Area + Elevation + Nearest + Scruz + Adjacent, gala)
head(data, 10)
head(gala, 10)
model.matrix( ~ Area + Elevation + Nearest + Scruz + Adjacent, gala)
x = model.matrix( ~ Area + Elevation + Nearest + Scruz + Adjacent, gala)
class(x)
y = gala$Species
xtxi = solve(t(x) %*% x)
xtxi
solve(crossprod(x,x), crossprod(x,y))
solve(xtxi) %*% t(x) %*% y
xtxi %*% t(x) %*% y
setwd("~/Google Drive/CUNY/git/DATA604/Week6")
x = seq(-1000, 0, 1)
plot(e^(2*x))
plot(exp(2*x))
exp(2*x)
x = seq(0, 1000, 1)
plot(exp(-2*x))
x = seq(-10, 0, 0.01)
plot(exp(2*x))
x = seq(0, 10, 0.01)
plot(exp(-2*x))
plot(x ~ exp(2*x))
plot(exp(2*x) ~ x)
x = 3
exp(2*x)/2
R = exp(2*x)/2
log(2*R)/2
exp(10000000)
exp(-10000000)
exp(0)
X = 5
R = -exp(-2*X)/2
R
-log(-2*R)/2
exp(0)
exp(0)/2
exp(-10)
exp(-1000000)
-exp(-1000000)
-exp(-2*0)
-exp(-2*0)/2
-exp(-2*10000000)/2
x1 = seq(-5, 0, 0.01)
exp(2*x1)
x2 = seq(0, 5, 0.01)
plot(c(exp(2*x1), exp(-2*x)), c(x1, x2))
x1 = seq(-5, 0, 0.01)
x2 = seq(0, 5, 0.01)
plot(c(exp(2*x1), exp(-2*x2)), c(x1, x2))
plot(c(exp(2*x1), exp(-2*x2)) ~ c(x1, x2))
R = runif(100000, -0.5, 0.5)
log(1)/2
log(0)/2
x = if(R < 0) { -log(-2*R)/2 }
x = c(if(R < 0) { -log(-2*R)/2 },
if(R > 0) {  log(2*R)/2) })
x = c(if(R < 0) { -log(-2*R)/2 },
if(R > 0) {  log(2*R)/2 })
par(mfrow = c(1, 2))
hist(x)
plot(ecdf(x))
x
if(R > 0) {  log(2*R)/2 }
x = seq(0,1000, 0.001)
exp(e^x)
plot(exp(x))
x = seq(0.0001,1000, 0.001)
plot(exp(x))
exp(1)
plot(exp(x) ~ x)
x = seq(0, 5, 0.001)
plot(exp(x))
plot(exp(x) ~ x)
x = seq(-5, 0, 0.001)
plot(exp(x) ~ x)
x = seq(0, 5, 0.001)
plot(exp(x) ~ x)
x = seq(-5, 0, 0.001)
plot(exp(x) ~ x)
x1 = seq(-5, 0, 0.01)
x2 = seq(0, 5, 0.01)
abline(c(exp(2*x1), exp(-2*x2)) ~ c(x1, x2))
abline(c(exp(2*x1), exp(-2*x2)) ~ c(x1, x2))
abline(c(exp(2*x1), exp(-2*x2)) ~ c(x1, x2))
plot(c(exp(2*x1), exp(-2*x2)) ~ c(x1, x2))
setwd("~/Google Drive/CUNY/git/DATA621/HW3")
crime = read.csv('crime-training-data.csv')
str(crime)
summary(crime)
crime$chas = factor(crime$chas, labels = c('not_bordered', 'bordered'))
crime$target = factor(crime$target, labels = c('below_median', 'above_median'))
str(crime)
library(caret)
set.seed(123)
# use cross validation to compare out-of-sample ROC for all models
# use the same folds for each model to ensure comparable results
myFolds = createFolds(crime$target, k = 10)
# confirm that folks preserve class distribution
table(crime$target) / nrow(crime)
table(crime$target[myFolds$Fold1]) / length(myFolds$Fold1)
myControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = TRUE,
savePredictions = TRUE, index = myFolds)  # used instead of method = 'cv', number = 10
model_glmnet = train(target ~ ., data = crime, metric = 'ROC', method = 'glmnet', trControl = myControl)
plot(model_glmnet)
summary(model_glmnet)
model_glmnet = train(target ~ ., data = crime, metric = 'ROC', method = 'glmnet',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glmnet)
model_glmnet$modelInfo
model_glmnet$modelInfo$parameters
model_glmnet$modelInfo$predictors
model_glmnet$modelInfo$predictors()
model_rf = train(target ~ ., data = crime, metric = 'ROC', method = 'ranger',
trControl = myControl)
model_list = list(
glmnet = model_glmnet,
rf = model_rf
)
resamps = resamples(model_list)
resamps = resamples(model_list)
resamps
resamps
summary(resamps)
install.packages("caretEnsemble")
library(caretEnsemble)
xyplot(resamps, metric = 'ROC')
densityplot(resamps, metric = 'ROC')
dotplot(resamps, metric = 'ROC')
model_glm = train(target ~ ., data = crime, metric = 'ROC', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm)
model_list = list(glm = model_glm,
glmnet = model_glmnet, rf = model_rf)
dotplot(resamps, metric = 'ROC')
resamps = resamples(model_list)
resamps
dotplot(resamps, metric = 'ROC')
summary(resamps)
summary(model_glmnet)
coef(model_glmnet)
model_glmnet$method
model_glmnet$results
model_glmnet$finalModel
summary(model_glmnet$finalModel)
model_glmnet$finalModel$beta
model_glmnet$finalModel$tuneValue
coef(model_glmnet$finalModel)
coef(model_glmnet$finalModel, s = 0.1)
crime[-1]
crime[1:5, -1]
crime[1:5, 1]
crime[1:5, 1:5]
crime[1:5, :-1]
crime[1:5, 1:(ncol(crime)-1)]
crime[1:5, 1:-ncol(crime)]
crime[1:5, -ncol(crime)]
cvfit = cv.glmnet(crime[1:5, -ncol(crime)], crime$target)
cvfit = cv.glmnet(crime[, -ncol(crime)], crime$target)
crime[, -ncol(crime)]
cvfit = cv.glmnet(crime[, -ncol(crime)], crime$target)
model_glmnet$finalModel$a0
model_glmnet$finalModel$df
model_glmnet$finalModel$lambda
model_glmnet$finalModel$tuneValue
coef(model_glmnet, lambda = model_glmnet$finalModel$tuneValue$lambda)
coef(model_glmnet, l = model_glmnet$finalModel$tuneValue$lambda)
coef(model_glmnet, s = model_glmnet$finalModel$tuneValue$lambda)
coef(model_glmnet, a = model_glmnet$finalModel$tuneValue$lambda)
coef(model_glmnet, a = 1)
coef(model_glmnet, a = 0.1)
model_glmnet = train(target ~ ., data = crime, metric = 'ROC', method = 'glmnet',
preProcess = c('center', 'scale'), trControl = myControl)
coef(model_glmnet, a = 0.1)
coef(model_glmnet, s = 0.1)
coef(model_glmnet)
coef(model_glm)
coef(model_glmnet)
coef(model_glmnet, s=0.1)
coef(model_glmnet$finalModel, s=0.1)
?coef
coef(model_glmnet$finalModel, s = model_glmnet$finalModel$tuneValue$lambda)
model_glm = train(target ~ ., data = crime, metric = 'ROC', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm)
model_glm_sig = train(target ~ nox + age + dis + rad + tax + ptratio + black + medv, data = crime,
preProcess = c('center', 'scale'), trControl = myControl)
model_glm_sig = train(target ~ nox + age + dis + rad + tax + ptratio + black + medv, data = crime,
preProcess = c('center', 'scale'), trControl = myControl)
# model using glmnet,
model_glm_sig = train(target ~ nox + age + dis + rad + tax + ptratio + black + medv, data = crime,
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig)
model_glm_sig = train(target ~ nox + age + dis + rad + tax + ptratio + black + medv, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig)
dotplot(resamps, metric = 'ROC')
model_list = list(glm_full = model_glm_full,
glm_sig = model_glm_sig,
glmnet = model_glmnet, rf = model_rf)
model_glm_full = train(target ~ ., data = crime, metric = 'ROC', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
model_glm_sig1 = train(target ~ nox + age + dis + rad + tax + ptratio + black + medv, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
model_list = list(glm_full = model_glm_full,
glm_sig1 = model_glm_sig1,
glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
summary(model_glm_sig1)
model_glm_sig2 = train(target ~ nox + age + dis + rad + tax + medv, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig2)
model_list = list(glm_full = model_glm_full,
glm_sig1 = model_glm_sig1,
glm_sig2 = model_glm_sig2
glmnet = model_glmnet, rf = model_rf)
model_list = list(glm_full = model_glm_full,
glm_sig1 = model_glm_sig1,
glm_sig2 = model_glm_sig2,
glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
summary(model_glm_sig2)
model_glm_sig3 = train(target ~ nox + rad + tax, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig3)
model_list = list(glm_full = model_glm_full, glm_sig1 = model_glm_sig1, glm_sig2 = model_glm_sig2, glm_sig3 = model_glm_sig3,
glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
coef(model_glmnet$finalModel, s = model_glmnet$finalModel$tuneValue$lambda)
model_glm_sig4 = train(target ~ nox + rad + age, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig4)
model_list = list(glm_full = model_glm_full, glm_sig1 = model_glm_sig1, glm_sig2 = model_glm_sig2, glm_sig3 = model_glm_sig3,
glm_sig4 = model_glm_sig4, glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
summary(model_glm_sig1)
model_glm_full = train(target ~ ., data = crime, metric = 'ROC', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_full)
model_glm_sig2 = train(target ~ nox + age + dis + rad + tax + ptratio + medv, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig2)
model_glm_sig3 = train(target ~ nox + age + rad + tax + ptratio + medv, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig3)
model_glm_sig4 = train(target ~ nox + rad, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
model_glm_sig4 = train(target ~ nox + rad, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig4)
model_list = list(glm_full = model_glm_full, glm_sig1 = model_glm_sig1, glm_sig2 = model_glm_sig2, glm_sig3 = model_glm_sig3,
glm_sig4 = model_glm_sig4, glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
summary(model_glm_sig4)
dotplot(resamps, metric = 'ROC')
final_model = train(target ~ nox + rad, data = crime, method = 'glm', preProcess = c('center', 'scale'))
summary(model_glm_sig4)
crime_test = read.csv('crime-test-data.csv')
crime_test = read.csv('crime-evaluation-data.csv')
pred = predict(final_model, newdata = crime_test)
pred
final_model = train(target ~ nox + rad, data = crime, method = 'glm', preProcess = c('center', 'scale'),
trControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = FALSE))
final_model = train(target ~ nox + rad, data = crime, metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'),
trControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = FALSE))
summary(model_glm_sig4)
pred = predict(final_model, newdata = crime_test)
pred
pred = predict(final_model, newdata = crime_test, type = 'response')
pred = predict(final_model, newdata = crime_test, type = 'prob')
pred
cbind(pred_class, pred_prob)
pred_class = predict(final_model, newdata = crime_test)
pred_prob = predict(final_model, newdata = crime_test, type = 'prob')
cbind(pred_class, pred_prob)
table(pred_class) / nrow(pred_class)
table(pred_class)
nrow(pred_class)
table(pred_class) / nrows(pred_class)
length(pred_class)
table(pred_class) / length(pred_class)
cbind(pred_class, pred_prob)
write.csv(cbind(pred_class, pred_prob), 'crime_evaluation-prediction.csv')
setwd('/Users/brucehao/Google Drive/CUNY/git/DAT608')
setwd('~/Google Drive/CUNY/git/DAT608')
getwd()
setwd('/Users/brucehao/Google Drive/CUNY/git/DATA608')
inc = read.csv('/Users/brucehao/Google Drive/CUNY/git/DATA608/inc5000_data.csv')
str(inc)
head(inc)
inc = read.csv('https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture1/Data/inc5000_data.csv')
str(inc)
library(dplyr)
library(dplyr)
library(tidyr)
library(ggplot2)
inc %>% group_by(State) %>%
summarise(n = n())
inc %>% group_by(State) %>%
summarise(n = n()) %>%
arrange(desc(n))
inc %>% group_by(State) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
ggplot(aes(x = n, y = State)) +
geom_bar()
inc %>% group_by(State) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
ggplot(aes(x = n, y = State)) +
geom_bar(stat = 'identity')
inc %>% group_by(State) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
ggplot(aes(x = State, y = n)) +
geom_bar(stat = 'identity') +
coord_flip()
inc %>% group_by(State) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
ggplot(aes(x = reorder(State, n), y = n)) +
geom_bar(stat = 'identity') +
coord_flip()
str(inc)
inc %>% filter(State == 'NY') %>%
filter(complete.cases()) %>%
group_by(Industry) %>%
summarise(avg_emp = mean(Employees))
inc %>% filter(State == 'NY') %>%
complete.cases() %>%
group_by(Industry) %>%
summarise(avg_emp = mean(Employees))
inc %>% filter(State == 'NY') %>%
complete.cases(.) %>%
group_by(Industry) %>%
summarise(avg_emp = mean(Employees))
inc %>% filter(State == 'NY') %>%
complete.cases(.) %>%
group_by(as.character(Industry)) %>%
summarise(avg_emp = mean(Employees))
inc %>% filter(State == 'NY') %>%
complete.cases(.) %>%
group_by(as.character(Industry)) %>%
summarise(avg_emp = mean(Employees))
inc %>% filter(State == 'NY') %>%
complete.cases(.)
inc %>% filter(State == 'NY') %>%
complete.cases(.) %>%
group_by(as.character(Industry))
inc %>% filter(State == 'NY') %>%
complete.cases(.) %>%
group_by(Industry)
inc %>% filter(State == 'NY') %>%
filter(complete.cases(.)) %>%
group_by(Industry) %>%
summarise(avg_emp = mean(Employees))
inc %>% filter(State == 'NY') %>%
filter(complete.cases(.)) %>%
ggplot(aes(x = Industry, y = Employees)) +
geom_boxplot()
inc %>% filter(State == 'NY') %>%
filter(complete.cases(.)) %>%
ggplot(aes(x = Industry, y = Employees)) +
geom_boxplot() +
coord_flip()
inc %>% filter(State == 'NY') %>%
filter(complete.cases(.)) %>%
filter(!(abs(Employees - median(Employees)) > 3*sd(Employees))) %>%
ggplot(aes(x = Industry, y = Employees)) +
geom_boxplot() +
coord_flip()
str(inc)
inc %>% group_by(Industry) %>%
summarise(total_rev = sum(Revenue), n_empl = sum(Employees)) %>%
mutate(rev_per_empl = total_rev / n_empl)
inc %>% group_by(Industry) %>%
summarise(total_rev = sum(Revenue), n_empl = sum(Employees)) %>%
mutate(rev_per_empl = total_rev / n_empl) %>%
ggplot(aes(x = Industry, y = rev_per_empl)) +
geom_bar(stat = 'identity') +
coord_flip()
inc %>% group_by(Industry) %>%
summarise(total_rev = sum(Revenue), n_empl = sum(Employees)) %>%
mutate(rev_per_empl = total_rev / n_empl) %>%
ggplot(aes(x = reorder(Industry, rev_per_empl), y = rev_per_empl)) +
geom_bar(stat = 'identity') +
coord_flip()
inc %>% group_by(Industry) %>%
filter(complete.cases(.)) %>%
summarise(total_rev = sum(Revenue), n_empl = sum(Employees)) %>%
mutate(rev_per_empl = total_rev / n_empl) %>%
ggplot(aes(x = reorder(Industry, rev_per_empl), y = rev_per_empl)) +
geom_bar(stat = 'identity') +
coord_flip()
inc %>% filter(complete.cases(.)) %>%
group_by(Industry) %>%
summarise(total_rev = sum(Revenue), n_empl = sum(Employees)) %>%
mutate(rev_per_empl = total_rev / n_empl) %>%
ggplot(aes(x = reorder(Industry, rev_per_empl), y = rev_per_empl)) +
geom_bar(stat = 'identity') +
coord_flip()
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/brucehao/Google Drive/CUNY/git/DATA608')
library(dplyr)
```{r message=FALSE, warning=FALSE}
```{r message=FALSE, warning=FALSE}
```{r messages=FALSE, warning=FALSE}
```{r warning=FALSE}
