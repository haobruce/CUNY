p2 = qry %>% filter(LegalEntityName == entity_name) %>%
arrange(desc(PctNAV)) %>%
ggplot(aes(x = Deal, y = PctNAV, fill = PrimaryAssetClass)) +
geom_bar(stat = 'identity') +
geom_text(aes(label = format(CalculatedReturn*100, digits = 1)), size = 3,
position = position_dodge(width = 1), vjust = -0.25) +
theme(axis.title.x=element_blank())
p2 = qry1 %>% filter(LegalEntityName == entity_name) %>%
arrange(desc(PctNAV)) %>%
ggplot(aes(x = DealCombinedName, y = PctNAV, fill = PrimaryAssetClass)) +
geom_bar(stat = 'identity') +
geom_text(aes(label = format(CalculatedReturn*100, digits = 1)), size = 3,
position = position_dodge(width = 1), vjust = -0.25) +
theme(axis.title.x=element_blank())
p2
p2 = qry1 %>% filter(LegalEntityName == entity_name) %>%
arrange(desc(PctNAV)) %>%
ggplot(aes(x = DealCombinedName, y = PctNAV, fill = PrimaryAssetClass)) +
geom_bar(stat = 'identity') +
geom_text(aes(label = format(CalculatedReturn*100, digits = 1)), size = 3,
position = position_dodge(width = 1), vjust = -0.25) +
theme(axis.title.x=element_blank()) +
theme(axis.text.x=element_blank())
p2
grid.arrange(p1, p2, nrow = 2, heights = c(2, 1))
p2 = qry1 %>% filter(LegalEntityName == entity_name) %>%
arrange(desc(PctNAV)) %>%
ggplot(aes(x = DealCombinedName, y = PctNAV, fill = PrimaryAssetClass)) +
geom_bar(stat = 'identity') +
geom_text(aes(label = format(CalculatedReturn*100, digits = 1)), size = 3,
position = position_dodge(width = 1), vjust = -0.25) +
theme(axis.title.x=element_blank()) +
theme(axis.text.x=element_blank())+
theme(legend.position = 'none')
grid.arrange(p1, p2, nrow = 2, heights = c(2, 1))
p1 = qry1 %>%
ggplot(aes(x = DealCombinedName, y = CalculatedReturn, fill = PrimaryAssetClass)) +
geom_bar(stat = 'identity') +
geom_text(aes(label = format(CalculatedReturn*100, digits = 1)), size = 3,
position = position_dodge(width = 1), vjust = -0.25) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.title.x = element_blank()) +
theme(legend.position = 'none')
p2 = qry1 %>% filter(LegalEntityName == entity_name) %>%
arrange(desc(PctNAV)) %>%
ggplot(aes(x = DealCombinedName, y = PctNAV, fill = PrimaryAssetClass)) +
geom_bar(stat = 'identity') +
geom_text(aes(label = format(CalculatedReturn*100, digits = 1)), size = 3,
position = position_dodge(width = 1), vjust = -0.25) +
theme(axis.title.x=element_blank()) +
theme(axis.text.x=element_blank())+
theme(legend.position = 'bottom')
grid.arrange(p1, p2, nrow = 2, heights = c(2, 1))
p1 = qry1 %>%
ggplot(aes(x = DealCombinedName, y = CalculatedReturn, fill = PrimaryAssetClass)) +
geom_bar(stat = 'identity') +
geom_text(aes(label = format(CalculatedReturn*100, digits = 1)), size = 3,
position = position_dodge(width = 1), vjust = -0.25) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.title.x = element_blank()) +
theme(legend.position = 'none') +
ylab('2016 Return')
p2 = qry1 %>% filter(LegalEntityName == entity_name) %>%
arrange(desc(PctNAV)) %>%
ggplot(aes(x = DealCombinedName, y = PctNAV, fill = PrimaryAssetClass)) +
geom_bar(stat = 'identity') +
geom_text(aes(label = format(CalculatedReturn*100, digits = 1)), size = 3,
position = position_dodge(width = 1), vjust = -0.25) +
theme(axis.title.x=element_blank()) +
theme(axis.text.x=element_blank())+
theme(legend.position = 'bottom') +
ylab('Weight @ 1/1/16')
grid.arrange(p1, p2, nrow = 2, heights = c(2, 1))
p2 = qry1 %>% filter(LegalEntityName == entity_name) %>%
arrange(desc(PctNAV)) %>%
ggplot(aes(x = DealCombinedName, y = PctNAV, fill = PrimaryAssetClass)) +
geom_bar(stat = 'identity') +
geom_text(aes(label = format(PctNAV*100, digits = 1)), size = 3,
position = position_dodge(width = 1), vjust = -0.25) +
theme(axis.title.x=element_blank()) +
theme(axis.text.x=element_blank())+
theme(legend.position = 'bottom') +
ylab('Weight @ 1/1/16')
grid.arrange(p1, p2, nrow = 2, heights = c(2, 1))
p2 = qry1 %>% filter(LegalEntityName == entity_name) %>%
arrange(desc(PctNAV)) %>%
ggplot(aes(x = DealCombinedName, y = PctNAV, fill = PrimaryAssetClass)) +
geom_bar(stat = 'identity') +
geom_text(aes(label = format(PctNAV*100, digits = 2)), size = 3,
position = position_dodge(width = 1), vjust = -0.25) +
theme(axis.title.x=element_blank()) +
theme(axis.text.x=element_blank())+
theme(legend.position = 'bottom') +
ylab('Weight @ 1/1/16')
grid.arrange(p1, p2, nrow = 2, heights = c(2, 1))
entity_name = 'The Skoll Foundation'
factor_names = qry %>% filter(LegalEntityName == entity_name) %>%
arrange(desc(PctNAV)) %>%
select(DealCombinedName)
qry1 = qry %>% filter(LegalEntityName == entity_name) %>%
mutate(DealCombinedName = factor(DealCombinedName, levels = factor_names$DealCombinedName))
p1 = qry1 %>%
ggplot(aes(x = DealCombinedName, y = CalculatedReturn, fill = PrimaryAssetClass)) +
geom_bar(stat = 'identity') +
geom_text(aes(label = format(CalculatedReturn*100, digits = 1)), size = 3,
position = position_dodge(width = 1), vjust = -0.25) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
axis.title.x = element_blank()) +
theme(legend.position = 'none') +
ylab('2016 Return')
p2 = qry1 %>% filter(LegalEntityName == entity_name) %>%
arrange(desc(PctNAV)) %>%
ggplot(aes(x = DealCombinedName, y = PctNAV, fill = PrimaryAssetClass)) +
geom_bar(stat = 'identity') +
geom_text(aes(label = format(PctNAV*100, digits = 2)), size = 3,
position = position_dodge(width = 1), vjust = -0.25) +
theme(axis.title.x=element_blank()) +
theme(axis.text.x=element_blank())+
theme(legend.position = 'bottom') +
ylab('Weight @ 1/1/16')
grid.arrange(p1, p2, nrow = 2, heights = c(2, 1))
source('G:/INVESTMENT TEAM/Invest Statements/Internal Reporting/R/Top20StartOfYear.R', echo=TRUE)
source('G:/INVESTMENT TEAM/Invest Statements/Internal Reporting/R/Top20StartOfYear.R', echo=TRUE)
qry1
qry1 %>% summarise(WtdAvgRtn = SUM(Weight * CalculatedReturn))
qry1 %>% summarise(WtdAvgRtn = SUM(Weight))
qry1 %>% group_by(LegalEntityName) %>% summarise(WtdAvgRtn = SUM(Weight * CalculatedReturn))
qry1 %>% group_by(LegalEntityName) %>% summarise(WtdAvgRtn = (Weight * CalculatedReturn))
qry1 %>% group_by(LegalEntityName)
qry1 %>% group_by(LegalEntityName) %>% summarise(WtdAvgRtn = SUM(PctNAV * CalculatedReturn))
qry1 %>% group_by(LegalEntityName) %>% summarise(WtdAvgRtn = SUM(PctNAV))
qry1 %>% group_by(LegalEntityName) %>% summarise(WtdAvgRtn = (PctNAV))
qry %>% group_by(LegalEntityName) %>% summarise(SUM = SUM(EndingValue))
qry1 %>% group_by(LegalEntityName) %>% summarise(WtdAvgRtn = sum(Weight * CalculatedReturn))
qry2 %>% group_by(LegalEntityName) %>% summarise(WtdAvgRtn = sum(Weight * CalculatedReturn))
qry %>% group_by(LegalEntityName) %>% summarise(WtdAvgRtn = sum(Weight * CalculatedReturn))
qry %>% mutate(avgWtd = mean(PctNAV, Weight)) %>%
group_by(LegalEntityName) %>%
summarise(WtdAvgRtn = sum(avgWtd * CalculatedReturn))
qry %>% mutate(avgWtd = (PctNAV + Weight)/2) %>%
group_by(LegalEntityName) %>%
summarise(WtdAvgRtn = sum(avgWtd * CalculatedReturn))
filename = 'C:/Users/bhao/Google Drive/CUNY/git/DATA602/cars.data.csv'
library(stringr)
str_extract_all(filename, "/")
str_extract_all(filename, "/[:alpha:]?")
str_extract_all(filename, "/([:alpha:]?)")
str_extract_all(filename, "/([:alpha:])?")
str_extract_all(filename, "/([:alpha:])+")
setwd("~/Google Drive/CUNY/git/DATA621/HW1")
library(caret)
library(dplyr)
library(ggplot2)
setwd("~/Google Drive/CUNY/git/DATA621/HW1")
library(dplyr)
library(ggplot2)
train_raw = read.csv("~/Google Drive/CUNY/git/DATA621/HW1/moneyball-training-data.csv")
setwd("~/Google Drive/CUNY/git/DATA621/HW1")
library(dplyr)
library(ggplot2)
train_raw = read.csv("~/Google Drive/CUNY/git/DATA621/HW1/moneyball-training-data.csv")
summary(train_raw)
par(mfrow=c(4, 4))
boxplot(train_raw[2], show.names=TRUE)
boxplot(train_raw[3], show.names=TRUE)
boxplot(train_raw[4], show.names=TRUE)
boxplot(train_raw[5], show.names=TRUE)
boxplot(train_raw[6], show.names=TRUE)
boxplot(train_raw[7], show.names=TRUE)
boxplot(train_raw[8], show.names=TRUE)
boxplot(train_raw[9], show.names=TRUE)
boxplot(train_raw[10], show.names=TRUE)
boxplot(train_raw[11], show.names=TRUE)
boxplot(train_raw[12], show.names=TRUE)
boxplot(train_raw[13], show.names=TRUE)
boxplot(train_raw[14], show.names=TRUE)
boxplot(train_raw[15], show.names=TRUE)
boxplot(train_raw[16], show.names=TRUE)
boxplot(train_raw[17], show.names=TRUE)
cor_df = data.frame(cbind(cor(train_raw[3:ncol(train_raw)], train_raw[2]),
cor(train_raw[3:ncol(train_raw)], train_raw[2], use = 'pairwise.complete.obs')))
names(cor_df) = c('With NAs', 'Ignoring NAs')
cor_df %>% tibble::rownames_to_column() %>% arrange(desc(`Ignoring NAs`))
train_clean = train_raw
train_clean = train_clean %>% mutate(TEAM_BATTING_1B = TEAM_BATTING_H - TEAM_BATTING_2B - TEAM_BATTING_3B - TEAM_BATTING_HR) %>%
select(-TEAM_BATTING_H)
train_clean %>% filter(TARGET_WINS == 0)
train_clean = train_clean %>% filter(TARGET_WINS != 0)
train_clean = train_clean %>% mutate(
TEAM_PITCHING_SO = ifelse(is.na(TEAM_PITCHING_SO), median(TEAM_PITCHING_SO, na.rm = TRUE), TEAM_PITCHING_SO),
TEAM_BATTING_SO = ifelse(is.na(TEAM_BATTING_SO), median(TEAM_BATTING_SO, na.rm = TRUE), TEAM_BATTING_SO))
train_clean = train_clean %>% mutate(
TEAM_BASERUN_SB = ifelse(is.na(TEAM_BASERUN_SB), median(TEAM_BASERUN_SB, na.rm = TRUE), TEAM_BASERUN_SB),
TEAM_BASERUN_CS = ifelse(is.na(TEAM_BASERUN_CS), median(TEAM_BASERUN_CS, na.rm = TRUE), TEAM_BASERUN_CS),
TEAM_FIELDING_DP = ifelse(is.na(TEAM_FIELDING_DP), median(TEAM_FIELDING_DP, na.rm = TRUE), TEAM_FIELDING_DP))
train_clean = train_clean %>% mutate(TEAM_BATTING_HBP_YN = ifelse(is.na(TEAM_BATTING_HBP), 0, 1))
summary(train_clean)
plot(density(train_clean$TEAM_PITCHING_H))
train_clean %>% filter(TEAM_PITCHING_H > quantile(TEAM_PITCHING_H, 0.75) + 1.5 * IQR(TEAM_PITCHING_H)) %>%
summarise(n = n())
train_clean = train_clean %>%
mutate('PITCHER_OUTLIER_YN' = ifelse(TEAM_PITCHING_H > quantile(TEAM_PITCHING_H, 0.75) + 1.5 * IQR(TEAM_PITCHING_H) |
TEAM_PITCHING_H < quantile(TEAM_PITCHING_H, 0.25) - 1.5 * IQR(TEAM_PITCHING_H),
1, 0))
train_clean = train_clean %>%
mutate('BATTING_OUTLIER_YN' = ifelse(TEAM_BATTING_1B > quantile(TEAM_BATTING_1B, 0.75) + 1.5 * IQR(TEAM_BATTING_1B) |
TEAM_BATTING_1B < quantile(TEAM_BATTING_1B, 0.25) - 1.5 * IQR(TEAM_BATTING_1B),
1, 0))
train_clean = train_clean %>%
mutate('BATTING_OUTLIER_YN' = ifelse(TEAM_BATTING_1B > quantile(TEAM_BATTING_1B, 0.75) + 1.5 * IQR(TEAM_BATTING_1B) |
TEAM_BATTING_1B < quantile(TEAM_BATTING_1B, 0.25) - 1.5 * IQR(TEAM_BATTING_1B),
1, 0))
train_clean = train_clean %>%
mutate('BASERUN_OUTLIER_YN' = ifelse(TEAM_BASERUN_SB > quantile(TEAM_BASERUN_SB, 0.75) + 1.5 * IQR(TEAM_BASERUN_SB) |
TEAM_BASERUN_SB < quantile(TEAM_BASERUN_SB, 0.25) - 1.5 * IQR(TEAM_BASERUN_SB),
1, 0))
train_clean = train_clean %>%
mutate('FIELDING_OUTLIER_YN' = ifelse(TEAM_FIELDING_E > quantile(TEAM_FIELDING_E, 0.75) + 1.5 * IQR(TEAM_FIELDING_E) |
TEAM_FIELDING_E < quantile(TEAM_FIELDING_E, 0.25) - 1.5 * IQR(TEAM_FIELDING_E),
1, 0))
train_clean = train_clean %>%
mutate(TARGET_WINS_Ratio = TARGET_WINS / 162,
TEAM_H_Ratio = (TEAM_BATTING_1B + TEAM_BATTING_2B + TEAM_BATTING_3B + TEAM_BATTING_HR) / TEAM_PITCHING_H,
TEAM_BASERUN_Ratio = TEAM_BASERUN_SB / TEAM_BASERUN_CS,
TEAM_HR_SO_Ratio = TEAM_BATTING_HR / ifelse(TEAM_BATTING_SO == 0, median(TEAM_BATTING_SO), TEAM_BATTING_SO))
summary(train_clean)
data.frame(cor(train_clean[3:ncol(train_clean)], train_clean[2])) %>%
tibble::rownames_to_column() %>%
arrange(desc(`TARGET_WINS`))
train_clean_ex_outliers = train_clean %>%
filter(PITCHER_OUTLIER_YN == 0, BATTING_OUTLIER_YN == 0, FIELDING_OUTLIER_YN ==0)
par(mfrow=c(4, 4))
boxplot(train_clean_ex_outliers[2], show.names=TRUE)
boxplot(train_clean_ex_outliers[3], show.names=TRUE)
boxplot(train_clean_ex_outliers[4], show.names=TRUE)
boxplot(train_clean_ex_outliers[5], show.names=TRUE)
boxplot(train_clean_ex_outliers[6], show.names=TRUE)
boxplot(train_clean_ex_outliers[7], show.names=TRUE)
boxplot(train_clean_ex_outliers[8], show.names=TRUE)
boxplot(train_clean_ex_outliers[9], show.names=TRUE)
boxplot(train_clean_ex_outliers[10], show.names=TRUE)
boxplot(train_clean_ex_outliers[11], show.names=TRUE)
boxplot(train_clean_ex_outliers[12], show.names=TRUE)
boxplot(train_clean_ex_outliers[13], show.names=TRUE)
boxplot(train_clean_ex_outliers[14], show.names=TRUE)
boxplot(train_clean_ex_outliers[15], show.names=TRUE)
boxplot(train_clean_ex_outliers[16], show.names=TRUE)
boxplot(train_clean_ex_outliers[17], show.names=TRUE)
train_model1 = train_clean
train_model1 = train_model1 %>% select(-INDEX, -TARGET_WINS_Ratio, -TEAM_BATTING_HBP)
model1 = lm(TARGET_WINS ~ ., data = train_model1)
summary(model1)
model1$results
train_model1 = train_model1 %>% select(-TEAM_HR_SO_Ratio, -TEAM_BASERUN_Ratio, -BASERUN_OUTLIER_YN, -BATTING_OUTLIER_YN,
-TEAM_PITCHING_SO, -TEAM_PITCHING_BB, -TEAM_PITCHING_H, -TEAM_BASERUN_CS,
-TEAM_BATTING_SO)
model1 = lm(TARGET_WINS ~ ., data = train_model1)
summary(model1)
model1$results
train_model2 = train_clean
train_model2 = train_model2 %>% select(TARGET_WINS_Ratio, TEAM_H_Ratio, TEAM_BASERUN_Ratio, TEAM_HR_SO_Ratio, TEAM_PITCHING_HR, PITCHER_OUTLIER_YN)
model2 = lm(TARGET_WINS_Ratio ~ ., data = train_model2)
summary(model2)
model2$results
model3 = lm(TARGET_WINS ~ ., data = train_model1)
summary(model3)
model3$results
simple_model = lm(TARGET_WINS ~ ., data = train_model1)
summary(simple_model)
simple_model$model
RMSE = mean((train_model1$TARGET_WINS - predict(simple_model, train_model1))^2)^0.5
vif(model1)
VIF(model1)
?var
?vif
vif(model)
library(car)
vif(model1)
cor(train_model1)
str(train_model1)
train_model1 = train_model1 %>% select(-TEAM_HR_SO_Ratio, -TEAM_BASERUN_Ratio, -BASERUN_OUTLIER_YN, -BATTING_OUTLIER_YN,
-TEAM_PITCHING_SO, -TEAM_PITCHING_BB, -TEAM_PITCHING_H, -TEAM_BASERUN_CS,
-TEAM_BATTING_SO)
train_model1 = train_clean
train_model1 = train_model1 %>% select(-INDEX, -TARGET_WINS_Ratio, -TEAM_BATTING_HBP)
model1 = lm(TARGET_WINS ~ ., data = train_model1)
summary(model1)
model1$results
train_model1 = train_model1 %>% select(-TEAM_HR_SO_Ratio, -TEAM_BASERUN_Ratio, -BASERUN_OUTLIER_YN, -BATTING_OUTLIER_YN,
-TEAM_PITCHING_SO, -TEAM_PITCHING_BB, -TEAM_PITCHING_H, -TEAM_BASERUN_CS,
-TEAM_BATTING_SO)
model1 = lm(TARGET_WINS ~ ., data = train_model1)
summary(model1)
model1$results
cor(train_model1)
train_model1 = train_model1 %>% select(-TEAM_HR_SO_Ratio, -TEAM_BASERUN_Ratio, -BASERUN_OUTLIER_YN, -BATTING_OUTLIER_YN,
-TEAM_PITCHING_SO, -TEAM_PITCHING_BB, -TEAM_PITCHING_H, -TEAM_BASERUN_CS,
-TEAM_BATTING_SO, -TEAM_H_Ratio)
train_model1 = train_clean
train_model1 = train_model1 %>% select(-INDEX, -TARGET_WINS_Ratio, -TEAM_BATTING_HBP)
model1 = lm(TARGET_WINS ~ ., data = train_model1)
summary(model1)
model1$results
train_model1 = train_model1 %>% select(-TEAM_HR_SO_Ratio, -TEAM_BASERUN_Ratio, -BASERUN_OUTLIER_YN, -BATTING_OUTLIER_YN,
-TEAM_PITCHING_SO, -TEAM_PITCHING_BB, -TEAM_PITCHING_H, -TEAM_BASERUN_CS,
-TEAM_BATTING_SO, -TEAM_H_Ratio)
model1 = lm(TARGET_WINS ~ ., data = train_model1)
summary(model1)
cor(train_model1)
vif(model1)
train_model1 = train_clean
train_model1 = train_model1 %>% select(-INDEX, -TARGET_WINS_Ratio, -TEAM_BATTING_HBP)
model1 = lm(TARGET_WINS ~ ., data = train_model1)
summary(model1)
model1$results
model1$results
setwd("~/Google Drive/CUNY/git/DATA621/HW1")
library(caret)
library(dplyr)
library(ggplot2)
train_model1 = train_clean
train_model1 = train_model1 %>% select(-INDEX, -TARGET_WINS_Ratio, -TEAM_BATTING_HBP)
model1 = train(TARGET_WINS ~ ., data = train_model1, method = 'lm')
summary(model1)
model1$results
train_model1 = train_model1 %>% select(-TEAM_HR_SO_Ratio, -TEAM_BASERUN_Ratio, -BASERUN_OUTLIER_YN, -BATTING_OUTLIER_YN,
-TEAM_PITCHING_SO, -TEAM_PITCHING_BB, -TEAM_PITCHING_H, -TEAM_BASERUN_CS,
-TEAM_BATTING_SO, -TEAM_H_Ratio)
model1 = train(TARGET_WINS ~ ., data = train_model1, method = 'lm')
summary(model1)
model1$results
train_model1 = train_clean
train_model1 = train_model1 %>% select(-INDEX, -TARGET_WINS_Ratio, -TEAM_BATTING_HBP)
model1 = train(TARGET_WINS ~ ., data = train_model1, method = 'lm')
summary(model1)
model1$results
train_model1 = train_model1 %>% select(-TEAM_HR_SO_Ratio, -TEAM_BASERUN_Ratio, -BASERUN_OUTLIER_YN, -BATTING_OUTLIER_YN,
-TEAM_PITCHING_SO, -TEAM_PITCHING_BB, -TEAM_PITCHING_H, -TEAM_BASERUN_CS,
-TEAM_BATTING_SO, -TEAM_H_Ratio, -TEAM_PITCHING_HR)
model1 = train(TARGET_WINS ~ ., data = train_model1, method = 'lm')
summary(model1)
model1$results
outlierTest(model1)
vif(model1)
varImp(model1)
train_model1 = train_clean
train_model1 = train_model1 %>% select(-INDEX, -TARGET_WINS_Ratio, -TEAM_BATTING_HBP)
model1 = train(TARGET_WINS ~ ., data = train_model1, method = 'lm')
summary(model1)
model1$results
train_model1 = train_model1 %>% select(-TEAM_HR_SO_Ratio, -TEAM_BASERUN_Ratio, -BASERUN_OUTLIER_YN, -BATTING_OUTLIER_YN,
-TEAM_PITCHING_SO, -TEAM_PITCHING_BB, -TEAM_PITCHING_H, -TEAM_BASERUN_CS,
-TEAM_BATTING_SO)
model1 = train(TARGET_WINS ~ ., data = train_model1, method = 'lm')
summary(model1)
model1$results
varImp(model1)
a = matrix(c(1, 0, 0, 1), 2, 2)
a
b = matrix(c(4, 1, 2, 2))
b
b = matrix(c(4, 1, 2, 2), 2, 2)
a %*% b
b %*% a
b = matrix(c(4, 1, 2, 2), 2, 2, byrow = T)
a %*% b
b %*% a
A = matrix(c(1,0,1,1,1,3,1,4), nrow = 4, byrow = T)
A
b = matrix(c(0,8,8,20), nrow = 4)
b
solve(t(A) %*% A) %*% b
solve(t(A) %*% A) %*% t(A) %*% b
data.frame(y = c(0,8,8,20), x1 = c(1,1,1,1), x2 = c(0,1,3,4))
df = data.frame(y = c(0,8,8,20), x1 = c(1,1,1,1), x2 = c(0,1,3,4))
model = lm(y ~ ., data = df)
model
summary(model)
df = data.frame(y = c(0,8,8,20), x = c(1,1,1,1))
model = lm(y ~ ., data = df)
model
df
df = data.frame(y = c(0,8,8,20), x = c(0,1,3,4))
model = lm(y ~ ., data = df)
model
setwd("~/Google Drive/CUNY/git/DATA605/HW5")
setwd("~/Google Drive/CUNY/git/DATA605/HW5")
A = matrix(c(1,1,1,1,0,1,3,4), nrow = 4)
A
b = matrix(c(0,8,8,20), nrow = 4)
t(A) %*% A
t(A) %*% b
x_hat = solve(t(A) %*% A) %*% t(A) %*% b
x_hat
sum((b - x_hat)^2)
x_hat
sum((b - A %*% x_hat)^2)
A[,2]
df = data.frame(y = b, x = A[,2])
model = lm(y ~ ., data = df)
model$residuals^2
sum(model$residuals^2)
p = matrix(c(1,5,13,17), nrow = 4)
p
x = solve(A) %*% p
x
x = solve(t(A) %*% A) %*% t(A) %*% p
x
sum((p - A %*% x)^2)
b - p
e = b - p
A %*% e
e
t(A) %*% e
dot(A, e)
A * e
product(A, e)
?"%*%"
A %*% e
A
e
A[,2] %*% e
t(A[,2]) %*% e
t(p) %*% e
t(A[,1]) * e
t(A[,1]) %*% e
load('/assign5/auto-mpg.data')
load('~/assign5/auto-mpg.data')
load('auto-mpg.data')
load('/auto-mpg.data')
load('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg.data')
car = load('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg.data')
car = load('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg')
car = load('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg.Data')
car = load('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg.data')
source('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg.data')
car = source('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg.data')
source('~/.active-rstudio-document', echo=TRUE)
source('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg-v2.data')
source('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg-v2')
source('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg-v2.data')
read.csv('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg-v2.data')
df = read.csv('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg.data', header = F)
head(df)
library(stringr)
str_split(df, ' ')
head(df)
read.delim('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg.data', header = F)
df = read.delim('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg.data', header = F)
head(df)
?read.delim
read.delim('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg.data', header = F, sep = "")
df = read.delim('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg.data', header = F, sep = "")
head(df)
names(df) = c('displacement', 'horsepwoer', 'weight', 'acceleration', 'mpg')
head(df)
A = matrix(df[,1:4])
A
A = data.matrix(df[,1:4])
A
b = data.matrix(df[,5])
str(df)
rep(1, nrow(A)
rep(1, nrow(A))
nrow(A)
rep(1, 4)
rep(1, nrow(A))
A = cbind(rep(1, nrow(A)), A)
A
x_hat = solve(t(A) %*% A) %*% t(A) %*% b
x_hat
df = read.delim('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg.data', header = F, sep = "")
names(df) = c('displacement', 'horsepower', 'weight', 'acceleration', 'mpg')
df = read.delim('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg.data', header = F, sep = "")
names(df) = c('displacement', 'horsepower', 'weight', 'acceleration', 'mpg')
# for verification purposes
model = lm(mpg ~ ., data = df)
# convert data frame to A and b matrices
A = data.matrix(df[,1:4])
# add column of 1s for intercept term
A = cbind(rep(1, nrow(A)), A)
b = data.matrix(df[,5])
# calculate x_hat
x_hat = solve(t(A) %*% A) %*% t(A) %*% b
model$coefficients
x_hat
model$coefficients
SSE = sum((b - A %*% x_hat)^2)
SSE
summary(model)
df[-'mpg']
df[,-'mpg']
df[,1:4]
predict(model, df[,1:4])
sum(b - predict(model, df[,1:4]))^2
sum((b - (A %*% x_hat))^2)
anova(model)
df = read.delim('~/Google Drive/CUNY/git/DATA605/HW5/assign5/auto-mpg.data', header = F, sep = "")
names(df) = c('displacement', 'horsepower', 'weight', 'acceleration', 'mpg')
# for verification purposes
model = lm(mpg ~ ., data = df)
# convert data frame to A and b matrices
A = data.matrix(df[,1:4])
# add column of 1s for intercept term
A = cbind(rep(1, nrow(A)), A)
b = data.matrix(df[,5])
# calculate x_hat
x_hat = solve(t(A) %*% A) %*% t(A) %*% b
x_hat
model$coefficients
SSE = sum((b - A %*% x_hat)^2)
anova(model)
