install.packages('dplyr')
install.packages("tidyr")
install.packages("ggplot2")
install.packages("ggthemes")
install.packages("shiny")
setwd("~/Google Drive/CUNY/git/DATA605/HW1")
A = matrix(seq(1, 6), nrow = 2, byrow = TRUE)
B = matrix(seq(12, 7), nrow = 2)
A
B
A %*% t(B)
t(A) %*% B
C = matrix(c(1, 0, -3, 1), nrow = 2, byrow = TRUE)
C
solve(C)
C %*% solve(C)
solve(C) %*% C
A = matrix(c(1,2,3,1,1,1,2,0,1) nrow = 3)
A = matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3)
A
E21 = matrix(c(1,-2,0,0,1,0,0,0,1), nrow = 3)
E21
E21 %*% A
E31 = matrix(c(1,0,-3,0,1,0,0,0,1), nrow = 3)
E31
E31 %*% E21 %*% A
E32 = matrix(c(1, 0,0,0,1,-2,0,0,1), nrow = 3)
E32
E32 %*% E31 %*% E23 %*% A
E32 %*% E31 %*% E21 %*% A
L = solve(E32 %*% E31 %*% E21)
L
solve(E21 %*% E31 %*% E32)
L * U
U = E32 %*% E31 %*% E21 %*% A
L %*% U
A
L
L %*% solve(L)
solve(L) %*% L
L
A
A %*% solve(A)
solve(A) %*% A
A
U
U %*% solve(U)
solve(U) %*% U
?array
A = array(c(1,2), c(3,4))
A
array(c(1,2))
array(c(1,2), 2)
array(c(1,2), 2, 3)
array(seq(1:4), 2
)
array(seq(1:4))
array(seq(1:4), c(2,2))
array(seq(1:4), c(2,2), byrow=TRUE)
A = array(seq(1:4), c(1,2))
A
A = array(seq(1:4), c(2,2))
AI
A
A %*% A
solve(A) %*% A
a = c(1,2,3)
b = c(4,5,6)
rbind(a, c)
a
b
?rbind
rbind(c(a, b))
cbind(c(a, b))
a = array(seq(1:3))
a
rbind(a, a)
str(a)
str(b)
typeof(a)
typeof(b)
summary(a)
summary(b)
class(a)
class(b)
setwd("~/Google Drive/CUNY/git/DATA605/HW1")
u = c(0.5, 0.5)
v = c(3.0, -4.0)
uv_dot = u %*% v
uv_dot
u %*% v
t(v) %*% u
v = c(3.0, 4.0)
t(v) %*% u
u %*% v
u**2
u %*% u
a = c(4, 3)
a = c(3, 5)
a = c(3, 4)
a %*% a
sqrt(a %*% a)
u = c(0.5, 0.5)
v = c(3.0, 4.0)
uv_dot = u %*% v
uv_dot
u = c(0.5, 0.5)
v = c(3.0, 4.0)
uv_dot = u %*% v
uv_dot
# length of u
u_len = sqrt(sum(u**2))
u_len
#length of v
v_len = sqrt(sum(v**2))
v_len
3*u - 2*v
matrix(c(0.5,0.5))
a = matrix(c(0.5,0.5))
b = matrix(c(3, 4))
a %*% b
t(b) %*% a
# u.v = |u| * |v| * cos(theta)
# theta = arccos(u.v / (|u| * |v|))
theta = acos( uv_dot / ( u_len * v_len ) )
# convert from radians to degrees
theta = theta * 180 / pi
theta
E32 = matrix(c(1,0,0,0,1,0,0,-2,1),3,3,byrow = T)
E32
E21 = matrix(c(1,0,0,-2,1,0,0,0,1),3,3,byrow = T)
E32 %*% E21
E21
A = matrix(c(1,1,1,2,4,5,0,4,0),3,3,byrow = T)
E32 %*% E21 %*% A
solve(E21) %*% solve(E32)
solve(E21)
E21
L = solve(E21) %*% solve(E32)
U = E32 %*% E21
L %*% U
L %*% (U %*% A)
U
U = matrix(c(1,1,1,0,2,3,0,0,-6),3,3,byrow = T)
L %*% U
L
solve(L) %*% L
L %*% solve(L)
data(gala, package = 'faraway')
install.packages('faraway')
data(gala, package = 'faraway')
model.matrix( ~ Area + Elevation + Nearest + Scruz + Adjacent, gala)
head(data, 10)
head(gala, 10)
model.matrix( ~ Area + Elevation + Nearest + Scruz + Adjacent, gala)
x = model.matrix( ~ Area + Elevation + Nearest + Scruz + Adjacent, gala)
class(x)
y = gala$Species
xtxi = solve(t(x) %*% x)
xtxi
solve(crossprod(x,x), crossprod(x,y))
solve(xtxi) %*% t(x) %*% y
xtxi %*% t(x) %*% y
A = matrix(c(1,2,3,0,4,5,0,0,6),3,3,byrow = TRUE)
e = matrix(c(16,25,10,2,3,0,1,0,0),3,3,byrow = TRUE)
S = matrix(c(16,25,10,2,3,0,1,0,0),3,3,byrow = TRUE)
A %*% S
A
S
S = matrix(c(16,25,10,2,3,0,1,0,0),3,3,byrow = FALSE)
A
S
A %*% S
lambda = c(6,4,1)
lambda
diag(lambda)
S %*% diag(lambda)
solve(S) %*% diag(lambda) %*% S
S %*% diag(lambda) %*% solve(S)
eigen(A)
A = matrix(c(1,2,3,-1,0,4),2,3,byrow = TRUE)
eigen(A %*% t(A))
eigen(t(A) %*% A)
?svd
svd(A)
U = eigen(A %*% t(A))
V = eigen(t(A) %*% A)
U
V = eigen(t(A) %*% A)$vectors
V
U = eigen(A %*% t(A))$vectors
D = eigen(t(A) %*% A)$values
D
D = diag(D)
D
t(A) %*% A
V %*% D %*% t(V)
svd(A)
U
D
D
V
svd(A)$d **2
setwd("~/Google Drive/CUNY/git/DATA605/HW4")
setwd("~/Google Drive/CUNY/git/DATA605/HW4")
A = matrix(c(1,2,3,-1,0,4), 3, 3, byrow = TRUE)
X = A %*% t(A)
Y = t(A) %*% A
V = eigen(X)$vectors
U = eigen(Y)$vectors
D = diag(eigen(X)$values)
X
X
V %*% D %*% t(V)
identity(3)
I = diag(c(1,1,1))
I
c(3,2,1) %*% I
t(c(3,2,1)) %*% I
t(c(3,2,1)) * I
c(3,2,1) * I
svd(A)
U
svd(A)
eigen(X)$values
eigen(Y)$values
eigen(X)$values
A = matrix(c(1,2,3,-1,0,4), 3, 3, byrow = TRUE)  # create matrix A
X = A %*% t(A)  # matrix X = AAt
Y = t(A) %*% A  # matrix Y = AtA
V = eigen(X)$vectors  # matrix V = eigenvectors of X
U = eigen(Y)$vectors  # matrix Y = eigenvectors of Y
D = eigen(X)$values  # D = eigenvalues of X and Y
d = svd(A)$d  # squareroots of eigenvalues of X and Y
u = svd(A)$u  # eigenvectors of X as per svd function
v = svd(A)$v  # eigenvectors of X as per svd function
identical(U, u)
U == u
U
u
svd(A)
A = matrix(c(1,2,3,-1,0,4), 2, 3, byrow = TRUE)  # create matrix A
X = A %*% t(A)  # matrix X = AAt
Y = t(A) %*% A  # matrix Y = AtA
V = eigen(X)$vectors  # matrix V = eigenvectors of X
U = eigen(Y)$vectors  # matrix Y = eigenvectors of Y
D = eigen(X)$values  # D = eigenvalues of X and Y
d = svd(A)$d  # squareroots of eigenvalues of X and Y
u = svd(A)$u  # eigenvectors of X as per svd function
v = svd(A)$v  # eigenvectors of X as per svd function
U == u
U
u
A = matrix(c(1,2,3,-1,0,4), 2, 3, byrow = TRUE)  # create matrix A
X = A %*% t(A)  # matrix X = AAt
Y = t(A) %*% A  # matrix Y = AtA
V = eigen(X)$vectors  # matrix V = eigenvectors of X
U = eigen(Y)$vectors  # matrix Y = eigenvectors of Y
D = eigen(X)$values  # D = eigenvalues of X and Y
d = svd(A)$d  # squareroots of eigenvalues of X and Y
u = svd(A)$u  # eigenvectors of X as per svd function
v = svd(A)$v  # eigenvectors of X as per svd function
U
V
D
u
v
d
A = matrix(c(1,2,3,-1,0,4), 2, 3, byrow = TRUE)  # create matrix A
X = A %*% t(A)  # matrix X = AAt
Y = t(A) %*% A  # matrix Y = AtA
U = eigen(X)$vectors  # matrix U = eigenvectors of X
V = eigen(Y)$vectors  # matrix V = eigenvectors of Y
D = eigen(X)$values  # D = eigenvalues of X and Y
d = svd(A)$d  # squareroots of eigenvalues of X and Y
u = svd(A)$u  # eigenvectors of X as per svd function
v = svd(A)$v  # eigenvectors of X as per svd function
U
V
D
u
v
d
U == u
D == d^2
A = matrix(c(1,2,3,-1,0,4), 2, 3, byrow = TRUE)  # create matrix A
X = A %*% t(A)  # matrix X = AAt
Y = t(A) %*% A  # matrix Y = AtA
U = eigen(X)$vectors  # matrix U = eigenvectors of X
V = eigen(Y)$vectors  # matrix V = eigenvectors of Y
D = eigen(X)$values  # D = eigenvalues of X and Y
d = svd(A)$d  # squareroots of eigenvalues of X and Y
u = svd(A)$u  # eigenvectors of X as per svd function
v = svd(A)$v  # eigenvectors of X as per svd function
U
V
D
u
v
d^2
U == -1*u
U
u
?svd
V
v
d^2
D
A = matrix(c(1,3,5,8,2,3,5,2,6,2,4,5,1), nrow = 3)
A = matrix(c(1,3,5,8,2,3,5,2,6), nrow = 3)
A
solve(A)
det(A)
?det
C = solve(A) %*% diag(det(A))
diag(det(A))
C = solve(A) %*% diag(rep(det(A), 3)
det(A)
C = solve(A) %*% diag(rep(det(A), 3))
C
diag(rep(det(A), 3))
A %*% C
solve(A)
A %*% t(C)
solve(A)
C = t(solve(A) %*% diag(rep(det(A), 3)))
A %*% C
solve(A)
A %*% t(C)
solve(A)
t(C) / det(A)
solve(A)
factorize_matrix = function(A) {
U = A
L = diag(nrow(A))
c = 1
for (e in 2:nrow(A)) {  # loop through n - 1 elements
for (r in e:nrow(A)) {  # loop through n - 1 - e rows
multiplier = U[r, c]  / U[e - 1, c]
U[r,] = U[r,] - multiplier * U[e - 1,]
L[r, c] = multiplier
}
c = c + 1
}
return(list('L' = L, 'U' = U))
}
factorize_matrix(A)
t(C)
t(C) / det(A)
solve(A)
factorize_matrix(A)
C
det(A[2:3, 2:3])
length(A)
C = matrix(rep(0, length(A)), nrow(A), ncol(A))
C
A[-1:-1]
A
A[-1,-1]
A[-2,-2]
myinverse = function(A) {
C = matrix(rep(0, length(A)), nrow(A), ncol(A))
for (j in 1:ncol(A)) {
for (i in 1:nrow(A)) {
C[i, j] = (-1)^(i+j) * det(A[-i, -j])
}
}
}
myinverse = function(A) {
C = matrix(rep(0, length(A)), nrow(A), ncol(A))
for (j in 1:ncol(A)) {
for (i in 1:nrow(A)) {
C[i, j] = (-1)^(i+j) * det(A[-i, -j])
}
}
return(C)
}
C = t(solve(A) %*% diag(rep(det(A), 3)))
C
myinverse(A)
myinverse = function(A) {
C = matrix(rep(0, length(A)), nrow(A), ncol(A))
for (j in 1:ncol(A)) {
for (i in 1:nrow(A)) {
C[i, j] = (-1)^(i+j) * det(A[-i, -j])
}
}
return(t(C) / det(A))
}
myinverse(A)
solve(A)
solve(A) == myinverse(A)
round(solve(A), 3)
round(solve(A), 3) == round(myinverse(A))
round(solve(A), 3) == round(myinverse(A), 3)
round(solve(A), 6) == round(myinverse(A), 6)
B = myinverse(A)
A %*% B
A = matrix(c(1,3,5,8,2,3,5,2,6,2,4,5,1,3,7,8), nrow = 4)
myinverse = function(A) {
C = matrix(rep(0, length(A)), nrow(A), ncol(A))
for (j in 1:ncol(A)) {
for (i in 1:nrow(A)) {
C[i, j] = (-1)^(i+j) * det(A[-i, -j])
}
}
return(t(C) / det(A))
}
B = myinverse(A)
A %*% B
A = matrix(c(1,3,5,8,2,3,5,2,6,2,4,5,1,3,7,8), nrow = 4)
myinverse = function(A) {
C = matrix(rep(0, length(A)), nrow(A), ncol(A))
for (j in 1:ncol(A)) {
for (i in 1:nrow(A)) {
C[i, j] = (-1)^(i+j) * det(A[-i, -j])
}
}
return(t(C) / det(A))
}
B = myinverse(A)
A %*% B
round(A %*% B, 6)
