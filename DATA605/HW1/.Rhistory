A = matrix(c(1, 1, 3,
2, -1, 5,
-1, -2, 4),
nrow = 3, ncol = 3)
A
A = matrix(c(1, 1, 3,
2, -1, 5,
-1, -2, 4),
nrow = 3, ncol = 3, byrow = T)
A
b = matrix(c(1, 2, 6), nrow = 3, ncol = 1)
b
t(A) * A
A * t(A)
A %*% t(A)
t(A) %*% A
t(A)
t(A) %*% A
A %*% t(A)
t(A) %*% A
A %*% t(A)
b %*% t(A)
t(A) %*% b
t(A) %*% A
solv(A) %*% A
solve(A) %*% A
solve(A) %*% b
A[1,1]
A
A[2, 1]
row_2_factor = A[2, 1] / A[1, 1]
row_2_factor
A[2]
A[2, ]
A[2, ] = A[2, ] - row_2_factor * A[2, ]
A[2, ]
A = matrix(c(1, 1, 3,
2, -1, 5,
-1, -2, 4),
nrow = 3, ncol = 3, byrow = T)
row_2_factor = A[2, 1] / A[1, 1]
A[2, ] = A[2, ] - row_2_factor * A[1, ]
A
row_3_factor = A[3, 2] / A[2, 2]
A[3, ] = A[3, ] - row_3_factor * A[2, ]
A
2_1_factor = A[2, 1] / A[1, 1]
A = matrix(c(1, 1, 3,
2, -1, 5,
-1, -2, 4),
nrow = 3, ncol = 3, byrow = T)
factor_2_1 = A[2, 1] / A[1, 1]
A[2, ] = A[2, ] - factor_2_1 * A[1, ]
factor_3_1 = A[3, 1] / A[1, 1]
A[3, ] = A[3, ] - factor_3_1 * A[1, ]
A
factor_3_2 = A[3, 2] / A[2, 2]
A[3, ] = A[3, ] - factor_3_2 * A[2, ]
A
solution = matrix(c(0, 0, 0), nrow = 3, ncol = 1)
solution[3] = b[3] / A[3, 3]
solution
A = matrix(c(1, 1, 3,
2, -1, 5,
-1, -2, 4),
nrow = 3, ncol = 3, byrow = T)
b = matrix(c(1, 2, 6), nrow = 3, ncol = 1)
solve(A) %*% b
solution = matrix(c(0, 0, 0), nrow = 3, ncol = 1)
factor_2_1 = A[2, 1] / A[1, 1]
A[2, ] = A[2, ] - factor_2_1 * A[1, ]
factor_3_1 = A[3, 1] / A[1, 1]
A[3, ] = A[3, ] - factor_3_1 * A[1, ]
factor_3_2 = A[3, 2] / A[2, 2]
A[3, ] = A[3, ] - factor_3_2 * A[2, ]
solution[3] = b[3] / A[3, 3]
A
solve(A) %*% b
A
A = matrix(c(1, 1, 3,
2, -1, 5,
-1, -2, 4),
nrow = 3, ncol = 3, byrow = T)
solve(A) %*% b
factor_2_1 = A[2, 1] / A[1, 1]
A[2, ] = A[2, ] - factor_2_1 * A[1, ]
factor_3_1 = A[3, 1] / A[1, 1]
A[3, ] = A[3, ] - factor_3_1 * A[1, ]
factor_3_2 = A[3, 2] / A[2, 2]
A[3, ] = A[3, ] - factor_3_2 * A[2, ]
solution[3] = b[3] / A[3, 3]
A
solve(A) %*% b
A = matrix(c(1, 1, 3,
2, -1, 5,
-1, -2, 4),
nrow = 3, ncol = 3, byrow = T)
factor_2_1 = A[2, 1] / A[1, 1]
A[2, ] = A[2, ] - factor_2_1 * A[1, ]
b[2] = b[2] - factor_2_1 * b[2]
factor_3_1 = A[3, 1] / A[1, 1]
A[3, ] = A[3, ] - factor_3_1 * A[1, ]
b[3] = b[3] - factor_3_1 * b[3]
factor_3_2 = A[3, 2] / A[2, 2]
A[3, ] = A[3, ] - factor_3_2 * A[2, ]
b[3] = b[3] - factor_3_2 * b[3]
solution[3] = b[3] / A[3, 3]
solution
A
b
A = matrix(c(1, 1, 3,
2, -1, 5,
-1, -2, 4),
nrow = 3, ncol = 3, byrow = T)
b = matrix(c(1, 2, 6), nrow = 3, ncol = 1)
solve_by_elim = function(A, b) {
# placeholder for solution
solution = matrix(c(0, 0, 0), nrow = 3, ncol = 1)
# solve first pivot
factor_2_1 = A[2, 1] / A[1, 1]
A[2, ] = A[2, ] - factor_2_1 * A[1, ]
b[2] = b[2] - factor_2_1 * b[1]
factor_3_1 = A[3, 1] / A[1, 1]
A[3, ] = A[3, ] - factor_3_1 * A[1, ]
b[3] = b[3] - factor_3_1 * b[1]
# solve second pivot
factor_3_2 = A[3, 2] / A[2, 2]
A[3, ] = A[3, ] - factor_3_2 * A[2, ]
b[3] = b[3] - factor_3_2 * b[2]
# backsolve
solution[3] = b[3] / A[3, 3]
}
solve_by_elim(A, b)
solution = matrix(c(0, 0, 0), nrow = 3, ncol = 1)
factor_2_1 = A[2, 1] / A[1, 1]
A[2, ] = A[2, ] - factor_2_1 * A[1, ]
b[2] = b[2] - factor_2_1 * b[1]
factor_3_1 = A[3, 1] / A[1, 1]
A[3, ] = A[3, ] - factor_3_1 * A[1, ]
b[3] = b[3] - factor_3_1 * b[1]
factor_3_2 = A[3, 2] / A[2, 2]
A[3, ] = A[3, ] - factor_3_2 * A[2, ]
b[3] = b[3] - factor_3_2 * b[2]
solution[3] = b[3] / A[3, 3]
solution
solution[2] = ( b[2] - A[2, 3] * solution[3] ) / A[2, 2]
solution
solution[1] = ( b[1] - A[1, 3] * solution[3] - A[1, 2] * solution[2] ) / A[1, 1]
solution
solve_by_elim = function(A, b) {
# placeholder for solution
solution = matrix(c(0, 0, 0), nrow = 3, ncol = 1)
# solve first pivot
factor_2_1 = A[2, 1] / A[1, 1]
A[2, ] = A[2, ] - factor_2_1 * A[1, ]
b[2] = b[2] - factor_2_1 * b[1]
factor_3_1 = A[3, 1] / A[1, 1]
A[3, ] = A[3, ] - factor_3_1 * A[1, ]
b[3] = b[3] - factor_3_1 * b[1]
# solve second pivot
factor_3_2 = A[3, 2] / A[2, 2]
A[3, ] = A[3, ] - factor_3_2 * A[2, ]
b[3] = b[3] - factor_3_2 * b[2]
# backsolve
solution[3] = b[3] / A[3, 3]
solution[2] = ( b[2] - A[2, 3] * solution[3] ) / A[2, 2]
solution[1] = ( b[1] - A[1, 3] * solution[3] - A[1, 2] * solution[2] ) / A[1, 1]
return(solution)
}
A = matrix(c(1, 1, 3,
2, -1, 5,
-1, -2, 4),
nrow = 3, ncol = 3, byrow = T)
b = matrix(c(1, 2, 6), nrow = 3, ncol = 1)
solve_by_elim(A, b)
solution_elim = solve_by_elim(A, b)
solution_elim
identical(solution_elim, solution_solve)
solution_solve = solve(A) %*% b
identical(solution_elim, solution_solve)
A = matrix(c(1, 1, 3,
2, -1, 5,
-1, -2, 4),
nrow = 3, ncol = 3, byrow = T)
b = matrix(c(1, 2, 6), nrow = 3, ncol = 1)
solve_by_elim = function(A, b) {
# placeholder for solution
solution = matrix(c(0, 0, 0), nrow = 3, ncol = 1)
# solve first pivot
factor_2_1 = A[2, 1] / A[1, 1]
A[2, ] = A[2, ] - factor_2_1 * A[1, ]
b[2] = b[2] - factor_2_1 * b[1]
factor_3_1 = A[3, 1] / A[1, 1]
A[3, ] = A[3, ] - factor_3_1 * A[1, ]
b[3] = b[3] - factor_3_1 * b[1]
# solve second pivot
factor_3_2 = A[3, 2] / A[2, 2]
A[3, ] = A[3, ] - factor_3_2 * A[2, ]
b[3] = b[3] - factor_3_2 * b[2]
# backsolve
solution[3] = b[3] / A[3, 3]
solution[2] = ( b[2] - A[2, 3] * solution[3] ) / A[2, 2]
solution[1] = ( b[1] - A[1, 3] * solution[3] - A[1, 2] * solution[2] ) / A[1, 1]
return(solution)
}
solution_elim = solve_by_elim(A, b)
solution_elim
# check - use solve to invert matrix A
solution_solve = solve(A) %*% b
solution_solve
identical(solution_elim, solution_solve)
str(solution_elim)
str(solution_solve)
typeof(solution_elim)
typeof(solution_solve)
?identical
A = matrix(c(1, 1, 3,
2, -1, 5,
-1, -2, 4),
nrow = 3, ncol = 3, byrow = T)
b = matrix(c(1, 2, 6), nrow = 3, ncol = 1)
solve_by_elim = function(A, b) {
# placeholder for solution
solution = matrix(c(0, 0, 0), nrow = 3, ncol = 1)
# solve first pivot
factor_2_1 = A[2, 1] / A[1, 1]
A[2, ] = A[2, ] - factor_2_1 * A[1, ]
b[2] = b[2] - factor_2_1 * b[1]
factor_3_1 = A[3, 1] / A[1, 1]
A[3, ] = A[3, ] - factor_3_1 * A[1, ]
b[3] = b[3] - factor_3_1 * b[1]
# solve second pivot
factor_3_2 = A[3, 2] / A[2, 2]
A[3, ] = A[3, ] - factor_3_2 * A[2, ]
b[3] = b[3] - factor_3_2 * b[2]
# backsolve
solution[3] = b[3] / A[3, 3]
solution[2] = ( b[2] - A[2, 3] * solution[3] ) / A[2, 2]
solution[1] = ( b[1] - A[1, 3] * solution[3] - A[1, 2] * solution[2] ) / A[1, 1]
return(solution)
}
solution_elim = solve_by_elim(A, b)
solution_elim
# check - use solve to invert matrix A
solution_solve = solve(A) %*% b
solution_solve
b2 = matrix(c(5, -2, 9), nrow = 3, ncol = 1)
A2 = matrix(c(2, 1, 1,
4, -6, 0,
-2, 7, 2),
nrow = 3, ncol = 3, byrow = TRUE)
solve_by_elim(A2, b2)
A2 = matrix(c(2, 1, 1,
4, 2, 0,
-2, 7, 2),
nrow = 3, ncol = 3, byrow = TRUE)
solve_by_elim(A2, b2)
A = matrix(c(2, 1, 1,
4, 2, 0,
-2, 7, 2),
nrow = 3, ncol = 3, byrow = TRUE)
A
factor_2_1 = A[2, 1] / A[1, 1]
A[2, ] = A[2, ] - factor_2_1 * A[1, ]
b[2] = b[2] - factor_2_1 * b[1]
A
factor_3_1 = A[3, 1] / A[1, 1]
A[3, ] = A[3, ] - factor_3_1 * A[1, ]
b[3] = b[3] - factor_3_1 * b[1]
A
factor_3_2 = A[3, 2] / A[2, 2]
A[3, ] = A[3, ] - factor_3_2 * A[2, ]
A
3 != 2
r = 2
r+=1
A
nrow = 3, ncol = 3, byrow = TRUE)
A = matrix(c(2, 1, 1,
4, 2, 0,
-2, 7, 2),
nrow = 3, ncol = 3, byrow = TRUE)
A
r = 2
while (A[1, 1] == 0) {
B = A
t = b
B[r, ] = A[1, ]
B[1, ] = A[r, ]
t[r, ] = b[1, ]
t[1, ] = b[r, ]
A = B
b = t
r = r + 1
}
A
factor_2_1 = A[2, 1] / A[1, 1]
A[2, ] = A[2, ] - factor_2_1 * A[1, ]
b[2] = b[2] - factor_2_1 * b[1]
factor_3_1 = A[3, 1] / A[1, 1]
A[3, ] = A[3, ] - factor_3_1 * A[1, ]
b[3] = b[3] - factor_3_1 * b[1]
A
if (A[2, 2] == 0) {
B = A
t = b
B[3, ] = A[2, ]
B[2, ] = A[3, ]
t[3, ] = b[2, ]
t[2, ] = b[3, ]
A = B
b = t
}
A
factor_3_2 = A[3, 2] / A[2, 2]
A[3, ] = A[3, ] - factor_3_2 * A[2, ]
b[3] = b[3] - factor_3_2 * b[2]
A
solution[3] = b[3] / A[3, 3]
solution[2] = ( b[2] - A[2, 3] * solution[3] ) / A[2, 2]
solution[1] = ( b[1] - A[1, 3] * solution[3] - A[1, 2] * solution[2] ) / A[1, 1]
solution
A = matrix(c(1, 1, 3,
2, -1, 5,
-1, -2, 4),
nrow = 3, ncol = 3, byrow = T)
b = matrix(c(1, 2, 6), nrow = 3, ncol = 1)
solve_by_elim = function(A, b) {
# placeholder for solution
solution = matrix(c(0, 0, 0), nrow = 3, ncol = 1)
# check for zero pivot in first column
r = 2
while (A[1, 1] == 0) {
B = A
t = b
B[r, ] = A[1, ]
B[1, ] = A[r, ]
t[r, ] = b[1, ]
t[1, ] = b[r, ]
A = B
b = t
r = r + 1
}
# solve first pivot
factor_2_1 = A[2, 1] / A[1, 1]
A[2, ] = A[2, ] - factor_2_1 * A[1, ]
b[2] = b[2] - factor_2_1 * b[1]
factor_3_1 = A[3, 1] / A[1, 1]
A[3, ] = A[3, ] - factor_3_1 * A[1, ]
b[3] = b[3] - factor_3_1 * b[1]
# check for zero pivot in second column
if (A[2, 2] == 0) {
B = A
t = b
B[3, ] = A[2, ]
B[2, ] = A[3, ]
t[3, ] = b[2, ]
t[2, ] = b[3, ]
A = B
b = t
}
# solve second pivot
factor_3_2 = A[3, 2] / A[2, 2]
A[3, ] = A[3, ] - factor_3_2 * A[2, ]
b[3] = b[3] - factor_3_2 * b[2]
# backsolve
solution[3] = b[3] / A[3, 3]
solution[2] = ( b[2] - A[2, 3] * solution[3] ) / A[2, 2]
solution[1] = ( b[1] - A[1, 3] * solution[3] - A[1, 2] * solution[2] ) / A[1, 1]
return(solution)
}
solution_elim = solve_by_elim(A, b)
solution_elim
# check - use solve to invert matrix A
solution_solve = solve(A) %*% b
solution_solve
A
A = matrix(c(2, 1, 1,
4, 2, 0,
-2, 7, 2),
nrow = 3, ncol = 3, byrow = TRUE)
A
solve_by_elim(A, b)
solve(A) %*% b
A = matrix(c(1, 1, 3,
2, -1, 5,
-1, -2, 4),
nrow = 3, ncol = 3, byrow = T)
b = matrix(c(1, 2, 6), nrow = 3, ncol = 1)
solve_by_elim = function(A, b) {
# placeholder for solution
solution = matrix(c(0, 0, 0), nrow = 3, ncol = 1)
# check for zero pivot in first column
r = 2  # use row counter and while loop in case multiple rows have zeroes in first column
while (A[1, 1] == 0) {
B = A
t = b
B[r, ] = A[1, ]
B[1, ] = A[r, ]
t[r, ] = b[1, ]
t[1, ] = b[r, ]
A = B
b = t
r = r + 1
}
# solve first pivot
mult_2_1 = A[2, 1] / A[1, 1]
A[2, ] = A[2, ] - mult_2_1 * A[1, ]
b[2] = b[2] - mult_2_1 * b[1]
mult_3_1 = A[3, 1] / A[1, 1]
A[3, ] = A[3, ] - mult_3_1 * A[1, ]
b[3] = b[3] - mult_3_1 * b[1]
# check for zero pivot in second column
if (A[2, 2] == 0) {
B = A
t = b
B[3, ] = A[2, ]
B[2, ] = A[3, ]
t[3, ] = b[2, ]
t[2, ] = b[3, ]
A = B
b = t
}
# solve second pivot
mult_3_2 = A[3, 2] / A[2, 2]
A[3, ] = A[3, ] - mult_3_2 * A[2, ]
b[3] = b[3] - mult_3_2 * b[2]
# backsolve
solution[3] = b[3] / A[3, 3]
solution[2] = ( b[2] - A[2, 3] * solution[3] ) / A[2, 2]
solution[1] = ( b[1] - A[1, 3] * solution[3] - A[1, 2] * solution[2] ) / A[1, 1]
return(solution)
}
solution_elim = solve_by_elim(A, b)
solution_elim
# check - use solve to invert matrix A
solution_solve = solve(A) %*% b
solution_solve
solve(A) %*% b
A = matrix(c(1, 1, 3,
2, -1, 5,
-1, -2, 4),
nrow = 3, ncol = 3, byrow = T)
b = matrix(c(1, 2, 6), nrow = 3, ncol = 1)
solve_by_elim = function(A, b) {
# placeholder for solution
solution = matrix(c(0, 0, 0), nrow = 3, ncol = 1)
# check for zero pivot in first column
r = 2  # use row counter and while loop in case multiple rows have zeroes in first column
while (A[1, 1] == 0) {
B = A
t = b
B[r, ] = A[1, ]
B[1, ] = A[r, ]
t[r, ] = b[1, ]
t[1, ] = b[r, ]
A = B
b = t
r = r + 1
}
# solve first pivot
mult_2_1 = A[2, 1] / A[1, 1]
A[2, ] = A[2, ] - mult_2_1 * A[1, ]
b[2] = b[2] - mult_2_1 * b[1]
mult_3_1 = A[3, 1] / A[1, 1]
A[3, ] = A[3, ] - mult_3_1 * A[1, ]
b[3] = b[3] - mult_3_1 * b[1]
# check for zero pivot in second column
if (A[2, 2] == 0) {
B = A
t = b
B[3, ] = A[2, ]
B[2, ] = A[3, ]
t[3, ] = b[2, ]
t[2, ] = b[3, ]
A = B
b = t
}
# solve second pivot
mult_3_2 = A[3, 2] / A[2, 2]
A[3, ] = A[3, ] - mult_3_2 * A[2, ]
b[3] = b[3] - mult_3_2 * b[2]
# backsolve
solution[3] = b[3] / A[3, 3]
solution[2] = ( b[2] - A[2, 3] * solution[3] ) / A[2, 2]
solution[1] = ( b[1] - A[1, 3] * solution[3] - A[1, 2] * solution[2] ) / A[1, 1]
return(solution)
}
solution_elim = solve_by_elim(A, b)
solution_elim
# check - use solve to invert matrix A
solution_solve = solve(A) %*% b
solution_solve
# test zero pivot cases
A = matrix(c(2, 1, 1,
4, 2, 0,
-2, 7, 2),
nrow = 3, ncol = 3, byrow = TRUE)
solve_by_elim(A, b)
solve(A) %*% b
A = matrix(c(0, 1, 1,
4, 1, 0,
-2, 7, 2),
nrow = 3, ncol = 3, byrow = TRUE)
solve_by_elim(A, b)
solve(A) %*% b
A = matrix(c(0, 1, 1,
0, 1, 0,
-2, 7, 2),
nrow = 3, ncol = 3, byrow = TRUE)
solve_by_elim(A, b)
solve(A) %*% b
