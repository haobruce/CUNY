A
B
A %*% t(B)
t(A) %*% B
C = matrix(c(1, 0, -3, 1), nrow = 2, byrow = TRUE)
C
solve(C)
C %*% solve(C)
solve(C) %*% C
A = matrix(c(1,2,3,1,1,1,2,0,1) nrow = 3)
A = matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3)
A
E21 = matrix(c(1,-2,0,0,1,0,0,0,1), nrow = 3)
E21
E21 %*% A
E31 = matrix(c(1,0,-3,0,1,0,0,0,1), nrow = 3)
E31
E31 %*% E21 %*% A
E32 = matrix(c(1, 0,0,0,1,-2,0,0,1), nrow = 3)
E32
E32 %*% E31 %*% E23 %*% A
E32 %*% E31 %*% E21 %*% A
L = solve(E32 %*% E31 %*% E21)
L
solve(E21 %*% E31 %*% E32)
L * U
U = E32 %*% E31 %*% E21 %*% A
L %*% U
A
L
L %*% solve(L)
solve(L) %*% L
L
A
A %*% solve(A)
solve(A) %*% A
A
U
U %*% solve(U)
solve(U) %*% U
setwd("~/Google Drive/CUNY/git/DATA604/Week2")
setwd("~/Google Drive/CUNY/git/DATA605/HW2")
A = matrix(c(seq(1:6), nrow=2))
A
A = matrix(seq(1:6), nrow = 2)
A
t(A) * A
t(A) %*% A
A %*% t(A)
A = matrix(c(1,3,5,8,2,3,5,2,6), nrow = 3)
A
nrow(A)
factorize_matrix = function(A) {
n_elem = nrow(A)
for (i in 1:n_elem) {
print(i)
}
}
factorize_matrix(A)
A
factorize_matrix = function(A) {
for (i in 2:nrow(A)) {
print(i)
}
}
factorize_matrix(A)
A
factorize_matrix = function(A) {
column = 1
for (i in 2:nrow(A)) {
multiplier = A[i, column]  / A[i - 1, column]
A[i,] = A[i,] - multiplier * A[i - 1,]
}
}
factorize_matrix = function(A) {
column = 1
for (i in 2:nrow(A)) {
multiplier = A[i, column]  / A[i - 1, column]
A[i,] = A[i,] - multiplier * A[i - 1,]
}
return(A)
}
factorize_matrix(A)
A = matrix(c(1,3,5,8,2,3,5,2,6), nrow = 3)
A
factorize_matrix = function(A) {
column = 1
for (i in 2:nrow(A)) {
multiplier = A[i, column]  / A[i - 1, column]
A[i,] = A[i,] - multiplier * A[i - 1,]
}
return(A)
}
factorize_matrix(A)
U = diag(nrow(A))
U
L = diag(nrow(A))
factorize_matrix = function(A) {
L = diag(nrow(A))
column = 1
for (i in 2:nrow(A)) {
multiplier = A[i, column]  / A[i - 1, column]
A[i,] = A[i,] - multiplier * A[i - 1,]
L[i, column] = multiplier
}
return(A)
}
factorize_matrix = function(A) {
L = diag(nrow(A))
column = 1
for (i in 2:nrow(A)) {
multiplier = A[i, column]  / A[i - 1, column]
A[i,] = A[i,] - multiplier * A[i - 1,]
L[i, column] = multiplier
}
return(A, L)
}
factorize_matrix(A)
return(c(A, L))
factorize_matrix = function(A) {
L = diag(nrow(A))
column = 1
for (i in 2:nrow(A)) {
multiplier = A[i, column]  / A[i - 1, column]
A[i,] = A[i,] - multiplier * A[i - 1,]
L[i, column] = multiplier
}
return(c(A, L))
}
factorize_matrix(A)
factorize_matrix = function(A) {
L = diag(nrow(A))
column = 1
for (i in 2:nrow(A)) {
multiplier = A[i, column]  / A[i - 1, column]
A[i,] = A[i,] - multiplier * A[i - 1,]
L[i, column] = multiplier
}
return(list('A' = A, 'L' = L))
}
factorize_matrix(A)
factorize_matrix = function(A) {
L = diag(nrow(A))
for (r in 2:nrow(A)) {
for (c in (r-1):ncol(A)) {
multiplier = A[r, c]  / A[r - 1, c]
A[r,] = A[r,] - multiplier * A[r - 1,]
L[r, c] = multiplier
}
}
return(list('A' = A, 'L' = L))
}
factorize_matrix(A)
r = 2
c = 1
A = matrix(c(1,3,5,8,2,3,5,2,6), nrow = 3)
factorize_matrix = function(A) {
U = A
L = diag(nrow(A))
for (r in 2:nrow(A)) {
for (c in (r-1):ncol(A)) {
multiplier = A[r, c]  / A[r - 1, c]
A[r,] = A[r,] - multiplier * A[r - 1,]
L[r, c] = multiplier
}
}
return(list('L' = L, 'U' = U))
}
multiplier = A[r, c]  / A[r - 1, c]
U = A
L = diag(nrow(A))
multiplier = U[r, c]  / U[r - 1, c]
U
U[r,] = U[r,] - multiplier * U[r - 1,]
U
L[r, c] = multiplier
L
factorize_matrix = function(A) {
U = A
L = diag(nrow(A))
columns = 1
for (r in 2:nrow(A)) {
for (c in (r-1):columns) {
multiplier = U[r, c]  / U[r - 1, c]
U[r,] = U[r,] - multiplier * U[r - 1,]
L[r, c] = multiplier
}
columns = columns + 1
}
return(list('L' = L, 'U' = U))
}
factorize_matrix(A)
factorize_matrix = function(A) {
U = A
L = diag(nrow(A))
columns = 1
for (r in 2:nrow(A)) {
for (c in 1:columns) {
multiplier = U[r, c]  / U[r - 1, c]
U[r,] = U[r,] - multiplier * U[r - 1,]
L[r, c] = multiplier
}
columns = columns + 1
}
return(list('L' = L, 'U' = U))
}
factorize_matrix(A)
factorize_matrix = function(A) {
U = A
L = diag(nrow(A))
columns = 1
for (c in 1:columns) {
for (r in 2:nrow(A)) {
multiplier = U[r, c]  / U[r - 1, c]
U[r,] = U[r,] - multiplier * U[r - 1,]
L[r, c] = multiplier
}
columns = columns + 1
}
return(list('L' = L, 'U' = U))
}
factorize_matrix(A)
factorize_matrix = function(A) {
U = A
L = diag(nrow(A))
columns = 1
for (e in 2:nrow(A)) {
for (r in 2:nrow(A)) {
multiplier = U[r, c]  / U[r - 1, c]
U[r,] = U[r,] - multiplier * U[r - 1,]
L[r, c] = multiplier
}
for (c in 1:columns) {
}
columns = columns + 1
}
return(list('L' = L, 'U' = U))
}
factorize_matrix(A)
factorize_matrix = function(A) {
U = A
L = diag(nrow(A))
columns = 1
for (e in 2:nrow(A)) {
for (r in 2:nrow(A)) {
multiplier = U[r, c]  / U[e - 1, c]
U[r,] = U[r,] - multiplier * U[e - 1,]
}
L[r, c] = multiplier
columns = columns + 1
}
return(list('L' = L, 'U' = U))
}
factorize_matrix(A)
factorize_matrix = function(A) {
U = A
L = diag(nrow(A))
c = 1
for (e in 2:nrow(A)) {
for (r in 2:nrow(A)) {
multiplier = U[r, c]  / U[e - 1, c]
U[r,] = U[r,] - multiplier * U[e - 1,]
}
L[r, c] = multiplier
c = c + 1
}
return(list('L' = L, 'U' = U))
}
factorize_matrix(A)
e = 2
r = 2
c = 1
A = matrix(c(1,3,5,8,2,3,5,2,6), nrow = 3)
U = A
L = diag(nrow(A))
multiplier = U[r, c]  / U[e - 1, c]
multiplier
U[r,] = U[r,] - multiplier * U[e - 1,]
L[r, c] = multiplier
U
L
r = 3
multiplier = U[r, c]  / U[e - 1, c]
U[r,] = U[r,] - multiplier * U[e - 1,]
L[r, c] = multiplier
multiplier
U
L
c = c + 1
e = 3
multiplier = U[r, c]  / U[e - 1, c]
U[r,] = U[r,] - multiplier * U[e - 1,]
L[r, c] = multiplier
multiplier
U
L
A = matrix(c(1,3,5,8,2,3,5,2,6), nrow = 3)
A
factorize_matrix = function(A) {
U = A
L = diag(nrow(A))
c = 1
for (e in 2:nrow(A)) {
for (r in 2:nrow(A)) {
multiplier = U[r, c]  / U[e - 1, c]
U[r,] = U[r,] - multiplier * U[e - 1,]
L[r, c] = multiplier
}
c = c + 1
}
return(list('L' = L, 'U' = U))
}
factorize_matrix(A)
e = 2
r = 2
U = A
L = diag(nrow(A))
c = 1
multiplier = U[r, c]  / U[e - 1, c]
U[r,] = U[r,] - multiplier * U[e - 1,]
L[r, c] = multiplier
U
factorize_matrix = function(A) {
U = A
L = diag(nrow(A))
c = 1
for (e in 2:nrow(A)) {
for (r in (c+1):nrow(A)) {
multiplier = U[r, c]  / U[e - 1, c]
U[r,] = U[r,] - multiplier * U[e - 1,]
L[r, c] = multiplier
}
c = c + 1
}
return(list('L' = L, 'U' = U))
}
factorize_matrix(A)
L = factorize_matrix(A)$L
U = factorize_matrix(A)$U
L %*% U
L %*% U == A
A = matrix(c(1,3,5,8,2,3,5,2,6,2,4,5,1,3,7,8), nrow = 4)
A
L = factorize_matrix(A)$L
U = factorize_matrix(A)$U
L %*% U == A
L
U
A == L %*% U
factorize_matrix = function(A) {
U = A
L = diag(nrow(A))
c = 1
for (e in 2:nrow(A)) {  # loop through n - 1 elements
for (r in e:nrow(A)) {  # loop through n - 1 - e rows
multiplier = U[r, c]  / U[e - 1, c]
U[r,] = U[r,] - multiplier * U[e - 1,]
L[r, c] = multiplier
}
c = c + 1
}
return(list('L' = L, 'U' = U))
}
L = factorize_matrix(A)$L
U = factorize_matrix(A)$U
A == L %*% U
L
U
factorize_matrix = function(A) {
U = A
L = diag(nrow(A))
c = 1
for (e in 2:nrow(A)) {  # loop through n - 1 elements
for (r in e:nrow(A)) {  # loop through n - 1 - e rows
multiplier = U[r, c]  / U[e - 1, c]
U[r,] = U[r,] - multiplier * U[e - 1,]
L[r, c] = multiplier
}
}
return(list('L' = L, 'U' = U))
}
L = factorize_matrix(A)$L
U = factorize_matrix(A)$U
A == L %*% U
factorize_matrix = function(A) {
U = A
L = diag(nrow(A))
c = 1
for (e in 2:nrow(A)) {  # loop through n - 1 elements
for (r in e:nrow(A)) {  # loop through n - 1 - e rows
multiplier = U[r, c]  / U[e - 1, c]
U[r,] = U[r,] - multiplier * U[e - 1,]
L[r, c] = multiplier
}
c = c + 1
}
return(list('L' = L, 'U' = U))
}
L = factorize_matrix(A)$L
U = factorize_matrix(A)$U
A == L %*% U
L
U
L_U = A == L %*% U
A
A
str(A)
character(A)
list(A)
toString(A)
library(stringr)
str_replace_all(toString(A), ', ', ' & ')
data.frame(A)
toString(data.frame(A))
as.character(data.frame(A))
string = toString(A)
A
string
str_extract_all(string, "d, d, d,")
str_extract_all(string, "d\\")
str_extract_all(string, "d\\,")
str_extract_all(string, "d\,")
str_extract_all(string, ":digit:\,")
str_extract_all(string, ":digit:")
str_extract_all(string, "d")
str_extract_all(string, ",")
str_extract_all(string, "{1:9}")
str_extract_all(string, "(1:9)")
str_extract_all(string, "\d")
str_extract_all(string, "\\d")
n = 4
str_extract_all(string, "(\\d\\,){4}")
str_extract_all(string, "(\\d\\,)")
str_extract_all(string, "(\\d\\,){2}")
str_extract_all(string, "(\\d\\,){2,}")
str_extract_all(string, "(\\d\\,\\s){2,}")
str_extract_all(string, "(\\d\\,\\s){4}")
str_extract_all(string, "(\\d\\,\\s){n}")
str_extract_all(string, paste0("(\\d\\,\\s){", n, "}"))
str_extract_all(string, paste0("(\\d\\,\\s){", n, "}"))[[1]]
str_extract_all(string, paste0("(\\d\\,\\s){", n, "}"))[[1]][-2]
str_extract_all(string, paste0("(\\d\\,\\s){", n, "}"))[[1]][:-2]
str_extract_all(string, paste0("(\\d\\,\\s){", n, "}"))[[1]]
test = str_extract_all(string, paste0("(\\d\\,\\s){", n, "}"))[[1]]
str(test)
str_replace_all(test, "\\>(, )", " \\ ")
str_replace_all(test, "(, )", " \\ ")
str_replace_all(test, "(, )\\>", " \\ ")
str_replace_all(test, "\\b(, )", " \\ ")
str_replace_all(test, "\\b(, )", " '\\' ")
str_replace_all(test, "\\b(, )", " \\ ")
str_replace_all(test, "\\b(, )", " \\\\ ")
str_replace_all(test, "(, )", " \\\\ ")
test = c(test, 'abc')
test
test = str_extract_all(string, paste0("(\\d\\,\\s){", n, "}"))[[1]]
test
str_replace_all(test, "$(, )", " \\\\ ")
str_replace_all(test, "(, )$", " \\\\ ")
unlist(str_replace_all(test, "(, )$", " \\\\ "))
toString(str_replace_all(test, "(, )$", " \\\\ "))
?toString
paste(str_replace_all(test, "(, )$", " \\\\ "))
paste0(str_replace_all(test, "(, )$", " \\\\ "))
paste(str_replace_all(test, "(, )$", " \\\\ "), sep = "", collapse = "")
format_matrix = function(A) {
n = nrow(A)
A = toString(A)
A = str_extract_all(A, paste0("(\\d\\,\\s){", n, "}"))[[1]]
paste(str_replace_all(A, "(, )$", " \\\\ "), sep = "", collapse = "")
}
format_matrix(A)
A_ = format_matrix(A)
A
A_ = '1 & 2 & 3 \\ 4 & 5 & 6 \\ 7 & 8 & 9'
A = matrix(c(1,3,5,8,2,3,5,2,6,2,4,5,1,3,7,8), nrow = 4)
A_ = format_matrix(A)
A_
A = matrix(c(1,3,5,8,2,3,5,2,6,2,4,5,1,3,7,8), nrow = 4)
A
A = matrix(c(1,3,5,8,2,3,5,2,6,2,4,5,1,3,7,8), nrow = 4, byrow = T)
A
n = nrow(A)
n
A = toString(A)
A
str_extract_all(A, paste0("(\\d\\,\\s){", n, "}"))[[1]]
A
c(A, ', ')
A = matrix(c(1,3,5,8,2,3,5,2,6,2,4,5,1,3,7,8), nrow = 4, byrow = T)
format_matrix = function(A) {
n = nrow(A)
A_ = paste0(toString(A), ', ')
A_ = str_extract_all(A_, paste0("(\\d\\,\\s){", n, "}"))[[1]]
paste(str_replace_all(A_, "(, )$", " \\\\ "), sep = "", collapse = "")
}
A_ = format_matrix(A)
A_
matrix(c(1,3,5,8,2,3,5,2,6,2,4,5,1,3,7,8), nrow = 4, byrow = T)
matrix(c(1,3,5,8,2,3,5,2,6,2,4,5,1,3,7,8), nrow = 4)
A = matrix(c(1,3,5,8,2,3,5,2,6,2,4,5,1,3,7,8), nrow = 4)
format_matrix = function(A) {
n = nrow(A)
A_ = paste0(toString(A), ', ')
A_ = str_extract_all(A_, paste0("(\\d\\,\\s){", n, "}"))[[1]]
paste(str_replace_all(A_, "(, )$", " \\\\ "), sep = "", collapse = "")
}
A_ = format_matrix(A)
A_
A
A_
toString(A)
