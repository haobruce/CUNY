setwd("~/Google Drive/CUNY/git/DATA621/HW3")
crime = read.csv('crime-training-data.csv')
str(crime)
summary(crime)
crime$chas = factor(crime$chas, labels = c('not_bordered', 'bordered'))
crime$target = factor(crime$target, labels = c('below_median', 'above_median'))
str(crime)
library(caret)
set.seed(123)
# use cross validation to compare out-of-sample ROC for all models
# use the same folds for each model to ensure comparable results
myFolds = createFolds(crime$target, k = 10)
# confirm that folks preserve class distribution
table(crime$target) / nrow(crime)
table(crime$target[myFolds$Fold1]) / length(myFolds$Fold1)
myControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = TRUE,
savePredictions = TRUE, index = myFolds)  # used instead of method = 'cv', number = 10
model_glmnet = train(target ~ ., data = crime, metric = 'ROC', method = 'glmnet', trControl = myControl)
plot(model_glmnet)
summary(model_glmnet)
model_glmnet = train(target ~ ., data = crime, metric = 'ROC', method = 'glmnet',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glmnet)
model_glmnet$modelInfo
model_glmnet$modelInfo$parameters
model_glmnet$modelInfo$predictors
model_glmnet$modelInfo$predictors()
model_rf = train(target ~ ., data = crime, metric = 'ROC', method = 'ranger',
trControl = myControl)
model_list = list(
glmnet = model_glmnet,
rf = model_rf
)
resamps = resamples(model_list)
resamps = resamples(model_list)
resamps
resamps
summary(resamps)
install.packages("caretEnsemble")
library(caretEnsemble)
xyplot(resamps, metric = 'ROC')
densityplot(resamps, metric = 'ROC')
dotplot(resamps, metric = 'ROC')
model_glm = train(target ~ ., data = crime, metric = 'ROC', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm)
model_list = list(glm = model_glm,
glmnet = model_glmnet, rf = model_rf)
dotplot(resamps, metric = 'ROC')
resamps = resamples(model_list)
resamps
dotplot(resamps, metric = 'ROC')
summary(resamps)
summary(model_glmnet)
coef(model_glmnet)
model_glmnet$method
model_glmnet$results
model_glmnet$finalModel
summary(model_glmnet$finalModel)
model_glmnet$finalModel$beta
model_glmnet$finalModel$tuneValue
coef(model_glmnet$finalModel)
coef(model_glmnet$finalModel, s = 0.1)
crime[-1]
crime[1:5, -1]
crime[1:5, 1]
crime[1:5, 1:5]
crime[1:5, :-1]
crime[1:5, 1:(ncol(crime)-1)]
crime[1:5, 1:-ncol(crime)]
crime[1:5, -ncol(crime)]
cvfit = cv.glmnet(crime[1:5, -ncol(crime)], crime$target)
cvfit = cv.glmnet(crime[, -ncol(crime)], crime$target)
crime[, -ncol(crime)]
cvfit = cv.glmnet(crime[, -ncol(crime)], crime$target)
model_glmnet$finalModel$a0
model_glmnet$finalModel$df
model_glmnet$finalModel$lambda
model_glmnet$finalModel$tuneValue
coef(model_glmnet, lambda = model_glmnet$finalModel$tuneValue$lambda)
coef(model_glmnet, l = model_glmnet$finalModel$tuneValue$lambda)
coef(model_glmnet, s = model_glmnet$finalModel$tuneValue$lambda)
coef(model_glmnet, a = model_glmnet$finalModel$tuneValue$lambda)
coef(model_glmnet, a = 1)
coef(model_glmnet, a = 0.1)
model_glmnet = train(target ~ ., data = crime, metric = 'ROC', method = 'glmnet',
preProcess = c('center', 'scale'), trControl = myControl)
coef(model_glmnet, a = 0.1)
coef(model_glmnet, s = 0.1)
coef(model_glmnet)
coef(model_glm)
coef(model_glmnet)
coef(model_glmnet, s=0.1)
coef(model_glmnet$finalModel, s=0.1)
?coef
coef(model_glmnet$finalModel, s = model_glmnet$finalModel$tuneValue$lambda)
model_glm = train(target ~ ., data = crime, metric = 'ROC', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm)
model_glm_sig = train(target ~ nox + age + dis + rad + tax + ptratio + black + medv, data = crime,
preProcess = c('center', 'scale'), trControl = myControl)
model_glm_sig = train(target ~ nox + age + dis + rad + tax + ptratio + black + medv, data = crime,
preProcess = c('center', 'scale'), trControl = myControl)
# model using glmnet,
model_glm_sig = train(target ~ nox + age + dis + rad + tax + ptratio + black + medv, data = crime,
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig)
model_glm_sig = train(target ~ nox + age + dis + rad + tax + ptratio + black + medv, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig)
dotplot(resamps, metric = 'ROC')
model_list = list(glm_full = model_glm_full,
glm_sig = model_glm_sig,
glmnet = model_glmnet, rf = model_rf)
model_glm_full = train(target ~ ., data = crime, metric = 'ROC', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
model_glm_sig1 = train(target ~ nox + age + dis + rad + tax + ptratio + black + medv, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
model_list = list(glm_full = model_glm_full,
glm_sig1 = model_glm_sig1,
glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
summary(model_glm_sig1)
model_glm_sig2 = train(target ~ nox + age + dis + rad + tax + medv, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig2)
model_list = list(glm_full = model_glm_full,
glm_sig1 = model_glm_sig1,
glm_sig2 = model_glm_sig2
glmnet = model_glmnet, rf = model_rf)
model_list = list(glm_full = model_glm_full,
glm_sig1 = model_glm_sig1,
glm_sig2 = model_glm_sig2,
glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
summary(model_glm_sig2)
model_glm_sig3 = train(target ~ nox + rad + tax, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig3)
model_list = list(glm_full = model_glm_full, glm_sig1 = model_glm_sig1, glm_sig2 = model_glm_sig2, glm_sig3 = model_glm_sig3,
glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
coef(model_glmnet$finalModel, s = model_glmnet$finalModel$tuneValue$lambda)
model_glm_sig4 = train(target ~ nox + rad + age, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig4)
model_list = list(glm_full = model_glm_full, glm_sig1 = model_glm_sig1, glm_sig2 = model_glm_sig2, glm_sig3 = model_glm_sig3,
glm_sig4 = model_glm_sig4, glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
summary(model_glm_sig1)
model_glm_full = train(target ~ ., data = crime, metric = 'ROC', method = 'glm',
preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_full)
model_glm_sig2 = train(target ~ nox + age + dis + rad + tax + ptratio + medv, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig2)
model_glm_sig3 = train(target ~ nox + age + rad + tax + ptratio + medv, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig3)
model_glm_sig4 = train(target ~ nox + rad, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
model_glm_sig4 = train(target ~ nox + rad, data = crime,
metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'), trControl = myControl)
summary(model_glm_sig4)
model_list = list(glm_full = model_glm_full, glm_sig1 = model_glm_sig1, glm_sig2 = model_glm_sig2, glm_sig3 = model_glm_sig3,
glm_sig4 = model_glm_sig4, glmnet = model_glmnet, rf = model_rf)
resamps = resamples(model_list)
summary(resamps)
dotplot(resamps, metric = 'ROC')
summary(model_glm_sig4)
dotplot(resamps, metric = 'ROC')
final_model = train(target ~ nox + rad, data = crime, method = 'glm', preProcess = c('center', 'scale'))
summary(model_glm_sig4)
crime_test = read.csv('crime-test-data.csv')
crime_test = read.csv('crime-evaluation-data.csv')
pred = predict(final_model, newdata = crime_test)
pred
final_model = train(target ~ nox + rad, data = crime, method = 'glm', preProcess = c('center', 'scale'),
trControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = FALSE))
final_model = train(target ~ nox + rad, data = crime, metric = 'ROC', method = 'glm', preProcess = c('center', 'scale'),
trControl = trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = FALSE))
summary(model_glm_sig4)
pred = predict(final_model, newdata = crime_test)
pred
pred = predict(final_model, newdata = crime_test, type = 'response')
pred = predict(final_model, newdata = crime_test, type = 'prob')
pred
cbind(pred_class, pred_prob)
pred_class = predict(final_model, newdata = crime_test)
pred_prob = predict(final_model, newdata = crime_test, type = 'prob')
cbind(pred_class, pred_prob)
table(pred_class) / nrow(pred_class)
table(pred_class)
nrow(pred_class)
table(pred_class) / nrows(pred_class)
length(pred_class)
table(pred_class) / length(pred_class)
cbind(pred_class, pred_prob)
write.csv(cbind(pred_class, pred_prob), 'crime_evaluation-prediction.csv')
setwd("~/Google Drive/CUNY/git/DATA605/HW9")
setwd("~/Google Drive/CUNY/git/DATA605/HW9")
func1 = function(x) {
if (0 <= x <= 1) {
if (0 <= x & x <= 1) {
x
} else if (1 < x & x <= 2) {
2 - x
}
func1 = function(x) {
if (0 <= x & x <= 1) {
x
} else if (1 < x & x <= 2) {
2 - x
}
}
runif(100)
func1(runif(100))
hist(func1(runif(100)))
plot(func1(runif(100)))
x = runif(100) * 2
?plot
plot(x, func1(x))
x = runif(100) * 2
plot(x, func1(x))
x = runif(100) * 2
plot(x, func1(x))
```{r}
func1 = function(x) {
if (0 <= x & x <= 1) {
return(x)
} else if (1 < x & x <= 2) {
return(2 - x)
}
}
x = runif(100) * 2
plot(x, func1(x))
x
func1 = function(x) {
if (0 <= x & x <= 1) {
return(x)
}
if (1 < x & x <= 2) {
return(2 - x)
}
}
plot(x, func1(x))
x = seq(0, 2, 100)
x
x = seq(100, 0, 2)
?seq
x = seq(0, 1, 0.1)
plot(x, func1(x))
x = seq(0, 2, 0.1)
plot(x, func1(x))
x = seq(1, 2, 0.1)
plot(x, func1(x))
func1(2)
func1(1.5)
x = seq(1, 2, 0.1)
plot(x, func1(x))
func1(2)
plot(seq(0,2,0.1), c(seq(0,1,0.1), seq(1,0,0.1)))
plot(seq(0,2,0.1), c(seq(0,1,0.1), seq(1,0,-0.1)))
plot(seq(0,2,0.1), c(seq(0,1,0.1), seq(0.9,0,-0.1)))
x
func1(x)
func1 = function(x) {
if (0 <= x and x <= 1) {
func1 = function(x) {
if (0 <= x && x <= 1) {
return(x)
}
if (1 < x and x <= 2) {
func1 = function(x) {
if (0 <= x && x <= 1) {
return(x)
}
if (1 < x && x <= 2) {
return(2 - x)
}
}
func1(x)
x = seq(1, 2, 0.1)
x
x = seq(0, 2, 0.1)
x
func1(x)
x
func1(x)
func1 = function(x) {
if (x >= 0 && x <= 1) {
return(x)
}
if (x > 1 && x <= 2) {
return(2 - x)
}
}
x = seq(0, 2, 0.1)
plot(x, func1(x))
x
func1(x)
(1.5 >= 0 && x <= 1)
(1.5 >= 0 && 1.5 <= 1)
x = 0.5
(x >= 0 && x <= 1)
(x > 1 && x <= 2)
x = 1.5
(x >= 0 && x <= 1)
(x > 1 && x <= 2)
func1 = function(x) {
if (x >= 0 && x <= 1) {
return(x)
}
if (x > 1 && x <= 2) {
return(2 - x)
}
}
funct(x)
func1(x)
func1(x)
x = seq(0, 2, 0.1)
func1(x)
x
func1 = function(x) {
if (x >= 0 && x <= 1) {
return(x)
}
if (x > 1 && x <= 2) {
return(2.0 - x)
}
}
func1(x)
func1 = function(x) {
if (x >= 0.0 && x <= 1.0) {
return(x)
}
if (x > 1.0 && x <= 2.0) {
return(2.0 - x)
}
}
func1(x)
func1(x)
func1(x)
x = 1.5
func1(x)
x = seq(0, 2, 0.1)
x
ifelse(0 <= x && x <= 1, 0, x)
x
ifelse(0 <= x && x <= 1, 0, x)
x + 1
x < 1
ifelse(0 <= x && x <= 1, 0, 1)
ifelse((0 <= x && x <= 1), 0, 1)
ifelse(0 <= x, 0, 1)
ifelse(0 <= x & x <= 1, 0, 1)
x[0 <= x & x <= 1]
x = seq(0, 2, 0.1)
x
x[0 <= x & x <= 1]
func1 = function(x) {
x[0 <= x & x <= 1] = x
x[1 <  x & x <= 2] = 2 - x
}
func1(x)
func1 = function(x) {
x[0 <= x & x <= 1] = x[0 <= x & x <= 1]
x[1 <  x & x <= 2] = 2 - x[1 <  x & x <= 2]
}
func1(x)
func1(x)
return(x)
func1 = function(x) {
x[0 <= x & x <= 1] = x[0 <= x & x <= 1]
x[1 <  x & x <= 2] = 2 - x[1 <  x & x <= 2]
return(x)
}
func1(x)
plot(x, func1(x))
func1 = function(x) {
x[0 <= x & x <= 1] = x[0 <= x & x <= 1]
x[1 <  x & x <= 2] = 2 - x[1 <  x & x <= 2]
return(x)
}
x = seq(0, 2, 0.1)
plot(x, func1(x))
x = ruinf(0, 2, 100)
x = runif(0, 2, 100)
plot(x, func1(x))
x = runif(1000, 0, 2)
plot(x, func1(x))
x = runif(100, 0, 2)
plot(x, func1(x))
func2 = function(x) {
x[0 <= x & x <= 1] = 1 - x[0 <=x & x <= 1]
x[1 <  x & x <= 2] = x[1 <  x & x <= 2] - 1
}
x = runif(100, 0, 2)
plot(x, func2(x))
func2(x)
func2(x)
func2 = function(x) {
x[0 <= x & x <= 1] = 1 - x[0 <=x & x <= 1]
x[1 <  x & x <= 2] = x[1 <  x & x <= 2] - 1
return(x)
}
x = runif(100, 0, 2)
plot(x, func2(x))
hist(fund1(runif(1000, 0, 2)))
hist(func1(runif(1000, 0, 2)))
hist(func2(runif(1000, 0, 2)))
sample(10)
sample(10, 5)
sample(runif(100, 0, 2), 100)
sample(runif(100, 0, 2), 100, prob = func1(runif(100, 0, 2)))
hist(sample(runif(100, 0, 2), 100, prob = func1(runif(100, 0, 2))))
set.seed(123)
x = runif(1000, 0, 2)
hist(sample(x, 1000, prob = func1(x)))
set.seed(123)
x = runif(1000, 0, 2)
hist(sample(x, 1000, prob = func1(x)))
plot(x, func1(x))
func1(x))
func1(x)
plot(x, func1(x))
x = runif(100000, 0, 2)
hist(sample(x, 100, prob = func1(x)))
set.seed(123)
x = runif(100000, 0, 2)
hist(sample(x, 100, prob = func1(x)))
hist(sample(x, 100, prob = func1(x)), replace = TRUE)
hist(sample(x, 100, prob = func1(x), replace = TRUE))
x = runif(1000000, 0, 2)
hist(sample(x, 1000, prob = func1(x), replace = TRUE))
func1 = function(x) {
x[0 <= x & x <= 1] = x[0 <= x & x <= 1]
x[1 <  x & x <= 2] = 2 - x[1 <  x & x <= 2]
return(x)
}
set.seed(123)
x = runif(100, 0, 2)
plot(x, func1(x))
x = runif(1000000, 0, 2)
hist(sample(x, 1000, prob = func1(x), replace = TRUE))
func2 = function(x) {
x[0 <= x & x <= 1] = 1 - x[0 <=x & x <= 1]
x[1 <  x & x <= 2] = x[1 <  x & x <= 2] - 1
return(x)
}
set.seed(123)
x = runif(100, 0, 2)
plot(x, func2(x))
x = runif(1000000, 0, 2)
hist(sample(x, 1000, prob = func2(x), replace = TRUE))
set.seed(123)
x = runif(1000000, 0, 2)
hist(sample(x, 1000, prob = func1(x), replace = TRUE))
hist(sample(x, 1000, prob = func2(x), replace = TRUE))
plot_means = function(n, func) {
results = []
plot_means = function(n, func) {
results = NULL
for (i in 1:1000) {
x = runif(10000, 0, 2)
samps = sample(x, n, prob = func(x), replace = TRUE)
results = c(results, mean(samps))
}
hist(results)
}
plot_means(100, func1)
plot_means = function(n, func) {
for (i in 1:1000) {
x = runif(10000, 0, 2)
samps = sample(x, n, prob = func(x), replace = TRUE)
results = c(results, mean(samps))
}
hist(results)
}
plot_means(100, func1)
plot_means = function(n, func) {
results = NULL  # initialize
for (i in 1:1000) {
x = runif(10000, 0, 2)
samps = sample(x, n, prob = func(x), replace = TRUE)
results = c(results, mean(samps))
}
hist(results)
}
plot_means(100, func1)
par(mfrow = c(2, 1))
par(mfrow = c(2, 1))
plot(means(20, func1))
par(mfrow = c(2, 1))
plot_means(20, func1))
par(mfrow = c(2, 1))
plot_means(20, func1)
plot_means(20, func2)
par(mfrow = c(1, 2))
plot_means(20, func1)
plot_means(20, func2)
par(mfrow = c(1, 2))
plot_means(20, func1)
plot_means(20, func2)
