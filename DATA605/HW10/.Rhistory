nrow(df_raw)
tail(df_raw)
df_raw = read.csv('c:/users/bhao/desktop/Bermuda2016NAMERMQL v2.csv', header = TRUE, stringsAsFactors = TRUE)
nrow(df_raw)
tail(df_raw)
df_raw = read.csv('c:/users/bhao/desktop/Bermuda2016NAMERMQL v2.csv', header = TRUE, stringsAsFactors = TRUE)
nrow(df_raw)
df_raw = read.csv('c:/users/bhao/desktop/Bermuda2016NAMERMQL v2.csv', header = TRUE, stringsAsFactors = TRUE)
nrow(df_raw)
library(readr)
install.packages("readr")
library(readr)
df_raw = read.csv('c:/users/bhao/desktop/Bermuda2016NAMERMQL v2.csv', header = TRUE, stringsAsFactors = TRUE)
df_raw = read_csv('c:/users/bhao/desktop/Bermuda2016NAMERMQL v2.csv', header = TRUE, stringsAsFactors = TRUE)
?read_csv
df_raw = read_csv('c:/users/bhao/desktop/Bermuda2016NAMERMQL v2.csv', header = TRUE)
df_raw = read_csv('c:/users/bhao/desktop/Bermuda2016NAMERMQL v2.csv')
nrows(df_raw)
nrow(df_raw)
head(df_raw)
head(df_tail)
tail(df_raw)
df = df_raw
str(df)
df$mqlcreateddate = as.Date(df$mqlcreateddate, "%m/%d/%Y")  # convert date to date
str(df)
df = data.frame(df_raw)
str(df)
df$bookings = ifelse(df$bookings == '?', NaN, df$bookings)  # remove ? from bookings
str(df)
summary(df)
df$mqlcreateddate = as.Date(df$mqlcreateddate, "%m/%d/%Y")  # convert date to date
df$bookings = ifelse(df$bookings == '?', NaN, df$bookings)  # remove ? from bookings
df = df %>% filter(!is.nan(bookings))
plot(df$bookings)
df %>% group_by(mqlcreateddate) %>%
summarise(n = n()) %>%
plot(n, mqlcreateddate)
df %>% group_by(mqlcreateddate) %>%
summarise(n = n())
library(ggplot2)
df %>% group_by(mqlcreateddate) %>%
summarise(n = n()) %>%
ggplot(aes(x = mqlcreateddate, y = n)) +
geom_abline()
df %>% group_by(mqlcreateddate) %>%
summarise(n = n()) %>%
ggplot(aes(x = mqlcreateddate, y = n)) +
geom_line()
df_raw = read_csv('c:/users/bhao/desktop/Bermuda2016NAMERMQL v2.csv')
df_raw = read_csv('c:/users/bhao/desktop/Bermuda2016NAMERMQL v2.csv')
df = data.frame(df_raw)
str(df)
tail(df)
summary(df)
str(df)
df$mqlcreateddate = as.Date(df$mqlcreateddate, "%m/%d/%Y")  # convert date to date
str(df)
df %>% group_by(mqlcreateddate) %>%
summarise(n = n()) %>%
ggplot(aes(x = mqlcreateddate, y = n)) +
geom_line()
source('~/Google Drive/Career/SClub/SClub_032317.R', echo=TRUE)
df %>% group_by(mqlcreateddate) %>%
summarise(n = n()) %>%
ggplot(aes(x = mqlcreateddate, y = n)) +
geom_line()
start(df)
start(df$mqlcreateddate)
end(df$mqlcreateddate)
frequency(df$mqlcreateddate)
deltat(df$mqlcreateddate)
cylce(df$mqlcreateddate)
cycle(df$mqlcreateddate)
frequency(df$mqlcreateddate)
time(df$mqlcreateddate)
is.ts(df$mqlcreateddate)
df %>% group_by(mqlcreateddate) %>%
summarise(n = n())
df %>% group_by(mqlcreateddate) %>%
summarise(n = n()) %>%
head(30)
df %>% group_by(mqlcreateddate) %>%
summarise(n = n()) %>%
print(n = 30)
library(plotly)
df %>% group_by(mqlcreateddate) %>%
summarise(n = n()) %>%
ggplot(aes(x = mqlcreateddate, y = n)) +
geom_line()
ggplotly()
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA605/HW10")
?matrix
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA605/HW10")
A = matrix(c(  0, 1/2, 1/2,   0,   0,   0,
0,   0,   0,   0,   0,   0,
1/3, 1/3,   0,   0, 1/3,   0,
0,   0,   0,   0, 1/2, 1/2,
0,   0,   0, 1/2,   0, 1/2,
0,   0,   0,   1,   0,   0),
6, 6, byrow = TRUE)
A
B = 0.85 * A
B
B = 0.85 * A + 0.15 / nrow(A)
B
sum(B)
sum(B[1,])
colSums(B)
rowSums(B)
solve(B)
r = c(rep(1/6, 6))
r
B %*% r
B %*% t(r)
t(r)
t(t(r))
B %*% r)
B %*% r
for (n in 1:100) {
r = B %*% r
}
r
r
B %*% r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
for (n in 1:1000) {
r = B %*% r
}
r
B %*% r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
for (n in 1:10000) {
r = B %*% r
}
r
B %*% r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
for (n in 1:100) {
r = B %*% r
}
r
B %*% r
r - B %*% r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
for (n in 1:10000) {
r = B %*% r
}
r - B %*% r
r
B^10000 %*% r
r
B^10000 %*% r
B^100 %*% r
B^10 %*% r
B^1 %*% r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
B^1 %*% r
B^100 %*% r
for (n in 1:100) {
r = B %*% r
}
r - B %*% r
B^100 %*% r
r - B %*% r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
r = B %*% r
r
B^1 %*% r
r = B %*% r
r
B^1 %*% r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
B^1 %*% r
for (n in 1:1) {
r = B %*% r
}
r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
B^2 %*% r
for (n in 1:2) {
r = B %*% r
}
r
B = 0.85 * A + 0.15 / nrow(A)
r0 = c(rep(1/6, 6))
B^2 %*% r0
for (n in 1:2) {
r = B %*% r0
}
r
B = 0.85 * A + 0.15 / nrow(A)
ri = c(rep(1/6, 6))
B^1 %*% ri
B^1 %*% ri
r = B %*% ri
r
r = B %*% r
r
B^1 %*% ri
B^2 %*% ri
r = B^100 %*% ri
r
r = B^100 %*% ri
B %*% r
B = 0.85 * A + 0.15 / nrow(A)
ri = c(rep(1/6, 6))
r = B^100 %*% ri
r
B %*% r
B = 0.85 * A + 0.15 / nrow(A)
ri = c(rep(1/6, 6))
r = B^10 %*% ri
r
B %*% r
ri
B^2
B^2
B %*% B
B^2
B * B
Bi = 0.85 * A + 0.15 / nrow(A)
B = 0.85 * A + 0.15 / nrow(A)
for (n in 1:10) {
B = B * B
}
B
B = 0.85 * A + 0.15 / nrow(A)
B^2
B * B
B^2
B * B
ri = c(rep(1/6, 6))
B %*% ri
B %*% ri
B * B %*% ri
B %*% ri
B * B %*% ri
B * B
(B * B) %*% ri
B %*% ri
(B * B) %*% ri
B^2 %*% ri
B%^%2
B %^% 2
install.packages("expm")
library(expm)
B %^% 2
B %*% B
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
B%^%100 %*% r
for (i in 100) {
r = B %*% r
}
r
r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
r
B %*% r
r = B %*% r
B %*% r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
B%^%100 %*% r
for (i in 1:100) {
r = B %*% r
}
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
B%^%100 %*% r
for (i in 1:100) {
r = B %*% r
}
r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
B%^%100 %*% r
for (i in 1:100) {
r = B %*% r
}
r
B %*% r
r = c(rep(1/6, 6))
B%^%10000 %*% r
for (i in 1:10000) {
r = B %*% r
}
r
B %*% r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
r = B%^%10000 %*% r
r
B %*% r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
r = B%^%1000000 %*% r
r
B %*% r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
r = B%^%100000 %*% r
r
B %*% r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
r = B%^%10000 %*% r
r
B %*% r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
r = B%^%1000 %*% r
r
B %*% r
B = 0.85 * A + 0.15 / nrow(A)
r = c(rep(1/6, 6))
r = B%^%100 %*% r
r
B %*% r
eigen(B)
B
eigen(B)
B = 0.85 * A + 0.15 / nrow(A)
# start with uniform rank and perform 1000 iterations
r = c(rep(1/6, 6))
r = B %^% 1000 %*% r
r
B %*% r
B %^% 1000
library(graph)
?page.rank
??page.rank
library(igraph)
page.rank(A)
?page.rank
page_rank(A)
page_rank(graph.full(A))
page.rank(graph.full(A))
graph.full(A)
A
page.rank(graph.full(A))
graph2T(A)
T2graph(A)
as.undirected(graph.adjacency(A))
G = as.undirected(graph.adjacency(A))
G = as.undirected(graph.adjacency(A), weighted = TRUE)
G = as.undirected(graph.adjacency(A, weighted = TRUE))
G
page.rank(G)
G = as.undirected(graph.adjacency(A))
page.rank(G)
g = graph.formula(1 -+ 2, 1 -+ 3,
3 -+ 1, 3 -+ 2, 3 -+ 5,
4 -+ 5, 4 -+ 6,
5 -+ 4, 5 -+ 6,
6 -+ 4)
page.rank(graph = g, damping = 0.85)
g = graph.formula(1 -+ 2, 1 -+ 3,
3 -+ 1, 3 -+ 2, 3 -+ 5,
4 -+ 5, 4 -+ 6,
5 -+ 4, 5 -+ 6,
6 -+ 4)
page.rank(graph = g, damping = 0.85)
B = 0.85 * A + 0.15 / nrow(A)
eigen(B)
B = 0.85 * A + 0.15 / nrow(A)
# start with uniform rank and perform 1000 iterations
r = c(rep(1/6, 6))
r = B %^% 1000 %*% r
r
B %*% r
B %^% 1000
A2 = matrix(c(0, 0, 1, 1/2,
1/3,0,0,0,
1/3,1/2,0,1/2,
1/3,1/2,0,0), 4, 4, byrow = T)
A2
v = c(1/4, 1/4, 1/4, 1/4)
A %*% v
A2 %*% v
A2 %*% A2 %*% v
A2 %^% 8 %*% v
B = 0.85 * A + 0.15 / nrow(A)
# start with uniform rank and perform 1000 iterations
r = c(rep(1/6, 6))
r = B %^% 10 %*% r
r
B %*% r
B %^% 10
eigen(B)
r / r[1,1]
eigen(B)$vectors[,1]
eigen(B)$values
eigen(B)$vectors[,1]
eigen(B)$vectors[,1] / eigen(B)$vectors[1,1]
# compute eigen-decomposition of B
eig = eigen(B)
eig$values
eig$vectors[,1]
eig$vectors[,1] / eig$vectors[1,1]
pr = page.rank(graph = g, damping = 0.85)
pr$vector / pr$vector[1]
# use page.rank to compute page rank of A
g = graph.formula(1 -+ 2, 1 -+ 3,
3 -+ 1, 3 -+ 2, 3 -+ 5,
4 -+ 5, 4 -+ 6,
5 -+ 4, 5 -+ 6,
6 -+ 4)
pr = page.rank(graph = g, damping = 0.85)
pr$vector / pr$vector[1]
pr = page.rank(graph = g, damping = 0.85)
pr
pr$vector[1]
pr$vector / pr$vector[1]
pr
pr = page.rank(graph = g, damping = 0.15)
pr$vector / pr$vector[1]
pr = page.rank(graph = g)
pr$vector / pr$vector[1]
pr = page.rank(graph = g, damping = 0.85)
pr
pr = page.rank(graph = g, damping = 0.85, personalized = c(1/6,1/6,1/6,1/6,1/6,1/6))
pr$vector / pr$vector[1]
g = graph.formula(1 -+ 2, 1 + 3,
3 -+ 2, 3 -+ 5,
4 + 5, 4 + 6,
5 -+ 6)
pr = page.rank(graph = g, damping = 0.85)
pr$vector / pr$vector[1]
pr
pr = page_rank(graph = g, damping = 0.85)
pr$vector / pr$vector[1]
install.packages('expm')
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA605/HW10")
library(expm)
library(igraph)
install.packages('igraph')
library(expm)
library(igraph)
A = matrix(c(  0, 1/2, 1/2,   0,   0,   0,
0,   0,   0,   0,   0,   0,
1/3, 1/3,   0,   0, 1/3,   0,
0,   0,   0,   0, 1/2, 1/2,
0,   0,   0, 1/2,   0, 1/2,
0,   0,   0,   1,   0,   0),
6, 6, byrow = TRUE)
B = 0.85 * A + 0.15 / nrow(A)
r = rep(1/6, 6)
A[2,]
A[2,] = r
B %^% 50 %*% r
B = 0.85 * A + 0.15 / nrow(A)
B %^% 50 %*% r
A
A = matrix(c(  0, 1/2, 1/2,   0,   0,   0,
0,   0,   0,   0,   0,   0,
1/3, 1/3,   0,   0, 1/3,   0,
0,   0,   0,   0, 1/2, 1/2,
0,   0,   0, 1/2,   0, 1/2,
0,   0,   0,   1,   0,   0),
6, 6, byrow = TRUE)
# start with uniform rank and perform 1000 iterations
r = rep(1/6, 6)
# replace node 2 with uniform ranking
A[2,] = r
A = matrix(c(  0, 1/2, 1/2,   0,   0,   0,
0,   0,   0,   0,   0,   0,
1/3, 1/3,   0,   0, 1/3,   0,
0,   0,   0,   0, 1/2, 1/2,
0,   0,   0, 1/2,   0, 1/2,
0,   0,   0,   1,   0,   0),
6, 6, byrow = TRUE)
# start with uniform rank and perform 1000 iterations
r = rep(1/6, 6)
# replace node 2 with uniform ranking
A[2,] = r
B
B %^% 50 %*% r
B = 0.85 * t(A) + 0.15 / nrow(A)
B %^% 50 %*% r
r / sum(r)  # normalize
r = B %^% 50 %*% r
r
r / sum(r)  # normalize
# compute eigen-decomposition of B
eig = eigen(B)
eig$values
eig$vectors[,1]
eig$vectors[,1] / sum(eig$vectors[,1])  # normalize
eig$vectors[,1]
eig$vectors[,1] / sum(eig$vectors[,1])  # normalize
# use page.rank to compute page rank of A
# g2 = graph.formula(1 -+ 2, 1 + 3,
#                   3 -+ 2, 3 -+ 5,
#                   4 + 5, 4 + 6,
#                   5 -+ 6)
g = graph_from_adjacency_matrix(A, weighted = T, mode = 'directed')
plot(g)
page.rank(g, damping = 0.85)
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA605/HW10")
library(expm)
library(igraph)
