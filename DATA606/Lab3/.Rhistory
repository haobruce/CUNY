plot(x=arbuthnot$year, y=arbuthnot$girls, type='l')
plot(x=arbuthnot$year, y=arbuthnot$boys + arbuthnot$girls, type='l')
plot(x=arbuthnot$year, y=arbuthnot$boys / arbuthnot$girls, type='l')
plot(x=arbuthnot$year, y=arbuthnot$boys > arbuthnot$girls, type='l')
y=arbuthnot$boys > arbuthnot$girls
y
source('https://www.openintro.org/stat/data/present.R')
head(present)
plot(x=present$year, y=present$boys > present$girls)
install.packages(c('openintro','OIdata','devtools','ggplot2','psych','reshape2',
'knitr','markdown','shiny'))
devtools::install_github("jbryer/IS606")
install.packages(c('openintro','OIdata','devtools','ggplot2','psych','reshape2',
'knitr','markdown','shiny'))
devtools::install_github("jbryer/IS606")
library('IS606')
library(dbConnect)
install.packages('dbConnect')
library(dbConnect)
myDb = dbConnect(MySQL(), user='root', password='Aspire123', dbname='CUNY', host='127.0.0.1')
myDb = dbConnect(MySQL(), user='root', password='Aspire123', dbname='tb', host='127.0.0.1')
qry <- 'SELECT * FROM tb'
print(qry)
rs = dbSendQuery(myDb, qry)
data = fetch(rs, n=-1)
View(data)
head(data)
str(data)
pop = read.csv('/Users/brucehao/Google Drive/CUNY/2016 Fall/DATA607/Week2/population.csv')
pop
str(pop)
pop = read.csv('/Users/brucehao/Google Drive/CUNY/2016 Fall/DATA607/Week2/population.csv', stringsAsFactors = F)
str(pop)
install.packages('RODBC')
install.packages('RODBC')
library(RODBC)
tb = fetch(rs, n=-1)
tb
# establish database connection and retrieve tb data
myDb = dbConnect(MySQL(), user='root', password='Aspire123', dbname='tb', host='127.0.0.1')
qry <- 'SELECT * FROM tb'
rs = dbSendQuery(myDb, qry)
tb = fetch(rs, n=-1)
str(tb)
View(tb)
View(pop)
View(tb)
?merge.data.frame
dim(pop)
describe(pop)
library(psych)
describe(pop)
describe(tb)
merge.data.frame(tb, pop, by.x = 'country', by.y = 'country', by.x = 'year', by.y = 'year')
merge.data.frame(tb, pop, by=c('country', 'year'))
df = merge.data.frame(tb, pop, by=c('country', 'year'))
View(df)
pop[pop$country='Afghanistan' & pop$year=1995]
pop[pop$country='Afghanistan' & pop$year=1995,]
pop[pop$country=='Afghanistan' & pop$year==1995,]
summary(tb)
str(tb)
2004-1995
unique(tb$country)
length(unique(tb$country))
length(unique(tb$year))
describe(tb)
2013-1995
install.packages('dplyr')
dplyr
library(dplyr)
library(RODBC)
library(RODBC)
getwd()
install.packages('VennDiagram')
library(VennDiagram)
draw.pairwise.venn(area1 = 35, area2 = 23, cross.area = 11,
category = c('% Independent', '% Swing Voter'),
cat.pos = c(3, -1))
table = matrix(c(11,24,35,12,43,65,23,77,100), ncol=3, byrow=T)
colnames(table) = c('Swing', 'Not Swing', 'Total')
rownames(table) = c('Independent', 'Not Independent', 'Total')
table
table = matrix(c(11,24,35,12,53,65,23,77,100), ncol=3, byrow=T)
colnames(table) = c('Swing', 'Not Swing', 'Total')
rownames(table) = c('Independent', 'Not Independent', 'Total')
table
df = as.data.frame(c(1,2,3))
df
max(df)
sample(max(df), 10, replace=T)
df = as.data.frame(c(0, 11, 999))
max(df)
sample(max(df), 10, replace=T)
example.obj = "1. A small sentence. - 2. Another tiny sentence."
install.packages('stringr')
library(stringr)
str_extract_all(example.obj, '([[:alpha:]])')
str_extract_all(example.obj, '([[:alpha:]]).')
str_extract_all(example.obj, '([[:alpha:]]).+?')
str_extract_all(example.obj, '([[:alpha:]]).+?\\1')
str_extract(example.obj, '([[:alpha:]]).+?\\1')
str_extract(example.obj, '([[:alpha:]]).+?\')
str_extract(example.obj, '([[:alpha:]]).+?')
str_extract_all(example.obj, '([[:alpha:]]).+?')
str_extract_all(example.obj, '([[:alpha:]]).+?\\1')
str = '555-1239moe szyslak(636) 555-0113burns, c. montgomery555-6542rev. timothy lovejoy'
library(stringr)
str_extract_all(str, '[[:alpha:]., ]')
str_extract_all(str, '[[:alpha:], ]')
str_extract_all(str, '[[:alpha:]., ]')
str_extract_all(str, '[[:alpha:]., ]'{2,})
str_extract_all(str, '[[:alpha:]., ]{2,}')
names
library(stringr)
raw.data <- "555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5543642Dr. Julius Hibbert"
names <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
names
as.data.frame(names)
names_df = as.data.frame(names)
names_df
str_split(names_df, ', ')
names_df
apply(names_df, str_split)
apply(names_df, str_split(', '))
apply(names_df, 2, str_split(', '))
str_split(names_df['names'], ', ')
names_df[1]
?append
has_title = NULL  # initialize an empty vector
for (name in names) {
append(has_title, str_detect(names, '([[:alpha:].\\>]){2,}')
}
has_title = NULL  # initialize an empty vector
for (name in names) {
append(has_title, str_detect(names, '([[:alpha:].\\>]){2,}'))
}
has_title
has_title = NULL  # initialize an empty vector
for (name in names) {
has_title = append(has_title, str_detect(names, '([[:alpha:].\\>]){2,}'))
}
has_title
for (name in names) {
print(name)
has_title = append(has_title, str_detect(names, '([[:alpha:].\\>]){2,}'))
}
for (name in names) {
print(name)
print(str_detect(name, '([[:alpha:].\\>]){2,}'))
}
for (name in names) {
print(name)
print(str_detect(name, '([[:alpha:].]){2,}'))
}
for (name in names) {
print(name)
print(str_detect(name, '[.]{2,}'))
}
for (name in names) {
print(name)
print(str_detect(name, '[.]'))
}
for (name in names) {
print(name)
print(str_detect(name, '.[.]'))
}
for (name in names) {
print(name)
print(str_detect(name, '.[.]{2,}'))
}
for (name in names) {
print(name)
print(str_detect(name, '.[.]+'))
}
for (name in names) {
print(name)
print(str_detect(name, '(.[.]){2,}'))
}
for (name in names) {
print(name)
print(str_detect(name, '(.[.]){1,}'))
}
for (name in names) {
print(name)
print(str_detect(name, '([:alpha:][.]){2,}'))
}
test = 'Rev. Timothy Lovejoy'
str_extract(test, '.')
str_extract_all(test, '.')
str_extract_all(test, '[.]')
str_extract_all(test, '.[.]')
str_detect(test, '.[.]')
str_detect(test, '.{2,}[.]')
for (name in names) {
print(name)
print(str_detect(name, '.+[.]'))
}
for (name in names) {
print(name)
print(str_detect(name, '.{2,}[.]'))
}
for (name in names) {
print(name)
print(str_detect(name, '[:alpha:]{2,}[.]'))
}
has_title = NULL  # initialize an empty vector
for (name in names) {
has_title = append(has_title, str_detect(name, '[:alpha:]{2,}[.]'))
}
has_title
library(stringr)
raw.data <- "555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5543642Dr. Julius Hibbert"
names <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
names
for (name in names) {
print(1 + str_detect(name, '[:alpha:]{2,}[.]')))  # look for pattern of >1 letters ending in a period
}
for (name in names) {
print(str_detect(name, '[:alpha:]{2,}[.]'))
}
for (name in names) {
print(1+ str_detect(name, '[:alpha:]{2,}[.]'))
}
has_second_name = NULL  # initialize an empty vector
for (name in names) {
has_second_name = append(has_second_name,
length(name) > (2+ str_detect(name, '[:alpha:]{2,}[.]')))
}
has_second_name
for (name in names) {
print(length(name))
print((2+ str_detect(name, '[:alpha:]{2,}[.]')))
has_second_name = append(has_second_name,
length(name) > (2+ str_detect(name, '[:alpha:]{2,}[.]')))
}
names
length(names)
for (name in names) {
print(length(str_split(name, ' ')))
print((2+ str_detect(name, '[:alpha:]{2,}[.]')))
has_second_name = append(has_second_name,
length(name) > (2+ str_detect(name, '[:alpha:]{2,}[.]')))
}
library(RCurl)
library(stringr)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess = read.csv(text=url, stringsAsFactors = F)
i = 4
player = str_trim(str_sub(chess[i,], 9, 40))
player
chess[i, 9:40]
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
state
points = as.numeric(str_sub(chess[i,] 42, 44))  # retrive player points
str_sub(chess[i,] 42, 44)
str_sub(chess[i,], 42, 44)
as.numeric(str_sub(chess[i,], 42, 44))
df = data.frame('Player Name' = character(),
'Player State'= character(),
'Total Points' = numeric(),
'Pre-Rating' = integer(),
'Opponent Avg Pre-Rating' = integer(),
stringsAsFactors = F)
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre-rating = as.numeric(str_sub(chess[i,], 23, 26))  # retrieve player points
df = rbind(df, c(player, state, points, pre-rating, 0.0))
}
}
df
as.numeric(str_sub(chess[i,], 23, 26)
)
as.numeric(str_sub(chess[4,], 23, 26))
(str_sub(chess[4,], 23, 26))
(str_sub(chess[5,], 23, 26))
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre-rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
df = rbind(df, c(player, state, points, pre-rating, 0.0))
}
}
df
as.numeric(str_sub(chess[i+1,], 23, 26))
as.numeric(' 325')
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre-rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
print(player)
df = rbind(df, c(player, state, points, pre-rating, 0.0))
}
}
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre_rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
print(player)
df = rbind(df, c(player, state, points, pre_rating, 0.0))
}
}
df
head(df)
i = 6
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre_rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
player
state
points
i = 7
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
pre_rating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
player
state
points
df = rbind(df, c(player, state, points, pre_rating, 0.0))
str(df)
df = data.frame('Player Name' = character(),
'Player State'= character(),
'Total Points' = numeric(),
'Pre-Rating' = integer(),
'Opponent Avg Pre-Rating' = integer(),
stringsAsFactors = F)
str(df)
df = rbind(df, c(player, state, points, pre_rating, 0.0))
df
str(df)
library(RCurl)
library(stringr)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo2.txt')
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
url = NULL
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
knitr::opts_chunk$set(echo = TRUE)
knitr:kable(head(df))
library(knitr)
getwd()
bdims %>% ggplot(aes(x=hgt, fill=sex)) + geom_histogram(aes(y=..density..), binwidth = 2) + facet_grid(. ~ sex)
library(dplyr)
library(ggplot2)
download.file("http://www.openintro.org/stat/data/bdims.RData", destfile = "bdims.RData")
load("bdims.RData")
library(stringr)
str_extract_all('clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr', '[[:upper:]]')
rnorm(10, 0, 1)
rnorm(554, -0.0009, .0144)
?write
write(rnorm(554, -0.0009, .0144), "C:/Users/bhao/Desktop/rand.csv"
)
as.data.frame(rnorm(554, -0.0009, .0144))
write(as.data.frame(rnorm(554, -0.0009, .0144)), "C:/Users/brucehao/Desktop/rand.csv"
)
write(as.data.frame(rnorm(554, -0.0009, .0144)), "C:/Users/bhao/Desktop/rand.csv")
as.data.frame(rnorm(554, -0.0009, .0144))
df = as.data.frame(rnorm(554, -0.0009, .0144))
write(df, 'C:/Users/bhao/Desktop/rand.csv')
df[,2]
df[,1]
write(df[,1], 'C:/Users/bhao/Desktop/rand.csv')
write.table(df, 'C:/Users/bhao/Desktop/rand.csv')
write.table(df[, 1], 'C:/Users/bhao/Desktop/rand.csv')
write.table(df[, 1], 'C:/Users/bhao/Desktop/rand.csv')
?write.table
write.table(df[, 1], 'C:/Users/bhao/Desktop/rand.csv', row.names = F)
df = as.data.frame(rnorm(554, 0, .0144))
write.table(df[, 1], 'C:/Users/bhao/Desktop/rand.csv', row.names = F)
write.table(df[, 1], 'C:/Users/bhao/Desktop/rand.csv', row.names = F)
df = as.data.frame(rnorm(838, 0, .0144))
write.table(df[, 1], 'C:/Users/bhao/Desktop/rand.csv', row.names = F)
library(dbConnect)
library(dplyr)
library(ggvis)
install.packages('dbConnect')
install.packages("dbConnect")
install.packges('ggvis')
install.packages('ggvis')
library(dbConnect)
library(dplyr)
library(ggvis)
username = 'brucehao'
password = 'password'
host = 'mysql-instance.ch6yubfph0cs.us-west-1.rds.amazonaws.com'
myDb = dbConnect(MySQL(), user=username, password=password, dbname='movies', host=host)
rs = dbSendQuery(myDb, 'SELECT DISTINCT names.*, ratings.user_id, ratings.rating
FROM movie_names names INNER JOIN movie_ratings ratings
ON names.movie_name = ratings.movie_name')
movies = fetch(rs, n=-1)
install.packages('plotly')
library(plotly)
bdims %>% ggplot(aes(x=hgt, fill=sex)) + geom_histogram(aes(y=..density..), binwidth = 2) + facet_grid(. ~ sex)
ggplotly()
bdims %>% ggplot(aes(x=hgt, fill=sex)) + geom_histogram(aes(y=..density..), binwidth = 2) + facet_grid(. ~ sex)
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA607/Week2")
load("bdims.RData")
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA606/Lab3")
download.file("http://www.openintro.org/stat/data/bdims.RData", destfile = "bdims.RData")
load("bdims.RData")
bdims %>% ggplot(aes(x=hgt, fill=sex)) + geom_histogram(aes(y=..density..), binwidth = 2) + facet_grid(. ~ sex)
ggplotly()
bdims %>% ggplot(aes(x=hgt, fill=sex)) + geom_histogram(aes(y=..density..), binwidth = 2) + facet_grid(. ~ sex) %>% ggplotly()
install.packages('DT')
library(DT)
library(RCurl)
library(stringr)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess = read.csv(text=url, stringsAsFactors = F)
chess
head(chess)
df = data.frame('PlayerName' = character(), 'PlayerState'= character(), 'TotalPoints' = numeric(),
'PreRating' = integer(), 'OpponentAvgPreRating' = integer(), 'Opp1' = integer(),
'Opp2' = integer(), 'Opp3' = integer(), 'Opp4' = integer(), 'Opp5' = integer(),
'Opp6' = integer(), 'Opp7' = integer(), stringsAsFactors = F)
head(df)
for (i in 1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
preRating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
opp1 = as.numeric(str_sub(chess[i,], 51, 52))  # retrieve opponent numbers to calculate avg later
opp2 = as.numeric(str_sub(chess[i,], 57, 58))
opp3 = as.numeric(str_sub(chess[i,], 63, 64))
opp4 = as.numeric(str_sub(chess[i,], 69, 70))
opp5 = as.numeric(str_sub(chess[i,], 75, 76))
opp6 = as.numeric(str_sub(chess[i,], 81, 82))
opp7 = as.numeric(str_sub(chess[i,], 87, 88))
# append data to data frame
df = rbind(df, list('PlayerName' = player, 'PlayerState' = state, 'TotalPoints' = points,
'PreRating' = preRating, 'OpponentAvgPreRating' = 0.0, 'Opp1' = opp1,
'Opp2' = opp2, 'Opp3' = opp3, 'Opp4' = opp4, 'Opp5' = opp5, 'Opp6' = opp6,
'Opp7' = opp7), stringsAsFactors=F)
}
}
head(df)
head(chess)
df = data.frame('PlayerName' = character(), 'PlayerState'= character(), 'TotalPoints' = numeric(),
'PreRating' = integer(), 'OpponentAvgPreRating' = integer(), 'Opp1' = integer(),
'Opp2' = integer(), 'Opp3' = integer(), 'Opp4' = integer(), 'Opp5' = integer(),
'Opp6' = integer(), 'Opp7' = integer(), stringsAsFactors = F)
head(df)
head(chess)
for (i in 10) {#1:nrow(chess)) {
# check if row contains player data
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5)))) {
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
preRating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
opp1 = as.numeric(str_sub(chess[i,], 51, 52))  # retrieve opponent numbers to calculate avg later
opp2 = as.numeric(str_sub(chess[i,], 57, 58))
opp3 = as.numeric(str_sub(chess[i,], 63, 64))
opp4 = as.numeric(str_sub(chess[i,], 69, 70))
opp5 = as.numeric(str_sub(chess[i,], 75, 76))
opp6 = as.numeric(str_sub(chess[i,], 81, 82))
opp7 = as.numeric(str_sub(chess[i,], 87, 88))
# append data to data frame
df = rbind(df, list('PlayerName' = player, 'PlayerState' = state, 'TotalPoints' = points,
'PreRating' = preRating, 'OpponentAvgPreRating' = 0.0, 'Opp1' = opp1,
'Opp2' = opp2, 'Opp3' = opp3, 'Opp4' = opp4, 'Opp5' = opp5, 'Opp6' = opp6,
'Opp7' = opp7), stringsAsFactors=F)
}
}
DF
df
head(chess)
i = 7
df = data.frame('PlayerName' = character(), 'PlayerState'= character(), 'TotalPoints' = numeric(),
'PreRating' = integer(), 'OpponentAvgPreRating' = integer(), 'Opp1' = integer(),
'Opp2' = integer(), 'Opp3' = integer(), 'Opp4' = integer(), 'Opp5' = integer(),
'Opp6' = integer(), 'Opp7' = integer(), stringsAsFactors = F)
if (!is.na(as.numeric(str_sub(chess[i,], 4, 5))))
!is.na(as.numeric(str_sub(chess[i,], 4, 5)))
player = str_trim(str_sub(chess[i,], 9, 40))  # retrieve player name
player
state = str_sub(chess[i+1,], 4, 5)  # retrieve player state
points = as.numeric(str_sub(chess[i,], 42, 44))  # retrieve player points
preRating = as.numeric(str_sub(chess[i+1,], 23, 26))  # retrieve player points
opp1 = as.numeric(str_sub(chess[i,], 51, 52))  # retrieve opponent numbers to calculate avg later
opp2 = as.numeric(str_sub(chess[i,], 57, 58))
opp3 = as.numeric(str_sub(chess[i,], 63, 64))
opp4 = as.numeric(str_sub(chess[i,], 69, 70))
opp5 = as.numeric(str_sub(chess[i,], 75, 76))
opp6 = as.numeric(str_sub(chess[i,], 81, 82))
opp7 = as.numeric(str_sub(chess[i,], 87, 88))
df = rbind(df, list('PlayerName' = player, 'PlayerState' = state, 'TotalPoints' = points,
'PreRating' = preRating, 'OpponentAvgPreRating' = 0.0, 'Opp1' = opp1,
'Opp2' = opp2, 'Opp3' = opp3, 'Opp4' = opp4, 'Opp5' = opp5, 'Opp6' = opp6,
'Opp7' = opp7), stringsAsFactors=F)
df
myDb = dbConnect(MySQL(), user=username, password=password, dbname='movies', host=host)
