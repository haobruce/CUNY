#print(head(df[columnName]))
df[df[columnName]==key, columnName] = get(columnName)[[key]]
}
}
expand('cap_shape')
columnName = 'cap_shape'
df[df[columnName]=='b',columnName]
df[df[columnName]=='b',columnName] = 'b'
df[df[columnName]=='b',columnName]
get(columnName)[['b']]
df[df[columnName]=='b',columnName] = get(columnName)[['b']]
df[df[columnName]=='b',columnName]
get(columnName)[['b']]
typeof(get(columnName)[['b']])
levels(df[columnName]) = c(levels(df[columnName], get(columnName)[['b']]))
levels(df[columnName]) = c(levels(df[columnName]), get(columnName)[['b']])
levels(df[columnName])
levels(df['cap_shape'])
df = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data", header=FALSE)
# manually add column names
colnames(df) = c('classes','cap_shape','cap_surface','cap_color','bruises?','odor','gill_attachment','gill_spacing',
'gill_size','gill_color','stalk_shape','stalk_root','stalk_surface_above_ring','stalk_surface_below_ring',
'stalk_color_above_ring','stalk_color_below_ring','veil_type','veil_color','ring_number','ring_type','spore_print_color',
'population','habitat')
levels(df['cap_shape'])
head(df['cap_shape'])
str(df)
levels(df$cap_shape)
levels(df['cap_shape'])
levels(df[['cap_shape'])
levels(df[['cap_shape']])
expand = function(columnName) {
for (key in as.list(keys(get(columnName)))) {
#print(head(df[columnName]))
levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
df[df[columnName]==key, columnName] = get(columnName)[[key]]
}
}
expand('cap_shape')
head(df, 20)
columnName
key
get(columnName)[[key]]
levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
levels(df[[columnName]])
expand = function(columnName) {
expand = function(columnName) {
expand = function(columnName) {
for (key in as.list(keys(get(columnName)))) {
print(key)
levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
df[df[columnName]==key, columnName] = get(columnName)[[key]]
}
}
expand('cap_shape')
expand = function(df, columnName) {
for (key in as.list(keys(get(columnName)))) {
print(key)
levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
df[df[columnName]==key, columnName] = get(columnName)[[key]]
}
}
expand(df, 'cap_shape')
levels(df[[columnName]])
expand = function(columnName) {
expand = function(columnName) {
for (key in as.list(keys(get(columnName)))) {
#print(key)
print(levels(df[[columnName]]))
levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
df[df[columnName]==key, columnName] = get(columnName)[[key]]
}
}
expand('cap_shape')
print(levels(df[[columnName]]))
expand = function(columnName) {
for (key in as.list(keys(get(columnName)))) {
#print(key)
print(levels(df[[columnName]]))
levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
return(df[df[columnName]==key, columnName] = get(columnName)[[key]])
}
}
expand = function(columnName) {
for (key in as.list(keys(get(columnName)))) {
#print(key)
print(levels(df[[columnName]]))
levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
df[df[columnName]==key, columnName] = get(columnName)[[key]]
}
return(df)
}
temp = expand(df, 'cap_shape')
expand = function(df, columnName) {
for (key in as.list(keys(get(columnName)))) {
#print(key)
print(levels(df[[columnName]]))
levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
df[df[columnName]==key, columnName] = get(columnName)[[key]]
}
return(df)
}
temp = expand(df, 'cap_shape')
head(temp)
expand = function(df, columnName) {
for (key in as.list(keys(get(columnName)))) {
#print(key)
print(levels(df[[columnName]]))
levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
df[df[columnName]==key, columnName] = get(columnName)[[key]]
}
return(df[columnName])
}
temp = expand(df, 'cap_shape')
head(temp)
head(df[[1]])
colnames(df)
colnames(df)[1]
for (i in 1:2) {
columnName = colnames(df)[i]
df[[i]] = expand(df, columnName)
}
classes = hash(keys=c('e','p'),
values=c('edible','poisonous'))
for (i in 1:2) {
columnName = colnames(df)[i]
df[[i]] = expand(df, columnName)
}
head(df)
classes = hash(keys=c('e','p'),
values=c('edible','poisonous'))
cap_shape = hash(keys=c('b','c','x','f','k','s'),
values=c('bell','conical','convex','flat','knobbed','sunken'))
cap_color = hash(keys=c('n','b','c','g','r','p','u','e','w','y'),
values=c('brown','buff','cinnamon','gray','green','pink','purple','red','white','yellow'))
for (i in 1:3) {
columnName = colnames(df)[i]
df[[i]] = expand(df, columnName)
}
classes = hash(keys=c('e','p'),
values=c('edible','poisonous'))
cap_shape = hash(keys=c('b','c','x','f','k','s'),
values=c('bell','conical','convex','flat','knobbed','sunken'))
cap_surface = hash(keys=c('f','g','y','s'),
values=c('fibrous','grooves','scaly','smooth'))
cap_color = hash(keys=c('n','b','c','g','r','p','u','e','w','y'),
values=c('brown','buff','cinnamon','gray','green','pink','purple','red','white','yellow'))
# function to expand abbreviations to full descriptions
expand = function(df, columnName) {
for (key in as.list(keys(get(columnName)))) {
#print(key)
levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
df[df[columnName]==key, columnName] = get(columnName)[[key]]
}
return(df[columnName])
}
# loop through whichever columns to expand
for (i in 1:4) {
columnName = colnames(df)[i]
df[[i]] = expand(df, columnName)
}
head(df)
knitr::kable(head(df))
typeof(df)
typeof(df)
str(df)
install.packages('xtable')
library(xtable)
library(knitr)
#library(xtable)
#xtable(head(df))
library(knitr)
knitr::kable(head(df))
install.packages('printr')
library(printr)
as.dataframe(df)
data.frame(df)
kable(head(df[1:4]), format = "Markdown")
df[[1:4]]
df[[1]]
df[1:4]
kable(head(df))
temp = df[1:5, 1:4]
temp
kable(temp)
typeof(temp)
install.packages("DT")
library(DT)
display = data.frame(head(df[1:4]))
display
dim(display)
datatable(display)
str(display)
str(df)
str(df$classes)
str(df$odor)
factor(df$classes)
df$classes = as.factor(df$classes)
typeof(df$odor)
typeof(df$classes)
head(df)
source('~/Google Drive/R/CUNY/BridgeR_03_Mushrooms.R', echo=TRUE)
str(df)
library(hash)
# read UCI data into dataframe
df = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data", header=FALSE)
# manually add column names
colnames(df) = c('classes','cap_shape','cap_surface','cap_color','bruises?','odor','gill_attachment','gill_spacing',
'gill_size','gill_color','stalk_shape','stalk_root','stalk_surface_above_ring','stalk_surface_below_ring',
'stalk_color_above_ring','stalk_color_below_ring','veil_type','veil_color','ring_number','ring_type','spore_print_color',
'population','habitat')
# create hash tables for abbreviations within each column
classes = hash(keys=c('e','p'),
values=c('edible','poisonous'))
cap_shape = hash(keys=c('b','c','x','f','k','s'),
values=c('bell','conical','convex','flat','knobbed','sunken'))
cap_surface = hash(keys=c('f','g','y','s'),
values=c('fibrous','grooves','scaly','smooth'))
cap_color = hash(keys=c('n','b','c','g','r','p','u','e','w','y'),
values=c('brown','buff','cinnamon','gray','green','pink','purple','red','white','yellow'))
str(df)
columnName = 'classes'
key = 'e'
levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
str(df$classes)
df[df[columnName]==key, columnName] = get(columnName)[[key]]
str(df$classes)
source('~/Google Drive/R/CUNY/BridgeR_03_Mushrooms.R', echo=TRUE)
source('~/Google Drive/R/CUNY/BridgeR_03_Mushrooms.R', echo=TRUE)
str(df)
?read.table
library(hash)
# read UCI data into dataframe
df = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data", header=FALSE)
# manually add column names
colnames(df) = c('classes','cap_shape','cap_surface','cap_color','bruises?','odor','gill_attachment','gill_spacing',
'gill_size','gill_color','stalk_shape','stalk_root','stalk_surface_above_ring','stalk_surface_below_ring',
'stalk_color_above_ring','stalk_color_below_ring','veil_type','veil_color','ring_number','ring_type','spore_print_color',
'population','habitat')
# create hash tables for abbreviations within each column
head(df)
levels(df$classes)
levels(df$classes)[1]
levels(df$classes)[2]
classes = hash(keys=c('e','p'),
values=c('edible','poisonous'))
cap_shape = hash(keys=c('b','c','x','f','k','s'),
values=c('bell','conical','convex','flat','knobbed','sunken'))
cap_surface = hash(keys=c('f','g','y','s'),
values=c('fibrous','grooves','scaly','smooth'))
cap_color = hash(keys=c('n','b','c','g','r','p','u','e','w','y'),
values=c('brown','buff','cinnamon','gray','green','pink','purple','red','white','yellow'))
levels(df$classes)[2]
classes('p')
classes['p']
classes['p'][2]
classes['p'][1]
classes['p']
classes[['p']]
classes[[levels(df$classes[1])]]
classes[[levels(df$classes)[1]]]
levels(df$classes)[1] = classes[[levels(df$classes)[1]]]
head(df)
str(df)
levels(df$classes)
levels(df$classes)['p']
for (i in 1:4) {
columnName = colnames(df)[i]
for (level in levels(df[columnName])) {
print(level)
}
#  for (key in as.list(keys(get(columnName)))) {
#    levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
#    df[df[columnName]==key, columnName] = get(columnName)[[key]]
}
}
# loop through whichever columns and rename factors
for (i in 1:4) {
columnName = colnames(df)[i]
for (level in levels(df[columnName])) {
print(level)
}
#  for (key in as.list(keys(get(columnName)))) {
#    levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
#    df[df[columnName]==key, columnName] = get(columnName)[[key]]
#  }
}
for (i in 1:4) {
}
for (i in 1:4) {
columnName = colnames(df)[i]
for (level in levels(df[columnName])) {
print(level)
}
#  for (key in as.list(keys(get(columnName)))) {
#    levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
#    df[df[columnName]==key, columnName] = get(columnName)[[key]]
#  }
}
levels(df$classes)
for (level in levels(df$classes)) {}
for (level in levels(df$classes)) { print(level) }
source('~/Google Drive/R/CUNY/BridgeR_03_Mushrooms.R', echo=TRUE)
source('~/Google Drive/R/CUNY/BridgeR_03_Mushrooms.R', echo=TRUE)
for (level in levels(df$classes)) { print(level) }
for (level in levels(df$classes)) { df_levels=c(df_levels, level) }
df_levels = levels(df$classes)
df_levels
cap_shape(df_levels)
cap_shape[df_levels]
cap_shape[get(df_levels)]
library(RCurl)
install.packages("RCurl")
library(RCurl)
source('~/.active-rstudio-document', echo=TRUE)
View(X)
source('~/.active-rstudio-document', echo=TRUE)
head(x['V1'])
head(x[c('V1', 'V2'])
head(x[c('V1', 'V2')])
x[c('V1', 'V4', 'V15')]
names = c('Age', 'Education', 'Salary')
x.names = names
head(x)
x = x[c('V1', 'V4', 'V15')]
x.names = name
names = c('Age', 'Education', 'Salary')
x.names = name
x.names = names
x
head(x)
names(x) = names
head(x)
subset(x, 'Age')
?subset
subset(x, select='Age')
head(subset(x, select='Age'))
head(subset(x, select=c('Age', 'Education'))
)
head(x)
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/bridges/bridges.data.version2'
x = read.csv(url, header = F, sep = ',')
View(x)
bridge_data = read.csv(url, header = F, sep = ',')
View(bridge_data)
bridge_data = bridge_data[, c(2, 6, 7)]
colnames = c('', 'Lanes', 'Span')
names(bridge_data) = colnames
View(bridge_data)
bridge_data = read.csv(url, header = F, sep = ',', stringsAsFactors = F)
?pnorm
?pnorm
pnorm(2)
pnorm(0)
dnorm(0)
dnorm(2)
dnorm(-2)
dnorm(1)
dnorm(-1)
dnorm(0)
dnorm(3)
pnorm(62, 63.6, 2.5) - pnorm(60, 63.6, 2.5)
out1 = vector("double", ncol(mtcars))
out1
seq_along(mtcars)
for (i in seq_along(mtcars)) {}
for (i in seq_along(mtcars)) {
out1[[i]] = mean(mtcars[ii], na.rm = T)
}
for (i in seq_along(mtcars)) {
out1[[i]] = mean(mtcars[[i]], na.rm = T)
}
out1
install.packages('purrr')
library(purrr)
x = list(1, 'a', 3)
map(x, print)
walk(x, print)
?ppois
ppois(5, 5.5)
choose(6,1)
choose(6,1)*choose(19,7)/choose(25,8)
?pnorm
pnorm(979, 1300, 40000^0.5)
1 - pnorm(8340, 11000, 1960000^0.5)
?pnorm
pnrom(83, 80, 3)
pnorm(83, 80, 3)
pnorm(85, 80, 3) - pnorm(83, 80, 3)
qnorm(0.14, 456, 123)
qnorm(0.86, 456, 123)
qnorm(0.07, 6.13, 0.06)
qnorm(0.93, 6.13, 0.06)
qnorm(0.2, 78.8, 9.8)
qnorm(0.55, 78.8, 9.8)
qnorm(0.55, 21.1, 5.4)
pnrom(48.83, 48, 7/sqrt(147))
pnorm(48.83, 48, 7/sqrt(147))
1-pnorm(48.83, 48, 7/sqrt(147))
1-pnorm(93.54, 91, 10/sqrt(68))
1-pnorm(93.54, 91, 10/sqrt(68-1))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
sqrt(540)
pnorm(0.3, 0.7, 1)
pnorm(0.03, 0, 1)
pnorm(0.03, 1, 1)
pnorm(0.03, 100, 1)
pnorm(0.03, 1, 1)
pnorm(0)
pnorm(-1)
pnorm(-2)
qnorm(0.027)
qnorm(0.0227)
qnorm(0.015)
qnorm(0.4, 3.9, 3.9/sqrt(208))
qnorm(0.2, 3.9, 3.9/sqrt(208))
qnorm(0.1, 3.9, 3.9/sqrt(208))
qnorm(0.9, 3.9, 3.9/sqrt(208))
qnorm(0.1, 3.9, 0.8/sqrt(208))
qnorm(0.9, 3.9, 0.8/sqrt(208))
qnorm(0.01, 16.6, 11/sqrt(7472))
qnorm(0.99, 16.6, 11/sqrt(7472))
se = sqrt(0.23*(1-0.23)/602)
pnorm(0.27, 0.23, se) - pnorm(0.19, 0.23, se)
se = sqrt(0.07*0.93/540)
pnorm(0.1, 0.07, se) - pnorm(0.04, 0.07, se)
se
se = sqrt(0.07*0.93/540)
se
1- (pnorm(0.27, 0.23, se) - pnorm(0.19, 0.23, se))
(pnorm(0.27, 0.23, se) - pnorm(0.19, 0.23, se))
se = sqrt(0.23*(1-0.23)/602)
se
1-[(pnorm(0.27, 0.23, se) - pnorm(0.19, 0.23, se))]
1-([)(pnorm(0.27, 0.23, se) - pnorm(0.19, 0.23, se)))
1-((pnorm(0.27, 0.23, se) - pnorm(0.19, 0.23, se)))
se
source('more/arbuthnot.R')
source('more/arbuthnot.R')
source("more/arbuthnot.R")
library('openintro')
install.packages("devtools")
library(devtools)
install_github("OpenIntroOrg/openintro-r-package", subdir = "openintro")
source("more/arbuthnot.R")
install.packages("HistData")
source("more/arbuthnot.R")
library(HistData)
source("more/arbuthnot.R")
HistData
data("Arbuthnot")
data
arbuthnot = data("Arbuthnot")
arbuthnot
View(arbuthnot)
source("more/arbuthnot.R")
Arbuthnot
data(Arbuthnot)
arbuthnot = data("Arbuthnot")
arbuthnot
arbuthnot = data(Arbuthnot)
arbuthnot
data(Arbuthnot)
library(HistData)
data("Arbuthnot")
data(Arbuthnot)
data
Arbuthnot
arbuthnot = data(Arbuthnot)
arbuthnot
arbuthnot = Arbuthnot
Arbuthnot
library(HistData)
Arbuthnot
View(Arbuthnot)
dim(Arbuthnot)
artbuthnot
Artbuthnot
library(HistData)
Artbuthnot
Arbuthnot
arbuthnot
Arbuthnot
dim(Arbuthnot)
names(Arbuthnot)
head(Arbuthnot)
View(Arbuthnot)
source("http://www.openintro.org/stat/data/arbuthnot.R")
arbuthnot
remove.packages("HistData")
arbuthnot$girls
head(arbuthnot)
View(arbuthnot)
plot(x=arbuthnot$year, y=arbuthnot$girls)
plot(x=arbuthnot$year, y=arbuthnot$girls, type=l)
plot(x=arbuthnot$year, y=arbuthnot$girls, type='l')
plot(x=arbuthnot$year, y=arbuthnot$boys + arbuthnot$girls, type='l')
plot(x=arbuthnot$year, y=arbuthnot$boys / arbuthnot$girls, type='l')
plot(x=arbuthnot$year, y=arbuthnot$boys > arbuthnot$girls, type='l')
y=arbuthnot$boys > arbuthnot$girls
y
source('https://www.openintro.org/stat/data/present.R')
head(present)
plot(x=present$year, y=present$boys > present$girls)
install.packages(c('openintro','OIdata','devtools','ggplot2','psych','reshape2',
'knitr','markdown','shiny'))
devtools::install_github("jbryer/IS606")
library(IS606)
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA607")
startLab('Lab0')
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA607/Lab0")
