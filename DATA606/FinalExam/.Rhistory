group_by(week) %>%
summarise(projected_rmse = rmse(projected_error), avg_rmse = rmse(avg_error),
projected_mae = mae(projected_error), avg_mae = mae(avg_error)) %>%
gather('error_measure', 'error_value', -1) %>%
ggplot(aes(x = week, y = error_value, col = error_measure)) +
geom_line()
lm = lm(actual_points ~ projected_points, data = df)
summary(lm)
df %>% select(playername, pos, actual_points, projected_points) %>%
ggplot(aes(x = projected_points, y = actual_points)) +
geom_point(col = 'pink', alpha = 0.5) +
geom_abline(intercept = 0) +
geom_smooth(method = 'lm')
path_name = "C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal"
library(recommenderlab)
install.packages("recommenderlab")
library(recommenderlab)
install.packages("arules")
library(recommenderlab)
install.packages("proxy")
library(recommenderlab)
library(dplyr)
library(stringr)
library(recommenderlab)
library(dplyr)
library(stringr)
library(ggplot2)
library(ggthemes)
library(gridExtra)
#setwd("~/Google Drive/CUNY/git/DATA607/ProjectFinal")
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal")
#path_name = "~/Google Drive/CUNY/git/DATA607/ProjectFinal"
path_name = "C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal"
ratings = read.csv(paste0(path_name, '/ml-latest-small/ratings.csv'), stringsAsFactors = FALSE)
movies = read.csv(paste0(path_name, '/ml-latest-small/movies.csv'), stringsAsFactors = FALSE)
# create year column
movies = movies %>% mutate(year = as.integer(str_extract(title, "([[:digit:]]{4})")))
# limit to more recent movies
ratings = ratings %>%
left_join(movies, by = 'movieId') %>%
filter(year >= 2010) %>%
select(userId, movieId, rating, timestamp)
ratings %>% ggplot(aes(x = rating)) +
geom_histogram(bins = 10) +
ggtitle('Histogram of Movie Ratings')
p1 = ratings %>% group_by(userId) %>%
summarise(avgRating = mean(rating), nRatings = n()) %>%
ggplot(aes(x = avgRating)) +
geom_histogram() +
xlab('User Average Rating')
p2 = ratings %>% group_by(userId) %>%
summarise(avgRating = mean(rating), nRatings = n()) %>%
ggplot(aes(x = nRatings)) +
geom_histogram() +
xlab('Number of Rated Movies') +
ylab('Users')
p3 = ratings %>% group_by(movieId) %>%
summarise(avgRating = mean(rating), nRatings = n()) %>%
ggplot(aes(x = avgRating)) +
geom_histogram() +
xlab('Movie Average Rating')
p4 = ratings %>% group_by(movieId) %>%
summarise(avgRating = mean(rating), nRatings = n()) %>%
ggplot(aes(x = nRatings)) +
geom_histogram() +
xlab('Number of Ratings per Movie') +
ylab('Movies')
grid.arrange(p1, p3, p2, p4, ncol = 2)
# transforming numeric IDs into strings so that sparseMatrix function does not fill in missing
# ID numbers and thus preserving correct dimensions
i = paste0('u', ratings$userId)
j = paste0('m', ratings$movieId)
x = ratings$rating
df = data.frame(i, j, x, stringsAsFactors = T)
# interesting that as.integer works on character vector
sparse_matrix = sparseMatrix(as.integer(df$i), as.integer(df$j), x = df$x)
colnames(sparse_matrix) = levels(df$j)
rownames(sparse_matrix) = levels(df$i)
# create recommenderLab real rating object
real_ratings = new('realRatingMatrix', data = sparse_matrix)
# create Recommender object for popular model
model_popular = Recommender(real_ratings, method = 'POPULAR', param = list(normalize = 'center'))
# create prediction object
pred_popular = predict(model_popular, real_ratings[1:5], type = 'ratings')
as(pred_popular, 'matrix')[, 1:5]
# evaluate accuracy of popular model
e_popular = evaluationScheme(real_ratings, method = 'split', train = 0.8, given = -5)
# find movies based on genre and year
#movies %>% filter(str_detect(genres, "Animation") & year == 2014)
# create custom user ratings
custom_ratings_df = data.frame(title = c('The Secret Life of Pets (2016)', 'Kung Fu Panda 3 (2016)', 'Zootopia (2016)', 'Inside Out (2015)',
'Minions (2015)', 'The Good Dinosaur (2015)', 'Hotel Transylvania 2 (2015)', 'The Lego Movie (2014)',
'Mr. Peabody & Sherman (2014)', 'How to Train Your Dragon 2 (2014)', 'Big Hero 6 (2014)',
'Song of the Sea (2014)', 'Paperman (2012)', 'Grand Budapest Hotel, The (2014)',
"King's Speech, The (2010)", 'How to Train Your Dragon (2010)', 'Avengers, The (2012)',
'The Imitation Game (2014)'),
rating = c(3.5, 3.5, 5.0, 4.0, 3.0, 1.0, 5.0, 1.0, 1.0, 4.5, 5.0, 5.0, 5.0, 5.0, 5.0, 4.5, 1.0, 4.0))
#                            rating = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
# add movieId
custom_ratings = custom_ratings_df %>% left_join(movies, by = 'title') %>%
mutate(i = 'uCustom', j = paste0('m', movieId), x = rating) %>% select(i, j, x)
library(recommenderlab)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(ggthemes)
library(gridExtra)
setwd("~/Google Drive/CUNY/git/DATA607/ProjectFinal")
#setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal")
path_name = "~/Google Drive/CUNY/git/DATA607/ProjectFinal"
#path_name = "C:/Users/bhao/Google Drive/CUNY/git/DATA607/ProjectFinal"
ratings = read.csv(paste0(path_name, '/ml-latest-small/ratings.csv'), stringsAsFactors = FALSE)
movies = read.csv(paste0(path_name, '/ml-latest-small/movies.csv'), stringsAsFactors = FALSE)
# create year column
movies = movies %>% mutate(year = as.integer(str_extract(title, "([[:digit:]]{4})")))
# limit to more recent movies
ratings = ratings %>%
left_join(movies, by = 'movieId') %>%
select(userId, movieId, rating, timestamp)
# find movies based on genre and year
#movies %>% filter(str_detect(genres, "Animation") & year == 2014)
# create custom user ratings
custom_ratings_df = data.frame(title = c('The Secret Life of Pets (2016)', 'Kung Fu Panda 3 (2016)', 'Zootopia (2016)', 'Inside Out (2015)',
'Minions (2015)', 'The Good Dinosaur (2015)', 'Hotel Transylvania 2 (2015)', 'The Lego Movie (2014)',
'Mr. Peabody & Sherman (2014)', 'How to Train Your Dragon 2 (2014)', 'Big Hero 6 (2014)',
'Song of the Sea (2014)', 'Paperman (2012)', 'Grand Budapest Hotel, The (2014)',
"King's Speech, The (2010)", 'How to Train Your Dragon (2010)', 'Avengers, The (2012)',
'The Imitation Game (2014)'),
rating = c(3.5, 3.5, 5.0, 4.0, 3.0, 1.0, 5.0, 1.0, 1.0, 4.5, 5.0, 5.0, 5.0, 5.0, 5.0, 4.5, 1.0, 4.0))
#                            rating = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
# add movieId
custom_ratings = custom_ratings_df %>% left_join(movies, by = 'title') %>%
mutate(i = 'uCustom', j = paste0('m', movieId), x = rating) %>% select(i, j, x)
#custom_ratings
custom_df = rbind(df, custom_ratings)
custom_ratings
df
# transforming numeric IDs into strings so that sparseMatrix function does not fill in missing
# ID numbers and thus preserving correct dimensions
i = paste0('u', ratings$userId)
j = paste0('m', ratings$movieId)
x = ratings$rating
df = data.frame(i, j, x, stringsAsFactors = T)
# interesting that as.integer works on character vector
sparse_matrix = sparseMatrix(as.integer(df$i), as.integer(df$j), x = df$x)
colnames(sparse_matrix) = levels(df$j)
rownames(sparse_matrix) = levels(df$i)
# create recommenderLab real rating object
real_ratings = new('realRatingMatrix', data = sparse_matrix)
# find movies based on genre and year
#movies %>% filter(str_detect(genres, "Animation") & year == 2014)
# create custom user ratings
custom_ratings_df = data.frame(title = c('The Secret Life of Pets (2016)', 'Kung Fu Panda 3 (2016)', 'Zootopia (2016)', 'Inside Out (2015)',
'Minions (2015)', 'The Good Dinosaur (2015)', 'Hotel Transylvania 2 (2015)', 'The Lego Movie (2014)',
'Mr. Peabody & Sherman (2014)', 'How to Train Your Dragon 2 (2014)', 'Big Hero 6 (2014)',
'Song of the Sea (2014)', 'Paperman (2012)', 'Grand Budapest Hotel, The (2014)',
"King's Speech, The (2010)", 'How to Train Your Dragon (2010)', 'Avengers, The (2012)',
'The Imitation Game (2014)'),
rating = c(3.5, 3.5, 5.0, 4.0, 3.0, 1.0, 5.0, 1.0, 1.0, 4.5, 5.0, 5.0, 5.0, 5.0, 5.0, 4.5, 1.0, 4.0))
#                            rating = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
# add movieId
custom_ratings = custom_ratings_df %>% left_join(movies, by = 'title') %>%
mutate(i = 'uCustom', j = paste0('m', movieId), x = rating) %>% select(i, j, x)
#custom_ratings
custom_df = rbind(df, custom_ratings)
custom_sparse_matrix = sparseMatrix(as.integer(custom_df$i), as.integer(custom_df$j), x = custom_df$x)
colnames(custom_sparse_matrix) = levels(custom_df$j)
rownames(custom_sparse_matrix) = levels(custom_df$i)
# check custom user ratings
check = data.frame(custom_sparse_matrix[custom_sparse_matrix@Dimnames[[1]] == 'uCustom',])
check$movieId = rownames(check)
colnames(check)[1] = 'rating'
#check[check$rating != 0,]
# create real rating object
custom_real_ratings = new('realRatingMatrix', data = custom_sparse_matrix)
# make prediction using ubcf model
custom_ubcf = predict(model_ubcf, n = 20, custom_real_ratings)
model_ubcf = Recommender(real_ratings, method = 'UBCF', param = list(normalize = 'center'))
# find movies based on genre and year
#movies %>% filter(str_detect(genres, "Animation") & year == 2014)
# create custom user ratings
custom_ratings_df = data.frame(title = c('The Secret Life of Pets (2016)', 'Kung Fu Panda 3 (2016)', 'Zootopia (2016)', 'Inside Out (2015)',
'Minions (2015)', 'The Good Dinosaur (2015)', 'Hotel Transylvania 2 (2015)', 'The Lego Movie (2014)',
'Mr. Peabody & Sherman (2014)', 'How to Train Your Dragon 2 (2014)', 'Big Hero 6 (2014)',
'Song of the Sea (2014)', 'Paperman (2012)', 'Grand Budapest Hotel, The (2014)',
"King's Speech, The (2010)", 'How to Train Your Dragon (2010)', 'Avengers, The (2012)',
'The Imitation Game (2014)'),
rating = c(3.5, 3.5, 5.0, 4.0, 3.0, 1.0, 5.0, 1.0, 1.0, 4.5, 5.0, 5.0, 5.0, 5.0, 5.0, 4.5, 1.0, 4.0))
#                            rating = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
# add movieId
custom_ratings = custom_ratings_df %>% left_join(movies, by = 'title') %>%
mutate(i = 'uCustom', j = paste0('m', movieId), x = rating) %>% select(i, j, x)
#custom_ratings
custom_df = rbind(df, custom_ratings)
custom_sparse_matrix = sparseMatrix(as.integer(custom_df$i), as.integer(custom_df$j), x = custom_df$x)
colnames(custom_sparse_matrix) = levels(custom_df$j)
rownames(custom_sparse_matrix) = levels(custom_df$i)
# check custom user ratings
check = data.frame(custom_sparse_matrix[custom_sparse_matrix@Dimnames[[1]] == 'uCustom',])
check$movieId = rownames(check)
colnames(check)[1] = 'rating'
#check[check$rating != 0,]
# create real rating object
custom_real_ratings = new('realRatingMatrix', data = custom_sparse_matrix)
# make prediction using ubcf model
custom_ubcf = predict(model_ubcf, n = 20, custom_real_ratings)
custom_ubcf = as(custom_ubcf, 'list')$uCustom
custom_ubcf = data.frame(rank = 1:10, movieId = as.integer(str_replace(custom_ubcf, 'm', '')))
custom_ubcf %>% left_join(movies, by = 'movieId')
rbinom(10, 1000, 0.1)
?rbinom
rbinom(10, 10, 0.1)
rbinom(10, 10, 0.1)
hist(rbinom(10, 10, 0.1))
hist(rbinom(100, 100, 0.1))
hist(rbinom(100, 10, 0.1))
hist(rbinom(1000, 10, 0.1))
hist(rbinom(1000, 1000, 0.1))
hist(rbinom(300, 300, 0.1))
hist(rbinom(300, 300, 0.1), width = 2)
?hist
hist(rbinom(300, 300, 0.1), breaks = 25)
hist(rbinom(300, 300, 0.1), breaks = 15)
hist(rbinom(300, 300, 0.1))
hist(rbinom(10, 10, 0.1))
hist(rbinom(10, 10, 0.1))
hist(rbinom(10, 10, 0.1))
?rbinom
dbinom(3, 8, 0.5)
dbinom(3, 8, 0.35)
hist(rgeom(100, 0.5))
hist(rgeom(100, 0.25))
hist(rgeom(100, 0.15))
hist(rgeom(100, 0.05))
hist(rbinom(10, 100, 0.1))
hist(rbinom(100, 10, 0.1))
?rbinom
hist(rbinom(100, 1000, 0.1))
hist(rbinom(10, 1000, 0.1))
hist(rbinom(10, 1000, 0.01))
hist(rbinom(5, 5, 0.5))
hist(rbinom(5, 1000, 0.5))
hist(rbinom(1000, 5, 0.5))
setwd("~/Google Drive/CUNY/git/DATA606/FinalExam")
3.22 / sqrt(30)
options(digits=2)
data1 <- data.frame(x=c(10,8,13,9,11,14,6,4,12,7,5),
y=c(8.04,6.95,7.58,8.81,8.33,9.96,7.24,4.26,10.84,4.82,5.68))
data2 <- data.frame(x=c(10,8,13,9,11,14,6,4,12,7,5),
y=c(9.14,8.14,8.74,8.77,9.26,8.1,6.13,3.1,9.13,7.26,4.74))
data3 <- data.frame(x=c(10,8,13,9,11,14,6,4,12,7,5),
y=c(7.46,6.77,12.74,7.11,7.81,8.84,6.08,5.39,8.15,6.42,5.73))
data4 <- data.frame(x=c(8,8,8,8,8,8,8,19,8,8,8),
y=c(6.58,5.76,7.71,8.84,8.47,7.04,5.25,12.5,5.56,7.91,6.89))
library(dplyr)
df = data.frame(rbind(data1, data2, data3, data4))
df
data1
data1
cbind('data1', data1)
cbind(set = 'data1', data1)
df = data.frame(rbind(cbind(set = 'data1', data1),
cbind(set = 'data2', data2),
cbind(set = 'data3', data3),
cbind(set = 'data4', data4))
df
cbind(set = 'data4', data4)
df = data.frame(rbind(cbind(set = 'data1', data1),
cbind(set = 'data2', data2),
cbind(set = 'data3', data3),
cbind(set = 'data4', data4)))
df
df %>% group_by(set) %>%
summarise(mean_x = mean(x), mean_y = mean(y))
mean(data1$x)
mean(data1$y)
options(digits=2)
df = data.frame(rbind(cbind(set = 'data1', data1),
cbind(set = 'data2', data2),
cbind(set = 'data3', data3),
cbind(set = 'data4', data4)))
df %>% group_by(set) %>%
summarise(mean_x = mean(x), mean_y = mean(y))
mean(data1$y)
mean(data2$y)
df %>% group_by(set) %>%
summarise(mean_x = mean(x), mean_y = mean(y))
data1 <- data.frame(x=c(10,8,13,9,11,14,6,4,12,7,5),
y=c(8.04,6.95,7.58,8.81,8.33,9.96,7.24,4.26,10.84,4.82,5.68))
data2 <- data.frame(x=c(10,8,13,9,11,14,6,4,12,7,5),
y=c(9.14,8.14,8.74,8.77,9.26,8.1,6.13,3.1,9.13,7.26,4.74))
data3 <- data.frame(x=c(10,8,13,9,11,14,6,4,12,7,5),
y=c(7.46,6.77,12.74,7.11,7.81,8.84,6.08,5.39,8.15,6.42,5.73))
data4 <- data.frame(x=c(8,8,8,8,8,8,8,19,8,8,8),
y=c(6.58,5.76,7.71,8.84,8.47,7.04,5.25,12.5,5.56,7.91,6.89))
mean(data1$x)
mean(data2$x)
mean(data3$x)
mean(data4$x)
mean(data4$y)
mean(data3$y)
mean(data2$y)
mean(data1$y)
df %>% group_by(set) %>%
summarise(median_x = median(x), median_y = median(y))
median(data4$x)
median(data4$y)
median(data3$y)
median(data2$y)
median(data1$y)
print.data.frame(df)
options(digits=2)
print.data.frame(df)
print.data.frame(df, digits = 2)
print.data.frame(df, digits = 3)
df = data.frame(rbind(cbind(set = 'data1', data1),
cbind(set = 'data2', data2),
cbind(set = 'data3', data3),
cbind(set = 'data4', data4)))
df %>% group_by(set) %>%
summarise(mean_x = mean(x), mean_y = mean(y))
options(digits=2)
print.data.frame(df, digits = 3)
print.data.frame(df, digits = 3)
print.data.frame(df, digits = 1)
print.data.frame(df, digits = 4)
print.data.frame(df, digits = 5)
print.data.frame(df, digits = 3)
print.data.frame(df, digits = 4)
library(knitr)
options(digits=2)
print.data.frame(df, digits = 4)
library(dplyr)
setwd("~/Google Drive/CUNY/git/DATA606/FinalExam")
3.22 / sqrt(30)
options(digits=2)
data1 <- data.frame(x=c(10,8,13,9,11,14,6,4,12,7,5),
y=c(8.04,6.95,7.58,8.81,8.33,9.96,7.24,4.26,10.84,4.82,5.68))
data2 <- data.frame(x=c(10,8,13,9,11,14,6,4,12,7,5),
y=c(9.14,8.14,8.74,8.77,9.26,8.1,6.13,3.1,9.13,7.26,4.74))
data3 <- data.frame(x=c(10,8,13,9,11,14,6,4,12,7,5),
y=c(7.46,6.77,12.74,7.11,7.81,8.84,6.08,5.39,8.15,6.42,5.73))
data4 <- data.frame(x=c(8,8,8,8,8,8,8,19,8,8,8),
y=c(6.58,5.76,7.71,8.84,8.47,7.04,5.25,12.5,5.56,7.91,6.89))
options(digits=2)
df = data.frame(rbind(cbind(set = 'data1', data1),
cbind(set = 'data2', data2),
cbind(set = 'data3', data3),
cbind(set = 'data4', data4)))
df %>% group_by(set) %>%
summarise(mean_x = mean(x), mean_y = mean(y))
library(knitr)
options(digits=2)
print.data.frame(df, digits = 4)
df %>% group_by(set) %>%
summarise(median_x = median(x), median_y = median(y))
options(digits=3)
df = data.frame(rbind(cbind(set = 'data1', data1),
cbind(set = 'data2', data2),
cbind(set = 'data3', data3),
cbind(set = 'data4', data4)))
df %>% group_by(set) %>%
summarise(mean_x = mean(x), mean_y = mean(y))
library(knitr)
options(digits=2)
print.data.frame(df, digits = 4)
library(dplyr)
setwd("~/Google Drive/CUNY/git/DATA606/FinalExam")
3.22 / sqrt(30)
options(digits=2)
data1 <- data.frame(x=c(10,8,13,9,11,14,6,4,12,7,5),
y=c(8.04,6.95,7.58,8.81,8.33,9.96,7.24,4.26,10.84,4.82,5.68))
data2 <- data.frame(x=c(10,8,13,9,11,14,6,4,12,7,5),
y=c(9.14,8.14,8.74,8.77,9.26,8.1,6.13,3.1,9.13,7.26,4.74))
data3 <- data.frame(x=c(10,8,13,9,11,14,6,4,12,7,5),
y=c(7.46,6.77,12.74,7.11,7.81,8.84,6.08,5.39,8.15,6.42,5.73))
data4 <- data.frame(x=c(8,8,8,8,8,8,8,19,8,8,8),
y=c(6.58,5.76,7.71,8.84,8.47,7.04,5.25,12.5,5.56,7.91,6.89))
df = data.frame(rbind(cbind(set = 'data1', data1),
cbind(set = 'data2', data2),
cbind(set = 'data3', data3),
cbind(set = 'data4', data4)))
df_mean = df %>% group_by(set) %>%
summarise(mean_x = mean(x), mean_y = mean(y))
print.data.frame(df_mean, digits = 3)
df %>% group_by(set) %>%
summarise(median_x = median(x), median_y = median(y))
print.data.frame(df_mean, digits = 4)
print.data.frame(df_mean, digits = 3)
df_median = df %>% group_by(set) %>%
summarise(median_x = median(x), median_y = median(y))
print.data.frame(df_median, digits = 3)
df_sd = df %>% group_by(set) %>%
summarise(sd_x = sd(x), sd_y = sd(y))
print.data.frame(df_sd, digits = 3)
sd(data2$y  )
sd(data3$y)
df_cor = df %>% group_by(set) %>%
summarise(cor = cor(x, y))
print.data.frame(df_cor, digits = 3)
cor(data1$x, data1$y)
cor(data2$x, data2$y)
cor(data3$x, data3$y)
summary(lm(y ~ x, data = data1))
lm(y ~ x, data = data1)
summary(lm)
lm = lm(y ~ x, data = data1)
summary(lm)
str(lm)
lm(y ~ x, data = data1)
df %>% group_by(set) %>%
summarise(lm = lm(y ~ x))
df
df %>% group_by(set) %>%
summarise(lm = lm(y ~ x))
df %>% group_by(set) %>%
summarise(lm = lm(y ~ x, data = .))
df %>% group_by(set) %>%
do(model = lm(y ~ x, data = .)) %>%
mutate(slope = summary(model)$coeff[2])
df %>% group_by(set) %>%
do(model = lm(y ~ x, data = .)) %>%
mutate(intercept = summary(model)$coeff[1],
slope = summary(model)$coeff[2])
df %>% group_by(set) %>%
do(model = lm(y ~ x, data = .)) %>%
mutate(intercept = summary(model)$coeff[1],
slope = summary(model)$coeff[2]) %>%
select(-model)
lm(y ~ x, data = data1)
lm(y ~ x, data = data2)
lm(y ~ x, data = data3)
lm(y ~ x, data = data4)
df_lm = df %>% group_by(set) %>%
do(model = lm(y ~ x, data = .)) %>%
mutate(intercept = summary(model)$coeff[1],
slope = summary(model)$coeff[2]) %>%
select(-model)
print.data.frame(df_lm, digits = 3)
model = lm(y ~ x, data = data1)
summary(model)
model$call
model$residuals
model$qr
model$xlevels
model$assign
model$model
model$terms
str(summary(model))
str(summary(model))$r.squared
str(summary(model))$r.squared
str(summary(model))
str(summary(model))['r.squared']
str(summary(model))[['r.squared']]
summary(model)
summary(model)$r.squared
df %>% group_by(set) %>%
do(model = lm(y ~ x, data = .)) %>%
mutate(rsq = summary(model)$r.squared) %>%
select(-model)
model = lm(y ~ x, data = data2)
summary(model)$r.squared
model = lm(y ~ x, data = data3)
summary(model)$r.squared
model = lm(y ~ x, data = data4)
summary(model)$r.squared
df_rsq = df %>% group_by(set) %>%
do(model = lm(y ~ x, data = .)) %>%
mutate(rsq = summary(model)$r.squared) %>%
select(-model)
print.data.frame(df_rsq, digits = 3)
library(ggplot2)
df %>% ggplot(aes(x = x, y = y)) %>%
geom_point() %>%
facet_grid(~ . set)
df %>% ggplot(aes(x = x, y = y)) +
geom_point() +
facet_grid(~ . set)
df
df %>% ggplot(aes(x = x, y = y)) +
geom_point()
df %>% ggplot(aes(x = x, y = y)) +
geom_point() +
facet_grid(~ . set)
df %>% ggplot(aes(x = x, y = y)) +
geom_point() + facet_grid(~ . set)
df %>% ggplot(aes(x = x, y = y)) +
geom_point() + facet_grid(. ~ set)
df %>% ggplot(aes(x = x, y = y)) +
geom_point() +
facet_grid(. ~ set) +
stat_smooth()
df %>% ggplot(aes(x = x, y = y)) +
geom_point() +
facet_grid(. ~ set) +
df %>% ggplot(aes(x = x, y = y)) +
geom_point() +
facet_grid(. ~ set) +
df %>% ggplot(aes(x = x, y = y)) +
geom_point() +
facet_grid(. ~ set)
df %>% ggplot(aes(x = x, y = y)) +
geom_point() +
facet_grid(. ~ set)
df %>% ggplot(aes(x = x, y = y)) +
geom_point() +
facet_grid(. ~ set) +
stat_smooth(method = 'lm')
summary(lm(y ~ x, data = data1))
summary(lm(y ~ x, data = data2))
summary(lm(y ~ x, data = data3))
