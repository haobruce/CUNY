# create vector to house player ID and state
player_id = seq(1, nrow(input), 2)
state_rank_id = seq(2, nrow(input), 2)
state_rank = select(input[state_id, ], State = Pair.Num, Rank = Player.Name)
# apply player_id vector to input to isolate player rows; combine with states
output = input[player_id, ]
head(output)
output = bind_cols(output, as.data.frame(state_rank))
head(output)
head(output)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess2 = read.csv(text=url, stringsAsFactors = F)
chess2 = unlist(chess2)
chess2 = str_replace_all(chess2, '-', '')
chess2 = str_split(chess2, '\\|', simplify = T)
input = as.data.frame(chess2, stringsAsFactors = F)
input = input[input[,1] != '', ]  # delete empty rows
input = input[, -11]  # drop last column
# first two rows make up the column names
header = paste(str_trim(as.character(input[1,])), str_trim(as.character(input[2,])))
header = make.names(str_sub(header, 1, 11))  # limit header name to 11 characters for Player.Name column
names(input) = header
# drop first two rows
input = input[-1:-2,]
# create vector to house player ID and state
player_id = seq(1, nrow(input), 2)
state_rank_id = seq(2, nrow(input), 2)
state_rank = select(input[state_id, ], State = Pair.Num, Rank = Player.Name)
# apply player_id vector to input to isolate player rows; combine with states
output = input[player_id, ]
output = bind_cols(output, as.data.frame(state_rank))
head(output)
head(output[, 2:12])
head(output[, 2:13])
head(output[, 3:12])
str_extract(state_rank$Rank, 'R:+\\d{4}')
str_extract(state_rank$Rank, 'R:?\\d{4}')
str_extract(state_rank$Rank, 'R:?\\d+')
str_extract(state_rank$Rank, 'R:?')
str_extract(state_rank$Rank, 'R:_')
str_extract(state_rank$Rank, 'R: ')
str_extract(state_rank$Rank, 'R: \\d')
str_extract(state_rank$Rank, 'R: \\d{4}')
str_extract(state_rank$Rank, 'R:\\s')
str_extract(state_rank$Rank, 'R:\\s\\d+')
player_id = seq(1, nrow(input), 2)
state_rank_id = seq(2, nrow(input), 2)
state_rank = select(input[state_id, ], State = Pair.Num, Rank = Player.Name)
state_rank$Rank = str_extract(state_rank$Rank, 'R:\\s\\d+')
state_rank$Rank = str_extract(state_rank$Rank, '\\d+')
# apply player_id vector to input to isolate player rows; combine with states
output = input[player_id, ]
output = bind_cols(output, as.data.frame(state_rank))
head(output)
head(output[, 2:12])
head(output[, 3:12])
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess2 = unlist(read.csv(text=url, stringsAsFactors = F))  # convert output to string
#chess2 = str_replace_all(chess2, '-', '')
chess2 = str_split(chess2, '\\|', simplify = T)
input = as.data.frame(chess2, stringsAsFactors = F)
head(input)
input = input[input[,1] != '', ]  # delete empty rows
head(input)
input = input[input[,1] != '-', ]  # delete empty rows
head(input)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess2 = unlist(read.csv(text=url, stringsAsFactors = F))  # convert output to string
chess2 = str_replace_all(chess2, '-', '')
chess2 = str_split(chess2, '\\|', simplify = T)
input = as.data.frame(chess2, stringsAsFactors = F)
input = input[input[,1] != '-', ]  # delete empty rows
head(input)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess2 = unlist(read.csv(text=url, stringsAsFactors = F))  # convert output to string
chess2 = str_replace_all(chess2, '-', '')
chess2 = str_split(chess2, '\\|', simplify = T)
input = as.data.frame(chess2, stringsAsFactors = F)
input = input[input[,1] != '-', ]  # delete empty rows
input = input[, -11]  # drop last column
# first two rows make up the column names
header = paste(str_trim(as.character(input[1,])), str_trim(as.character(input[2,])))
header = make.names(str_sub(header, 1, 11))  # limit header name to 11 characters for Player.Name column
names(input) = header
# drop first two rows
input = input[-1:-2,]
# create vector to house player ID and state
player_id = seq(1, nrow(input), 2)
state_rank_id = seq(2, nrow(input), 2)
state_rank = select(input[state_id, ], State = Pair.Num, Rank = Player.Name)
state_rank$Rank = str_extract(state_rank$Rank, 'R:\\s\\d+')
state_rank$Rank = str_extract(state_rank$Rank, '\\d+')
# apply player_id vector to input to isolate player rows; combine with states
output = input[player_id, ]
output = bind_cols(output, as.data.frame(state_rank))
head(output)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess2 = unlist(read.csv(text=url, stringsAsFactors = F))  # convert output to string
chess2 = str_replace_all(chess2, '-', '')
chess2 = str_split(chess2, '\\|', simplify = T)
input = as.data.frame(chess2, stringsAsFactors = F)
input = input[input[,1] != '', ]  # delete empty rows
input = input[, -11]  # drop last column
# first two rows make up the column names
header = paste(str_trim(as.character(input[1,])), str_trim(as.character(input[2,])))
header = make.names(str_sub(header, 1, 11))  # limit header name to 11 characters for Player.Name column
names(input) = header
# drop first two rows
input = input[-1:-2,]
# create vector to house player ID and state
player_id = seq(1, nrow(input), 2)
state_rank_id = seq(2, nrow(input), 2)
state_rank = select(input[state_id, ], State = Pair.Num, Rank = Player.Name)
state_rank$Rank = str_extract(state_rank$Rank, 'R:\\s\\d+')
state_rank$Rank = str_extract(state_rank$Rank, '\\d+')
# apply player_id vector to input to isolate player rows; combine with states
output = input[player_id, ]
output = bind_cols(output, as.data.frame(state_rank))
head(output)
output[3, 7]
parse_number(output[3, 7])
?parse_number
install.packages(read4)
install.packages('readr')
library(readr)
head(output)
output %>%
gather('Round', 4:10) %>%
mutate(OppNum = parse_number(OppNum))
source('~/.active-rstudio-document', echo=TRUE)
output %>%
gather('Round', 4:10) %>%
mutate(OppNum = parse_number(OppNum))
library(dplyr)
output %>%
gather('Round', 4:10) %>%
mutate(OppNum = parse_number(OppNum))
?gather
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
library(readr)
library(stringr)
library(dplyr)
library(DT)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess2 = unlist(read.csv(text=url, stringsAsFactors = F))  # convert output to string
chess2 = str_replace_all(chess2, '-', '')
chess2 = str_split(chess2, '\\|', simplify = T)
input = as.data.frame(chess2, stringsAsFactors = F)
input = input[input[,1] != '', ]  # delete empty rows
input = input[, -11]  # drop last column
# first two rows make up the column names
header = paste(str_trim(as.character(input[1,])), str_trim(as.character(input[2,])))
header = make.names(str_sub(header, 1, 11))  # limit header name to 11 characters for Player.Name column
names(input) = header
# drop first two rows
input = input[-1:-2,]
# create vector to house player ID and state
player_id = seq(1, nrow(input), 2)
state_rank_id = seq(2, nrow(input), 2)
state_rank = select(input[state_id, ], State = Pair.Num, Rank = Player.Name)
state_rank$Rank = str_extract(state_rank$Rank, 'R:\\s\\d+')
state_rank$Rank = str_extract(state_rank$Rank, '\\d+')
# apply player_id vector to input to isolate player rows; combine with states
output = input[player_id, ]
output = bind_cols(output, as.data.frame(state_rank))
state_rank_id = seq(2, nrow(input), 2)
state_rank = select(input[state_id, ], State = Pair.Num, Rank = Player.Name)
state_rank = select(input[state_rank_id, ], State = Pair.Num, Rank = Player.Name)
state_rank$Rank = str_extract(state_rank$Rank, 'R:\\s\\d+')
state_rank$Rank = str_extract(state_rank$Rank, '\\d+')
output = input[player_id, ]
output = bind_cols(output, as.data.frame(state_rank))
head(output)
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
library(readr)
library(stringr)
library(dplyr)
library(DT)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess2 = unlist(read.csv(text=url, stringsAsFactors = F))  # convert output to string
chess2 = str_replace_all(chess2, '-', '')
chess2 = str_split(chess2, '\\|', simplify = T)
input = as.data.frame(chess2, stringsAsFactors = F)
input = input[input[,1] != '', ]  # delete empty rows
input = input[, -11]  # drop last column
# first two rows make up the column names
header = paste(str_trim(as.character(input[1,])), str_trim(as.character(input[2,])))
header = make.names(str_sub(header, 1, 11))  # limit header name to 11 characters for Player.Name column
names(input) = header
# drop first two rows
input = input[-1:-2,]
# create vector to house player ID and state
player_id = seq(1, nrow(input), 2)
state_rank_id = seq(2, nrow(input), 2)
state_rank = select(input[state_rank_id, ], State = Pair.Num, Rank = Player.Name)
state_rank$Rank = str_extract(state_rank$Rank, 'R:\\s\\d+')
state_rank$Rank = str_extract(state_rank$Rank, '\\d+')
# apply player_id vector to input to isolate player rows; combine with states
output = input[player_id, ]
output = bind_cols(output, as.data.frame(state_rank))
head(output)
output %>%
gather('Round', 4:10) %>%
mutate(OppNum = parse_number(OppNum))
gather(output, 'Round', 4:10)
library(tidyr)
output %>%
gather('Round', 4:10) %>%
mutate(OppNum = parse_number(OppNum))
output[1, 4:10-]
output[1, 4:10]
output %>%
gather('Round', 4:10)
?gather
gather(output, key=Round, 4:10)
output %>%
gather('Round', 'OppNum', 4:10) %>%
mutate(OppNum = parse_number(OppNum))
output %>%
gather('Round', 'OppNum', 4:10) %>%
mutate(OppNum = parse_number(OppNum)) %>%
group_by(Player.Name) %>%
summarize(AvgOppRank = mean(OppNum))
output %>%
gather('Round', 'OppNum', 4:10) %>%
mutate(OppNum = parse_number(OppNum))
temp = output %>%
gather('Round', 'OppNum', 4:10) %>%
mutate(OppNum = parse_number(OppNum))
head(temp, 10)
temp[temp$Pair.Num == 2, 'Rank']
temp[temp$Pair.Num == 2, ]
temp[temp$Pair.Num = 2, ]
temp[temp$Pair.Num == 2, ]
temp[2,1]
head(chess2)
head(str_trim(chess2))
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess2 = unlist(read.csv(text=url, stringsAsFactors = F))  # convert output to string
chess2 = str_replace_all(chess2, '-', '')
chess2 = str_split(chess2, '\\|', simplify = T)
chess2 = str_trim(chess2)
input = as.data.frame(chess2, stringsAsFactors = F)
input = input[input[,1] != '', ]  # delete empty rows
input = input[, -11]  # drop last column
# first two rows make up the column names
header = paste(str_trim(as.character(input[1,])), str_trim(as.character(input[2,])))
header = make.names(str_sub(header, 1, 11))  # limit header name to 11 characters for Player.Name column
names(input) = header
# drop first two rows
input = input[-1:-2,]
# create vector to house player ID and state
player_id = seq(1, nrow(input), 2)
state_rank_id = seq(2, nrow(input), 2)
state_rank = select(input[state_rank_id, ], State = Pair.Num, Rank = Player.Name)
state_rank$Rank = str_extract(state_rank$Rank, 'R:\\s\\d+')
state_rank$Rank = str_extract(state_rank$Rank, '\\d+')
# apply player_id vector to input to isolate player rows; combine with states
output = input[player_id, ]
output = bind_cols(output, as.data.frame(state_rank))
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess2 = unlist(read.csv(text=url, stringsAsFactors = F))  # convert output to string
chess2 = str_replace_all(chess2, '-', '')
chess2 = str_split(chess2, '\\|', simplify = T)
chess2 = str_trim(chess2)
input = as.data.frame(chess2, stringsAsFactors = F)
input = input[input[,1] != '', ]  # delete empty rows
input = input[, -11]  # drop last column
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess2 = unlist(read.csv(text=url, stringsAsFactors = F))  # convert output to string
chess2 = str_replace_all(chess2, '-', '')
chess2 = str_split(chess2, '\\|', simplify = T)
chess2 = str_trim(chess2)
input = as.data.frame(chess2, stringsAsFactors = F)
head(input)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess2 = unlist(read.csv(text=url, stringsAsFactors = F))  # convert output to string
chess2 = str_replace_all(chess2, '-', '')
chess2 = str_split(chess2, '\\|', simplify = T)
head(chess2)
chess2 = str_trim(chess2)
chess2
head(chess2)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess2 = unlist(read.csv(text=url, stringsAsFactors = F))  # convert output to string
chess2 = str_replace_all(chess2, '-', '')
chess2 = str_split(chess2, '\\|', simplify = T)
head(chess2)
chess2 = str_pad(chess2, 0)
head(chess2)
chess2 = unlist(read.csv(text=url, stringsAsFactors = F))  # convert output to string
chess2 = str_replace_all(chess2, '-', '')
chess2 = str_split(chess2, '\\|', simplify = T)
input = as.data.frame(chess2, stringsAsFactors = F)
input = input[input[,1] != '', ]  # delete empty rows
input = input[, -11]  # drop last column
head(input)
?trimws
trimws(chess2)
head(trimws(chess2))
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess2 = unlist(read.csv(text=url, stringsAsFactors = F))  # convert output to string
chess2 = str_replace_all(chess2, '-', '')
chess2 = str_split(chess2, '\\|', simplify = T)
chess2 = trimws(chess2)
input = as.data.frame(chess2, stringsAsFactors = F)
input = input[input[,1] != '', ]  # delete empty rows
input = input[, -11]  # drop last column
# first two rows make up the column names
header = paste(str_trim(as.character(input[1,])), str_trim(as.character(input[2,])))
header = make.names(str_sub(header, 1, 11))  # limit header name to 11 characters for Player.Name column
names(input) = header
# drop first two rows
input = input[-1:-2,]
# create vector to house player ID and state
player_id = seq(1, nrow(input), 2)
state_rank_id = seq(2, nrow(input), 2)
state_rank = select(input[state_rank_id, ], State = Pair.Num, Rank = Player.Name)
state_rank$Rank = str_extract(state_rank$Rank, 'R:\\s\\d+')
state_rank$Rank = str_extract(state_rank$Rank, '\\d+')
# apply player_id vector to input to isolate player rows; combine with states
output = input[player_id, ]
output = bind_cols(output, as.data.frame(state_rank))
head(output)
output %>%
gather('Round', 'OppNum', 4:10) %>%
mutate(OppNum = parse_number(OppNum))
test = output %>%
gather('Round', 'OppNum', 4:10) %>%
mutate(OppNum = parse_number(OppNum))
test[test$Pair.Num == 2, 'Rank']
output %>%
gather('Round', 'OppNum', 4:10) %>%
mutate(OppNum = parse_number(OppNum)) %>%
mutate(OppRank = output[output$Pair.Num == OppNum, 'Rank'])
output_tidy = output %>%
gather('Round', 'OppNum', 4:10) %>%
mutate(OppNum = parse_number(OppNum))
output_tidy$OppNum = output[output$Pair.Num == output_tidy$OppNum, ]
head(output_tidy)
output_tidy$OppNum = output[output$Pair.Num == output_tidy$OppNum, 'Rank']
head(output_tidy)
select(output, Pair.Num, OppRank = Rank)
opp_rankings = select(output, Pair.Num, OppRank = Rank)
str(opp_rankings)
opp_rankings %>% distinct()
opp_rankings = opp_rankings %>% distinct()
str(opp_rankings)
output_tidy = left_join(output_tidy, output, OppNum = Rank)
head(output_tidy)
output_tidy = output %>%
gather('Round', 'OppNum', 4:10) %>%
mutate(OppNum = parse_number(OppNum))
head(output_tidy)
output_tidy = left_join(output_tidy, output, by = c('OppNum' = 'Pair.Num'))
str(output_tidy)
output_tidy = output %>%
gather('Round', 'OppNum', 4:10) %>%
mutate(OppNum = as.int(parse_number(OppNum)))
output_tidy = output %>%
gather('Round', 'OppNum', 4:10) %>%
mutate(OppNum = as.numeric(parse_number(OppNum)))
output_tidy = left_join(output_tidy, output, by = c('OppNum' = 'Pair.Num'))
str(output_tidy)
str(output)
output_tidy = output %>%
gather('Round', 'OppNum', 4:10) %>%
mutate(OppNum = as.character(parse_number(OppNum)))
output_tidy = left_join(output_tidy, output, by = c('OppNum' = 'Pair.Num'))
head(output_tidy)
output_tidy = left_join(output_tidy, output$Rank, by = c('OppNum' = 'Pair.Num'))
ranks = output[c('Pair.Num', 'Rank')]
output_tidy = left_join(output_tidy, ranks, by = c('OppNum' = 'Pair.Num'))
head(output_tidy)
output_tidy = output %>%
gather('Round', 'OppNum', 4:10) %>%
mutate(OppNum = as.character(parse_number(OppNum)))
ranks = output[c('Pair.Num', 'Rank')]
output_tidy = left_join(output_tidy, ranks, by = c('OppNum' = 'Pair.Num'))
head(output_tidy)
output_wide = output_tidy %>%
group_by(Player.Name) %>%
summarize(AvgOppRank = mean(Rank.y, rm.na=T))
head(output_wid)
head(output_wide)
?mean
output_wide = output_tidy %>%
group_by(Player.Name) %>%
summarize(AvgOppRank = mean(Rank.y, na.rm = T))
head(output_wide)
output_tidy
?sort
arrange(output_tidy, Player.Name)
?mean
output_wide
tail(output_wide)
output_tidy = output %>%
gather('Round', 'OppNum', 4:10) %>%
mutate(OppNum = as.character(parse_number(OppNum)))
ranks = output[c('Pair.Num', 'Rank')]
output_tidy = left_join(output_tidy, ranks, by = c('OppNum' = 'Pair.Num'))
output_tidy$OppNum = output[output$Pair.Num == output_tidy$OppNum, 'Rank']
output_wide = output_tidy %>%
group_by(Player.Name) %>%
summarize(AvgOppRank = mean(Rank.y, na.rm = T))
output_wide
output_wide = output_tidy %>%
group_by(Player.Name) %>%
summarize(AvgOppRank = sum(Rank.y, na.rm = T))
output_wide = output_tidy %>%
group_by(Player.Name) %>%
summarize(AvgOppRank = sum(as.numeric(Rank.y), na.rm = T))
output_wide
output_wide = output_tidy %>%
group_by(Player.Name) %>%
summarize(AvgOppRank = mean(as.numeric(Rank.y), na.rm = T))
output_wide
avg_opp_rank = output_tidy %>%
group_by(Player.Name) %>%
summarize(AvgOppRank = round(mean(as.numeric(Rank.y), na.rm = T), 0)
avg_opp_rank = output_tidy %>%
group_by(Player.Name) %>%
summarize(AvgOppRank = round(mean(as.numeric(Rank.y), na.rm = T), 0))
avg_opp_rank
avg_opp_rank[avg_opp_rank$Player.Name=='GARY HUA', ]
avg_opp_rank[avg_opp_rank$Player.Name=='DAKSESH DARURI', ]
avg_opp_rank[avg_opp_rank$Player.Name=='DAKSHESH DARURI', ]
avg_opp_rank[avg_opp_rank$Player.Name=='ADITYA BAJAJ', ]
?switch
rm(list=ls())
load("/Users/brucehao/Google Drive/FFA/git/FantasyFootballAnalyticsR/Data/AvgCost.RData")
install.packages(c("devtools","rstudioapi"), dependencies=TRUE, repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
devtools::install_github(repo = "dadrivr/FantasyFootballAnalyticsR",  subdir = "R Package/ffanalytics")
install.packages('acepack')
devtools::install_github(repo = "dadrivr/FantasyFootballAnalyticsR",  subdir = "R Package/ffanalytics")
devtools::install_github(repo = "dadrivr/FantasyFootballAnalyticsR",  subdir = "R Package/ffanalytics")
install.packages(c("devtools","rstudioapi","shiny","miniUI","data.table","stringr","DT","XML","httr","tcltk","RCurl","Hmisc","readxl","RSelenium"), dependencies=TRUE, repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages(c("devtools", "rstudioapi", "shiny", "miniUI",
---
)
install.packages(c("devtools","rstudioapi","shiny","miniUI","data.table","stringr","DT","XML","httr","tcltk","RCurl","Hmisc","readxl","RSelenium"), dependencies=TRUE, repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages('C:/Users/bhao/Google Drive/FFA/git/FantasyFootballAnalyticsR/R Package/ffanalytics_0.1.9.tar.gz', repos=NULL, type="source")
library(ffanalytics)
library(ffanalytics)
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA606/Lab4b")
#setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA606/Lab4b")
library(IS606)
library(dplyr)
library(ggplot2)
library(ggthemes)
set.seed(123)
load("more/ames.RData")
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
summary(samp)
qplot(samp, geom = 'histogram', bins = 10)
mean(population)
se <- sd(samp) / sqrt(60)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
mean(population)
se <- sd(samp) / sqrt(60)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
mean(population)
se <- sd(samp) / sqrt(60)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
mean(population)
se <- sd(samp) / sqrt(60)
sample_mean <- mean(sample_mean)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
mean(population)
se <- sd(samp) / sqrt(60)
sample_mean <- mean(sample_mean)
sample_mean <- mean(samp)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
mean(population)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp)        # save sample sd in ith element of samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1], upper_vector[1])
lower_vector
plot_ci(lower_vector, upper_vector, mean(population))
qnorm(-0.25)
qnorm(0.25)
qnorm(0.75)
lower_vector <- samp_mean - 0.67 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 0.67 * samp_sd / sqrt(n)
c(lower_vector[1], upper_vector[1])
c(lower_vector[1], upper_vector[1])
lower_vector <- samp_mean - 0.67 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 0.67 * samp_sd / sqrt(n)
c(lower_vector[1], upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
