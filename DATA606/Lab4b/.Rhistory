opp1 = as.numeric(str_sub(chess[i,], 51, 52))  # retrieve opponent numbers to calculate avg later
opp2 = as.numeric(str_sub(chess[i,], 57, 58))
opp3 = as.numeric(str_sub(chess[i,], 63, 64))
opp4 = as.numeric(str_sub(chess[i,], 69, 70))
opp5 = as.numeric(str_sub(chess[i,], 75, 76))
opp6 = as.numeric(str_sub(chess[i,], 81, 82))
opp7 = as.numeric(str_sub(chess[i,], 87, 88))
new_row = data.frame('PlayerName' = player, 'PlayerState' = state, 'TotalPoints' = points,
'PreRating' = preRating, 'OpponentAvgPreRating' = 0.0, 'Opp1' = opp1,
'Opp2' = opp2, 'Opp3' = opp3, 'Opp4' = opp4, 'Opp5' = opp5, 'Opp6' = opp6,
'Opp7' = opp7, stringsAsFactors = F)
# append data to data frame
df = rbind(df, new_row)
}
}
head(df)
View(df)
datatable(df[, c('PlayerName', 'PlayerState', 'TotalPoints', 'PreRating', 'OpponentAvgPreRating')])
library(DT)
datatable(df[, c('PlayerName', 'PlayerState', 'TotalPoints', 'PreRating', 'OpponentAvgPreRating')])
?datatable
df[index]
library(ggplot2)
ggplot(data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = dnorm)
data.frame(x = c(-5, 5))
ggplot(data.frame(x = c(-5, 5)), aes(x)) + geom_point()
ggplot(data.frame(x = c(-5, 5)), aes(x)) + geom_line()
ggplot(data.frame(x = c(-5, 5)), aes(x)) + geom_histogram()
install.packages('DT')
install.packages('plotly')
mc = read.csv('/Users/bhao/Deskto/MC.csv', header = T)
mc = read.csv('/Users/bhao/Desktop/MC.csv', header = T)
head(mc)
hist(mc$X2021NAV)
2021NAV = mc$X2020NAV
NAV2021 = mc$X2020NAV
str(NAV2021)
NAV2021 = as.numeric(NAV2021)
str(NAV2021)
head(NAV2021)
NAV2021 = mc$X2020NAV
head(NAV2021)
mc = read.csv('/Users/bhao/Desktop/MC.csv', header = T, stringsAsFactors = F)
NAV2021 = mc$X2020NAV
head(NAV2021)
head(as.numeric(NAV2021))
library(stringr)
NAV2021 = str_replace(NAV2021, ",", "")
head(NAV2021)
head(as.numeric(NAV2021))
NAV2021 = as.numeric(NAV2021)
hist(NAV2021)
?hist
hist(NAV2021, breaks = 10)
hist(NAV2021, breaks = 20)
library(ggplot2)
ggplot(aes(x=NAV2021)) + geom_histogram()
ggplot() + aes(x=NAV2021) + geom_histogram()
ggplot(aes(x=NAV2021)) + geom_histogram()
ggplot() + aes(x=NAV2021) + geom_histogram()
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
library(stringr)
library(DT)
url = getURL('https://raw.githubusercontent.com/haobruce/CUNY/master/DATA607/Project1/tournamentinfo.txt')
chess = read.csv(text=url, stringsAsFactors = F)
head(chess)
col.names = c("Pair Num", "Player Name USCF ID / Rtg (Pre->Post",  "Total Pts", "Round 1", "Round 2", "Round 3",                                                             "Round 4", "Round 5", "Round 6", "Round 7")
read.table("tournamentinfo.webarchive", sep = "\t",
header = TRUE)
test = data.frame(c(seq(1,10,1), seq(90,100,1)))
test
?data.frame
test = data.frame(x=seq(1,10,1), y=seq(90,100,1))
seq(90,100,1)
test = data.frame(x=seq(0,10,1), y=seq(90,100,1))
test
names(test)
names(test) = c('a', 'b')
names(test)
test
names(test) = c('/', 'b')
test
names(test) = c('(->', 'b')
test
names(test) = c('(->', 'Player Name USCF ID / Rtg (Pre->Post')
test
chess = read.csv(text=url, stringsAsFactors = T)
chess
str(chess)
chess = read.csv(text=url, stringsAsFactors = F)
str(chess)
library(quandl)
install.packages('Quandl')
library(Quandl)
Quandl("CME/MGCQ2015", api_key="g1CWzGxxg2WxNVbV5n9y")
key = "g1CWzGxxg2WxNVbV5n9y"
EDZ2018 = Quandl('CME/EDZ2018', auth_key=key)
head(EDZ2018)
sd(EDZ2018$Change)
sd(EDZ2018$Change, na.rm=T)
EDZ2016 = Quandl('CME/EDZ2016', auth_key=key)
sd(EDZ2016$Change, na.rm=T)
library(Quandl)
edz2016 = Quandl('CME/EDZ2016')
edz2019 = Quandl('CME/EDZ2019')
?merge
names(edz2016)
edz2016['Date', 'Settle']
edz2016[, c('Date', 'Settle')]
edz2016 = edz2016[, c('Date', 'Settle')]
head(edz2016)
edz2019 = edz2019[, c('Date', 'Settle')]
merge(edz2016, edz2019, by = 'Date')
merged = merge(edz2016, edz2019, by = 'Date')
library(ggplot2)
merged %>% ggplot(aes(x=Date, y=edz2016))
ggplot(merged, aes(x=Date, y=edz2016))
ggplot(merged, aes(x=Date, y=edz2016)) + geom_line()
plot(merged$Date, merged$Settle.x)
ggplot(merged, aes(x=Date, y=Settle.x)) + geom_line()
ggplot(merged, aes(x=Date, y=Settle.y)) + geom_line()
library(tidyr)
?gather
merged2 = gather(merged, Settle.x, Settle.y, Date)
merged2
head(merged2)
merged2 = gather(merged, Settle.x, Settle.y, -Date)
head(merged2)
head(merge())
head(merged)
merged2 = gather(merged, -Date)
merged2 = gather(merged, Date, -Date)
merged2 = gather(merged, Settle.x, -Date)
merged2 = gather(merged, Settle.x, Settle.y, Date)
head(merged2)
library(dplyr)
merged2 = gather(merged, Settle.x, Settle.y, Date)
head(merged2)
merged %>% gather(xy, value, -Date)
merged2 = merged %>% gather(xy, value, -Date)
head(merged2)
tail(merged2)
ggplot(merged2, aes(x=Date, y=value, col=xy)) + geom_line()
ggplot(merged2, aes(x=Date, y=value, col=xy)) + geom_line() + scale_y_continuous(limits = c(90, 100))
ggplot(merged2, aes(x=Date, y=value, col=xy)) + geom_line() + scale_y_continuous(limits = c(90, 100)) + scale_x_date(limits = c('2015-1-1', '2016-12-31'))
date('2016-12-31')
?date
ggplot(merged2, aes(x=Date, y=value, col=xy)) + geom_line() + scale_y_continuous(limits = c(90, 100)) + scale_x_date(limits = c(as.Date('2015-1-1'), as.Date('2016-12-31')))
raw.data <-"555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5553642Dr. Julius Hibbert"
name <- unlist(str_extract_all(raw.data, "[[:alpha:],. ]{2,}"))
library(stringr)
raw.data <-"555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5553642Dr. Julius Hibbert"
name <- unlist(str_extract_all(raw.data, "[[:alpha:],. ]{2,}"))
name
raw.data
names <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
names
raw.data <- "555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5553642Dr. Julius Hibbert"
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
name
splitname <- str_split(name, ", ", simplify = TRUE)
splitname
splitname <- str_split(name, ", ")
splitname
?str_split
str_split_fixed(name, ", ", simplify = TRUE)
str_split_fixed(name, ", ")
?str_split_fixed
str_split_fixed(name, ", ", 3)
str_split_fixed(name, ", ", 2)
str_split_fixed(name, ", ", 1)
unlist(str_split_fixed(name, ", ", 1))
splitname <- str_split_fixed(name, ", ", 1)
splitname
first_last <- str_c(splitname[, 2], splitname[, 1])
splitname <- str_split(name, ", ", simplify = TRUE)
raw.data <- "555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5553642Dr. Julius Hibbert"
name <- unlist(str_extract_all(raw.data, "[[:alpha:]., ]{2,}"))
phone <- unlist(str_extract_all(raw.data, "\\(?(\\d{3})?\\)?(-| )?\\d{3}(-| )?\\d{4}"))
splitname <- str_split(name, ", ", simplify = TRUE)
name
str_split(name, ",")
str_split(name, ",", 1)
str_split(name, ",", 2)
str_split(name, ",", 1)
str_split(name, ",", simplify = T)
str_split_fixed(name, 1)
str_split_fixed(name, ", ", 1)
typeof(str_split_fixed(name, ", ", 1))
str_split_fixed(name, ", ", 1)
str(str_split_fixed(name, ", ", 1))
str(str_split_fixed(name, ", ", 2))
str_split_fixed(name, ", ", 2)
first_last_vec = paste(split_name[2], split_name[1])
split_name = str_split_fixed(name, ", ", 2)
first_last_vec = paste(split_name[2], split_name[1])
first_last_vec
split_name
split_name[, 2]
first_last_vec = paste(split_name[,2], split_name[,1])
first_last_vec
first_last_vec = trim(paste(split_name[,2], split_name[,1]))
first_last_vec = str_trim(paste(split_name[,2], split_name[,1]))
first_last_vec
split_name = str_split_fixed(name, ", ", 2)
first_last_vec = str_trim(paste(split_name[,2], split_name[,1]))
first_last_vec
split_name = str_split(names, ", ", simplify = TRUE)
install.packages('prob')
library(prob)
?urnsamples
urnsamples(c('a', 'b', 'c', 'd', 'e'), 3)
v = c('a', 'b', 'c', 'd', 'e')
combn(v)
?combn
?combn2
combn(v, 3)
combn2(v, 3)
combn(3, v)
combn(v, 3, simplify=T)
urnsamples(v, 3, replace = F)
urnsamples(v, 3, replace = T)
combn(5,3)
choose(5,3)
choose(5,3) * factorial(2)
choose(5,3) * factorial(3)
library(prob)
permsn(5, 2)
combn(5, 2)
install.packages('prob')
library(prob)
source('~/.active-rstudio-document', echo=TRUE)
dadmom %>%
gather(key, value, named:incm)
dadmom %>%
gather(key, value, named:incm) %>%            # set key, value, cols to gather
separate(key, c("variable", "type"), -2)
?separate
dadmom %>%
gather(key, value, named:incm) %>%            # set key, value, cols to gather
separate(key, c("variable", "type"), -1)
dadmom %>%
gather(key, value, named:incm) %>%            # set key, value, cols to gather
separate(key, c("variable", "type"), -3)
dadmom %>%
gather(key, value, named:incm) %>%            # set key, value, cols to gather
separate(key, c("variable", "type"), -2)
dadmom %>%
gather(key, value, named:incm) %>%            # set key, value, cols to gather
separate(key, c("variable", "type"), -2) %>%  # split key into var & type
spread(variable, value, convert = TRUE)
library(tidyr)
library(tidyr)
library(dplyr)
library(ggplot2)
airlines %>%
gather(airport, flights, -(1:2)) %>%
spread(status, flights) %>%
mutate('total' = delayed + `on time`) %>%
group_by(airline) %>%
summarise(OnTimePct = sum(`on time`) / sum(total)) %>%
ggplot(aes(x = airline, y = OnTimePct, fill = airline)) +
geom_bar(stat = 'identity', width = 0.5) +
geom_text(aes(label = format(OnTimePct, digits = 2)), vjust = -0.25) +
scale_y_continuous(limits = c(0, 1))
+ scale_fill_economist()
airlines = data.frame(
airline = c('Alaska', 'Alaska', 'AM West', 'AM West'),
status = c('on time', 'delayed', 'on time', 'delayed'),
LosAngeles = c(497, 62, 694, 117),
Phoenix = c(221, 12, 4840, 415),
SanDiego = c(212, 20, 383, 65),
SanFrancisco = c(503, 102, 320, 129),
Seattle = c(1841, 305, 201, 61)
)
#write.csv(airlines, file = '/Users/brucehao/Desktop/airlines.csv', row.names = F)
#airlines = read.csv('/Users/brucehao/Desktop/airlines.csv')
airlines
airlines %>%
gather(airport, flights, -(1:2)) %>%
spread(status, flights) %>%
mutate('total' = delayed + `on time`) %>%
group_by(airline) %>%
summarise(OnTimePct = sum(`on time`) / sum(total)) %>%
ggplot(aes(x = airline, y = OnTimePct, fill = airline)) +
geom_bar(stat = 'identity', width = 0.5) +
geom_text(aes(label = format(OnTimePct, digits = 2)), vjust = -0.25) +
scale_y_continuous(limits = c(0, 1))
+ scale_fill_economist()
airlines %>%
gather(airport, flights, -(1:2)) %>%
spread(status, flights) %>%
mutate('total' = delayed + `on time`) %>%
group_by(airline) %>%
summarise(OnTimePct = sum(`on time`) / sum(total)) %>%
ggplot(aes(x = airline, y = OnTimePct, fill = airline)) +
geom_bar(stat = 'identity', width = 0.5) +
geom_text(aes(label = format(OnTimePct, digits = 2)), vjust = -0.25) +
scale_y_continuous(limits = c(0, 1))
+ scale_fill_grey()
airlines %>%
gather(airport, flights, -(1:2)) %>%
spread(status, flights) %>%
mutate('total' = delayed + `on time`) %>%
group_by(airline) %>%
summarise(OnTimePct = sum(`on time`) / sum(total)) %>%
ggplot(aes(x = airline, y = OnTimePct, fill = airline)) +
geom_bar(stat = 'identity', width = 0.5) +
geom_text(aes(label = format(OnTimePct, digits = 2)), vjust = -0.25) +
scale_y_continuous(limits = c(0, 1))
+ scale_fill_brewer(palette = 'Set1')
airlines %>%
gather(airport, flights, -(1:2)) %>%
spread(status, flights) %>%
mutate('total' = delayed + `on time`) %>%
group_by(airline) %>%
summarise(OnTimePct = sum(`on time`) / sum(total)) %>%
ggplot(aes(x = airline, y = OnTimePct, fill = airline)) +
geom_bar(stat = 'identity', width = 0.5) +
geom_text(aes(label = format(OnTimePct, digits = 2)), vjust = -0.25) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_brewer(palette = 'Set1')
airlines %>%
gather(airport, flights, -(1:2)) %>%
spread(status, flights) %>%
mutate('total' = delayed + `on time`) %>%
group_by(airline) %>%
summarise(OnTimePct = sum(`on time`) / sum(total)) %>%
ggplot(aes(x = airline, y = OnTimePct, fill = airline)) +
geom_bar(stat = 'identity', width = 0.5) +
geom_text(aes(label = format(OnTimePct, digits = 2)), vjust = -0.25) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_economist()
install.packages('ggthemes')
library(ggthemes)
airlines %>%
gather(airport, flights, -(1:2)) %>%
spread(status, flights) %>%
mutate('total' = delayed + `on time`) %>%
group_by(airline) %>%
summarise(OnTimePct = sum(`on time`) / sum(total)) %>%
ggplot(aes(x = airline, y = OnTimePct, fill = airline)) +
geom_bar(stat = 'identity', width = 0.5) +
geom_text(aes(label = format(OnTimePct, digits = 2)), vjust = -0.25) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_economist()
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggthemes)
airlines %>%
gather(airport, flights, -(1:2)) %>%
spread(status, flights) %>%
mutate('total' = delayed + `on time`) %>%
group_by(airline) %>%
summarise(OnTimePct = sum(`on time`) / sum(total)) %>%
ggplot(aes(x = airline, y = OnTimePct, fill = airline)) +
geom_bar(stat = 'identity', width = 0.5) +
geom_text(aes(label = format(OnTimePct, digits = 2)), vjust = -0.25) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_economist() +
theme_economist_white()
airlines %>%
gather(airport, flights, -(1:2)) %>%
spread(status, flights) %>%
mutate('total' = delayed + `on time`) %>%
group_by(airline) %>%
summarise(OnTimePct = sum(`on time`) / sum(total)) %>%
ggplot(aes(x = airline, y = OnTimePct, fill = airline)) +
geom_bar(stat = 'identity', width = 0.5) +
geom_text(aes(label = format(OnTimePct, digits = 2)), vjust = -0.25) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_economist() +
theme_economist()
airlines %>%
gather(airport, flights, -(1:2)) %>%
spread(status, flights) %>%
mutate('total' = delayed + `on time`) %>%
group_by(airline) %>%
summarise(OnTimePct = sum(`on time`) / sum(total)) %>%
ggplot(aes(x = airline, y = OnTimePct, fill = airline)) +
geom_bar(stat = 'identity', width = 0.5) +
geom_text(aes(label = format(OnTimePct, digits = 2)), vjust = -0.25) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_economist() +
theme_minimal()
airlines %>%
gather(airport, flights, -(1:2)) %>%
spread(status, flights) %>%
mutate('total' = delayed + `on time`) %>%
group_by(airline) %>%
summarise(OnTimePct = sum(`on time`) / sum(total)) %>%
ggplot(aes(x = airline, y = OnTimePct, fill = airline)) +
geom_bar(stat = 'identity', width = 0.5) +
geom_text(aes(label = format(OnTimePct, digits = 2)), vjust = -0.25) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_economist() +
theme_light()
?dgeom
pgeom(3, 0.35)
plot(rgeom(100, 0.35))
hist(rgeom(100, 0.35))
pgeom(1, 0.35)
table(rgeom(100, 0.35))
table.prop(rgeom(100, 0.35))
prop.table(rgeom(100, 0.35))
prop.table(table(rgeom(100, 0.35)))
prop.table(table(rgeom(100, 0.35)))
pgeom(0, 0.35)
pgeom(1, 0.35)
pgeom(2, 0.35)
pgeom(3, 0.35)
dgeom(0, 0.35)
dgeom(1, 0.35)
dgeom(2, 0.35)
qgeom(0.35, 0.35)
qgeom(0.5775, 0.35)
?dbinom
dbinom(1, 4, 0.35)
choose(4, 1) * 0.35 * 0.65^3
pbinom(0, 4, 0.35)
pbinom(1, 4, 0.35)
dbinom(0, 4, 0.35)
118.2 + 1.644 * 6.5
118.2 - 1.644 * 6.5
(118.2 - 100) / (6.5 * sqrt(36))
(118.2 - 100) / (6.5 / sqrt(36))
pnorm(16.8)
118.2 + 1.644 * (6.5 / sqrt(36))
118.2 - 1.644 * (6.5 / sqrt(36))
30.69 + 1.644 * 4.31 / sqrt(36)
30.69 - 1.644 * 4.31 / sqrt(36)
4.31 / sqrt(360)
30.69 + 1.644 * 4.31 / sqrt(36)
30.69 - 1.644 * 4.31 / sqrt(36)
118.2 + 1.644 * 6.5 / sqrt(36)
118.2 - 1.644 * 6.5 / sqrt(36)
1 - pnorm(10500, 9000, 1000)
z <- (10500 - 9000) / 1000
z
# Then determine the area under the normal curve at said z score.
# Since we want the area of the upper tail, we'll substract from 1.
p <- 1 - pnorm(z)
p
1000  / sqrt(15)
1 - pnorm(10500, 9000, 1000/sqrt(15))
(10500 - 9000) / (1000 / sqrt(15))
xv = seq(9000 - 4*1000, 9000 + 4*1000, 1)
yv = dnorm(xv, 9000, 1000)
df = data.frame(xv, yv)
p = ggplot(df, aes(x=xv, y=yv)) + geom_line()
p
library(dplyr)
library(ggplot2)
library(ggthemes)
xv = seq(9000 - 4*1000, 9000 + 4*1000, 1)
yv = dnorm(xv, 9000, 1000)
df = data.frame(xv, yv)
p = ggplot(df, aes(x=xv, y=yv)) + geom_line()
p
df = data.frame(src = 'population', xv, yv)
head(df)
xPop = seq(9000 - 4*1000, 9000 + 4*1000, 1)
yPop = dnorm(xv, 9000, 1000)
dfPop = data.frame(src = 'Population', xPop, yPop)
xSamp = seq(9000 - 4*1000, 9000 + 4*1000, 1)
ySamp = dnorm(xv, 9000, 1000 / sqrt(15))
dfSamp = data.frame(src = 'Sample', xSamp, ySamp)
df = bind_rows(dfPop, dfSamp)
p = ggplot(df, aes(x=xv, y=yv, color=src)) + geom_line()
p
xPop = seq(9000 - 4*1000, 9000 + 4*1000, 1)
yPop = dnorm(xv, 9000, 1000)
dfPop = data.frame(src = 'Population', xPop, yPop)
xSamp = seq(9000 - 4*1000, 9000 + 4*1000, 1)
ySamp = dnorm(xv, 9000, 1000 / sqrt(15))
dfSamp = data.frame(src = 'Sample', xSamp, ySamp)
df = bind_rows(dfPop, dfSamp)
head(df)
?bind_rows
xv = seq(9000 - 4*1000, 9000 + 4*1000, 1)
yv = dnorm(xv, 9000, 1000)
dfPop = data.frame(src = 'Population', xv, yv)
xv = seq(9000 - 4*1000, 9000 + 4*1000, 1)
yv = dnorm(xv, 9000, 1000 / sqrt(15))
dfSamp = data.frame(src = 'Sample', xv, yv)
df = bind_rows(dfPop, dfSamp)
p = ggplot(df, aes(x=xv, y=yv, color=src)) + geom_line()
p
library(IS606)
install.packages('ggthemes')
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA606")
startLab('Lab4b')
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA606/Lab4b")
load("more/ames.RData")
rm(list = ls())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(samp)
hist(samp)
?hist
hist(samp, breaks = 10)
qplot(samp, geom_histogram)
qplot(samp, geom='histogram')
qplot(samp, geom='histogram', bins=10)
set.seed(123)
source('~/.active-rstudio-document', echo=TRUE)
nrow(population)
population <- ames$Gr.Liv.Area
nrows(population)
length(population)
