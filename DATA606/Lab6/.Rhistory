(154+132)/(438+389)
offshore2 = offshore %>%
mutate(total = support + oppose + unsure) %>%
mutate(support.expected = offshore.expected.prop$support.prop * total,
oppose.expected = offshore.expected.prop$oppose.prop * total,
unsure.expected = offshore.expected.prop$unsure.prop * total)
offshore2
chi.sq = offshore2 %>% mutate(Z2a = (support - support.expected)^2 / support.expected,
Z2b = (oppose - oppose.expected)^2 / oppose.expected,
Z2c = (unsure - unsure.expected)^2 / unsure.expected) %>%
summarise(chi.sq = sum(Z2a) + sum(Z2b) + sum(Z2c))
chi.sq
df = (nrow(offshore) -1)* (ncol(offshore) - 1)
df
1 - pchisq(as.numeric(chi.sq), df)
chisq.test(offshore[, 1], offshore[, 2])
offshore[, 1]
offshore[1, 1]
offshore[1,]
chisq.test(offshore[1,], offshore[2,])
offshore[2,]
offshore[1,]
transpose(offshore[1,])
t(offshore[1,])
chisq.test(t(offshore[1,]), t(offshore[2,]))
chisq.test(t(offshore))
chisq.test(t(offshore))
# first reproduce example on pg 298 in book
algo = data.frame(no.new = c(3511, 1749, 1818), new = c(1489, 751, 682), row.names = c('current', 'test1', 'test2'))
algo.expected.prop = algo %>%
mutate(total = no.new + new) %>%
summarise(no.new.prop = sum(no.new)/sum(total), new.prop = sum(new)/sum(total))
algo2 = algo %>%
mutate(total = no.new + new) %>%
mutate(no.new.expected = algo.expected.prop$no.new.prop * total, new.expected = algo.expected.prop$new.prop * total)
chi.sq = algo2 %>% mutate(Z2a = (no.new - no.new.expected)^2 / no.new.expected, Z2b = (new - new.expected)^2 / new.expected) %>%
summarise(chi.sq = sum(Z2a) + sum(Z2b))
df = (nrow(algo) - 1) * (ncol(algo) - 1)
1 - pchisq(as.numeric(chi.sq), df)
chisq.test(t(algo))
# attempt 6.47 using the same logic
offshore = data.frame(support = c(154, 132), oppose = c(180, 126), unsure = c(104, 131),
row.names = c('grad', 'notGrad'))
offshore.expected.prop = offshore %>%
mutate(total = support + oppose + unsure) %>%
summarise(support.prop = sum(support)/sum(total), oppose.prop = sum(oppose)/sum(total), unsure.prop = sum(unsure)/sum(total))
offshore2 = offshore %>%
mutate(total = support + oppose + unsure) %>%
mutate(support.expected = offshore.expected.prop$support.prop * total,
oppose.expected = offshore.expected.prop$oppose.prop * total,
unsure.expected = offshore.expected.prop$unsure.prop * total)
chi.sq = offshore2 %>% mutate(Z2a = (support - support.expected)^2 / support.expected,
Z2b = (oppose - oppose.expected)^2 / oppose.expected,
Z2c = (unsure - unsure.expected)^2 / unsure.expected) %>%
summarise(chi.sq = sum(Z2a) + sum(Z2b) + sum(Z2c))
df = (nrow(offshore) -1)* (ncol(offshore) - 1)
1 - pchisq(as.numeric(chi.sq), df)
chisq.test(t(offshore))
coffee = data.frame('1perDay' = c(670, 11545), '2-6perDay' = c(373, 6244), '1perWeek' = c(905, 1639),
'2-3perDay' = c(564, 11726), '4perDay' = c(95, 2288))
coffee %>% mutate(total = 1perDay)
coffee %>% mutate(total = '1perDay')
coffee %>% mutate(total = X1perDay)
coffee %>% mutate(total = X1perDay + X2.6perDay + X1perWeek + X2.3perDay + X4perDay)
coffee = data.frame('1perDay' = c(670, 11545), '2-6perDay' = c(373, 6244), '1perWeek' = c(905, 16329),
'2-3perDay' = c(564, 11726), '4perDay' = c(95, 2288))
coffee %>% mutate(total = X1perDay + X2.6perDay + X1perWeek + X2.3perDay + X4perDay)
coffee = data.frame('1perDay' = c(670, 11545), '2-6perDay' = c(373, 6244), '1perWeek' = c(905, 16329),
'2-3perDay' = c(564, 11726), '4perDay' = c(95, 2288), row.names = c('yes', 'no'))
coffee %>% mutate(total = X1perDay + X2.6perDay + X1perWeek + X2.3perDay + X4perDay)
coffee
coffee %>% mutate(total = X1perDay + X2.6perDay + X1perWeek + X2.3perDay + X4perDay)
coffee %>% mutate(total = X1perDay + X2.6perDay + X1perWeek + X2.3perDay + X4perDay) %>%
select(total)
t(coffee %>% mutate(total = X1perDay + X2.6perDay + X1perWeek + X2.3perDay + X4perDay) %>%
select(total))
coffee %>% mutate(total = X1perDay + X2.6perDay + X1perWeek + X2.3perDay + X4perDay) %>%
select(total)
coffee %>% mutate(total = X1perDay + X2.6perDay + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(prop = total / sum(total))
coffee.expected.prop = coffee %>%
mutate(total = X1perDay + X2.6perDay + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(prop = total / sum(total)) %>%
select(prop)
coffee.expected.prop
coffee.expected.prop[1]
coffee.expected.prop[1,]
coffee %>%
mutate(total = X1perDay + X2.6perDay + X1perWeek + X2.3perDay + X4perDay)
coffee = data.frame('1perDay' = c(670, 11545), '2-6perWeek' = c(373, 6244), '1perWeek' = c(905, 16329),
'2-3perDay' = c(564, 11726), '4perDay' = c(95, 2288), row.names = c('yes', 'no'))
coffee.expected.prop = coffee %>%
mutate(total = X1perDay + X2.6perDay + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(prop = total / sum(total)) %>%
select(prop)
coffee.expected.prop = coffee %>%
mutate(total = X1perDay + X2.6perWeek + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(prop = total / sum(total)) %>%
select(prop)
coffee.expected.prop
coffee2 = coffee %>%
mutate(total = X1perDay + X2.6perWeek + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(X1perDay.exp = coffee.expected.prop[1,] * total, X2.6perWeek * total, X1perWeek * total, X2.3perDay * total, X4perDay * total)
coffee2
coffee2 = coffee %>%
mutate(total = X1perDay + X2.6perWeek + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(X1perDay.exp = coffee.expected.prop[1,] * total, X2.6perWeek.exp = X2.6perWeek * total,
X1perWeek.exp = X1perWeek * total, X2.3perDay.exp = X2.3perDay * total, X4perDay.exp = X4perDay * total)
coffee2
coffee = data.frame('1perDay' = c(670, 11545), '2-6perWeek' = c(373, 6244), '1perWeek' = c(905, 16329),
'2-3perDay' = c(564, 11726), '4perDay' = c(95, 2288), row.names = c('yes', 'no'))
coffee = data.frame('1perDay' = c(670, 11545), '2-6perWeek' = c(373, 6244), '1perWeek' = c(905, 16329),
'2-3perDay' = c(564, 11726), '4perDay' = c(95, 2288), row.names = c('yes', 'no'))
coffee.expected.prop = coffee %>%
mutate(total = X1perDay + X2.6perWeek + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(prop = total / sum(total)) %>%
select(prop)
coffee.expected.prop
coffee2 = coffee %>%
mutate(total = X1perDay + X2.6perWeek + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(X1perDay.exp = coffee.expected.prop[1,] * total, X2.6perWeek.exp = X2.6perWeek * total,
X1perWeek.exp = X1perWeek * total, X2.3perDay.exp = X2.3perDay * total, X4perDay.exp = X4perDay * total)
coffee2
coffee2 = t(coffee) %>%
mutate(total = X1perDay + X2.6perWeek + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(X1perDay.exp = coffee.expected.prop[1,] * total, X2.6perWeek.exp = X2.6perWeek * total,
X1perWeek.exp = X1perWeek * total, X2.3perDay.exp = X2.3perDay * total, X4perDay.exp = X4perDay * total)
t(coffee) %>%
mutate(total = yes + no)
t(coffee)
t(coffee) %>%
mutate(total = yes + no)
data.frame(t(coffee)) %>%
mutate(total = yes + no)
data.frame(t(coffee), row.names = colnames(coffee))
data.frame(t(coffee), row.names = colnames(coffee)) %>%
mutate(total = yes + no)
coffee2 = data.frame(t(coffee), row.names = colnames(coffee)) %>%
mutate(total = yes + no)
coffee2
data.frame(t(coffee), row.names = colnames(coffee))
coffee2 = data.frame(t(coffee), row.names = colnames(coffee))
coffee2
coffee2 = coffee2 %>%
mutate(total = yes + no)
coffee2
coffee2
coffee2 = data.frame(intake = colnames(coffee), t(coffee))
coffee2
coffee = data.frame('1perDay' = c(670, 11545), '2-6perWeek' = c(373, 6244), '1perWeek' = c(905, 16329),
'2-3perDay' = c(564, 11726), '4perDay' = c(95, 2288), row.names = c('yes', 'no'))
coffee.expected.prop = coffee %>%
mutate(total = X1perDay + X2.6perWeek + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(prop = total / sum(total)) %>%
select(prop)
coffee.expected.prop
coffee2 = data.frame(intake = colnames(coffee), t(coffee))
coffee2
coffee2 = coffee2 %>%
mutate(total = yes + no) %>%
mutate(yes.expt)
coffee2
data.frame(intake = colnames(coffee), t(coffee)) %>%
mutate(total = yes + no)
coffee.expected.prop
coffee2 = data.frame(intake = colnames(coffee), t(coffee)) %>%
mutate(total = yes + no) %>%
mutate(yes.exp = coffee.expected.prop$prop[1,] * total, no.exp = coffee.expected.prop$prop[2,] * total)
coffee = data.frame('1perDay' = c(670, 11545), '2-6perWeek' = c(373, 6244), '1perWeek' = c(905, 16329),
'2-3perDay' = c(564, 11726), '4perDay' = c(95, 2288), row.names = c('yes', 'no'))
coffee.expected.prop = coffee %>%
mutate(total = X1perDay + X2.6perWeek + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(prop = total / sum(total)) %>%
select(prop)
coffee.expected.prop
coffee2 = data.frame(intake = colnames(coffee), t(coffee)) %>%
mutate(total = yes + no) %>%
mutate(yes.exp = coffee.expected.prop$prop[1,] * total, no.exp = coffee.expected.prop$prop[2,] * total)
coffee2 = data.frame(intake = colnames(coffee), t(coffee)) %>%
mutate(total = yes + no)
coffee2 = data.frame(intake = colnames(coffee), t(coffee)) %>%
mutate(total = yes + no) %>%
mutate(yes.exp = coffee.expected.prop$prop[1] * total, no.exp = coffee.expected.prop$prop[2,] * total)
coffee2 = data.frame(intake = colnames(coffee), t(coffee)) %>%
mutate(total = yes + no) %>%
mutate(yes.exp = coffee.expected.prop$prop[1] * total, no.exp = coffee.expected.prop$prop[2] * total)
coffee2
coffee = data.frame('1perDay' = c(670, 11545), '2-6perWeek' = c(373, 6244), '1perWeek' = c(905, 16329),
'2-3perDay' = c(564, 11726), '4perDay' = c(95, 2288), row.names = c('yes', 'no'))
coffee.expected.prop = coffee %>%
mutate(total = X1perDay + X2.6perWeek + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(prop = total / sum(total)) %>%
select(prop)
coffee.expected.prop
coffee2 = data.frame(intake = colnames(coffee), t(coffee)) %>%
mutate(total = yes + no) %>%
mutate(yes.exp = coffee.expected.prop$prop[1] * total, no.exp = coffee.expected.prop$prop[2] * total)
coffee2
12215*0.0513
chi.sq = coffee2 %>% mutate(Z2a = (yes - yes.exp)^2 / yes.exp, Z2b = (no - no.exp)^2 / no.exp) %>%
summarise(chi.sq = sum(Z2a) + sum(Z2b))
chi.sq
df = (nrow(coffee) - 1) * (ncol(coffee) -1)
df
1 - pchisq(as.numeric(chi.sq), df)
chisq.test(coffee)
coffee = data.frame('1perDay' = c(670, 11545), '2-6perWeek' = c(373, 6244), '1perWeek' = c(905, 16329),
'2-3perDay' = c(564, 11726), '4perDay' = c(95, 2288), row.names = c('yes', 'no'))
coffee.expected.prop = coffee %>%
mutate(total = X1perDay + X2.6perWeek + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(prop = total / sum(total)) %>%
select(prop)
coffee.expected.prop
coffee2 = data.frame(intake = colnames(coffee), t(coffee)) %>%
mutate(total = yes + no) %>%
mutate(yes.exp = coffee.expected.prop$prop[1] * total, no.exp = coffee.expected.prop$prop[2] * total)
coffee2
chi.sq = coffee2 %>% mutate(Z2a = (yes - yes.exp)^2 / yes.exp, Z2b = (no - no.exp)^2 / no.exp) %>%
summarise(chi.sq = sum(Z2a) + sum(Z2b))
chi.sq
df = (nrow(coffee) - 1) * (ncol(coffee) -1)
1 - pchisq(as.numeric(chi.sq), df)
chisq.test(coffee)
coffee = data.frame('1perWeek' = c(670, 11545), '2-6perWeek' = c(373, 6244), '1perWeek' = c(905, 16329),
'2-3perDay' = c(564, 11726), '4perDay' = c(95, 2288), row.names = c('yes', 'no'))
coffee.expected.prop = coffee %>%
mutate(total = X1perWeek + X2.6perWeek + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(prop = total / sum(total)) %>%
select(prop)
coffee.expected.prop
coffee2 = data.frame(intake = colnames(coffee), t(coffee)) %>%
mutate(total = yes + no) %>%
mutate(yes.exp = coffee.expected.prop$prop[1] * total, no.exp = coffee.expected.prop$prop[2] * total)
coffee2
chi.sq = coffee2 %>% mutate(Z2a = (yes - yes.exp)^2 / yes.exp, Z2b = (no - no.exp)^2 / no.exp) %>%
summarise(chi.sq = sum(Z2a) + sum(Z2b))
chi.sq
df = (nrow(coffee) - 1) * (ncol(coffee) -1)
1 - pchisq(as.numeric(chi.sq), df)
chisq.test(coffee)
coffee = data.frame('1perWeek' = c(670, 11545), '2-6perWeek' = c(373, 6244), '1perDay' = c(905, 16329),
'2-3perDay' = c(564, 11726), '4perDay' = c(95, 2288), row.names = c('yes', 'no'))
coffee.expected.prop = coffee %>%
mutate(total = X1perWeek + X2.6perWeek + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(prop = total / sum(total)) %>%
select(prop)
coffee.expected.prop
coffee2 = data.frame(intake = colnames(coffee), t(coffee)) %>%
mutate(total = yes + no) %>%
mutate(yes.exp = coffee.expected.prop$prop[1] * total, no.exp = coffee.expected.prop$prop[2] * total)
coffee2
chi.sq = coffee2 %>% mutate(Z2a = (yes - yes.exp)^2 / yes.exp, Z2b = (no - no.exp)^2 / no.exp) %>%
summarise(chi.sq = sum(Z2a) + sum(Z2b))
chi.sq
df = (nrow(coffee) - 1) * (ncol(coffee) -1)
1 - pchisq(as.numeric(chi.sq), df)
chisq.test(coffee)
# first reproduce example on pg 298 in book
algo = data.frame(no.new = c(3511, 1749, 1818), new = c(1489, 751, 682), row.names = c('current', 'test1', 'test2'))
algo.expected.prop = algo %>%
mutate(total = no.new + new) %>%
summarise(no.new.prop = sum(no.new)/sum(total), new.prop = sum(new)/sum(total))
algo2 = algo %>%
mutate(total = no.new + new) %>%
mutate(no.new.expected = algo.expected.prop$no.new.prop * total, new.expected = algo.expected.prop$new.prop * total)
chi.sq = algo2 %>% mutate(Z2a = (no.new - no.new.expected)^2 / no.new.expected, Z2b = (new - new.expected)^2 / new.expected) %>%
summarise(chi.sq = sum(Z2a) + sum(Z2b))
df = (nrow(algo) - 1) * (ncol(algo) - 1)
1 - pchisq(as.numeric(chi.sq), df)
chisq.test(t(algo))
# attempt 6.47 using the same logic
offshore = data.frame(support = c(154, 132), oppose = c(180, 126), unsure = c(104, 131),
row.names = c('grad', 'notGrad'))
offshore.expected.prop = offshore %>%
mutate(total = support + oppose + unsure) %>%
summarise(support.prop = sum(support)/sum(total), oppose.prop = sum(oppose)/sum(total), unsure.prop = sum(unsure)/sum(total))
offshore2 = offshore %>%
mutate(total = support + oppose + unsure) %>%
mutate(support.expected = offshore.expected.prop$support.prop * total,
oppose.expected = offshore.expected.prop$oppose.prop * total,
unsure.expected = offshore.expected.prop$unsure.prop * total)
chi.sq = offshore2 %>% mutate(Z2a = (support - support.expected)^2 / support.expected,
Z2b = (oppose - oppose.expected)^2 / oppose.expected,
Z2c = (unsure - unsure.expected)^2 / unsure.expected) %>%
summarise(chi.sq = sum(Z2a) + sum(Z2b) + sum(Z2c))
chi.sq
df = (nrow(offshore) -1)* (ncol(offshore) - 1)
1 - pchisq(as.numeric(chi.sq), df)
chisq.test(t(offshore))
chisq.test(t(coffee))
chisq.test(coffee)
df
df = (nrow(coffee) - 1) * (ncol(coffee) -1)
df
1 - pchisq(as.numeric(chi.sq), df)
chi.sq = coffee2 %>% mutate(Z2a = (yes - yes.exp)^2 / yes.exp, Z2b = (no - no.exp)^2 / no.exp) %>%
summarise(chi.sq = sum(Z2a) + sum(Z2b))
df = (nrow(coffee) - 1) * (ncol(coffee) -1)
1 - pchisq(as.numeric(chi.sq), df)
chi.sq
?chisq.test
chisq.test(coffee, correct = F)
coffee = data.frame('1perWeek' = c(670, 11545), '2-6perWeek' = c(373, 6244), '1perDay' = c(905, 16329),
'2-3perDay' = c(564, 11726), '4perDay' = c(95, 2288), row.names = c('yes', 'no'))
coffee.expected.prop = coffee %>%
mutate(total = X1perWeek + X2.6perWeek + X1perWeek + X2.3perDay + X4perDay) %>%
mutate(prop = total / sum(total)) %>%
select(prop)
coffee.expected.prop
coffee2 = data.frame(intake = colnames(coffee), t(coffee)) %>%
mutate(total = yes + no) %>%
mutate(yes.exp = coffee.expected.prop$prop[1] * total, no.exp = coffee.expected.prop$prop[2] * total)
coffee2
chi.sq = coffee2 %>% mutate(Z2a = (yes - yes.exp)^2 / yes.exp, Z2b = (no - no.exp)^2 / no.exp) %>%
summarise(chi.sq = sum(Z2a) + sum(Z2b))
chi.sq
df = (nrow(coffee) - 1) * (ncol(coffee) -1)
1 - pchisq(as.numeric(chi.sq), df)
chisq.test(coffee, correct = F)
coffee.expected.prop$prop[1]
coffee.expected.prop$prop[2]
total
data.frame(intake = colnames(coffee), t(coffee)) %>%
mutate(total = yes + no)
coffee2 = data.frame(intake = colnames(coffee), t(coffee)) %>%
mutate(total = yes + no)
sum(coffee$totl)
sum(coffee$total)
sum(coffee2$total)
coffee = data.frame('1perWeek' = c(670, 11545), '2-6perWeek' = c(373, 6244), '1perDay' = c(905, 16329),
'2-3perDay' = c(564, 11726), '4perDay' = c(95, 2288), row.names = c('yes', 'no'))
coffee.expected.prop = coffee %>%
mutate(total = X1perWeek + X2.6perWeek + X1perDay + X2.3perDay + X4perDay) %>%
mutate(prop = total / sum(total)) %>%
select(prop)
coffee.expected.prop
coffee2 = data.frame(intake = colnames(coffee), t(coffee)) %>%
mutate(total = yes + no) %>%
mutate(yes.exp = coffee.expected.prop$prop[1] * total, no.exp = coffee.expected.prop$prop[2] * total)
coffee2
chi.sq = coffee2 %>% mutate(Z2a = (yes - yes.exp)^2 / yes.exp, Z2b = (no - no.exp)^2 / no.exp) %>%
summarise(chi.sq = sum(Z2a) + sum(Z2b))
chi.sq
df = (nrow(coffee) - 1) * (ncol(coffee) -1)
1 - pchisq(as.numeric(chi.sq), df)
chisq.test(coffee)
chi.sq.stat = chisq.test(coffee)
x = seq(0, 10, 0.1)
xy = data.frame(x = x, y = dchisq(x, 2))
shade = xy[x > chi.sq.stat$statistic, ]
chi.sq.stat = chisq.test(coffee)
x = seq(0, 10, 0.1)
xy = data.frame(x = x, y = dchisq(x, 2))
shade = xy[x > chi.sq.stat$statistic, ]
xy %>% ggplot(aes(x =  x, y = y)) +
geom_line() +
geom_ribbon(data = shade, aes(ymax = y, ymin= 0), fill = 'red', alpha = 0.5) +
ggtitle('Chi-Square Distribution with 2 Degrees of Freedom')
xy
chi.sq.stat = chisq.test(coffee)
x = seq(0, 10, 0.1)
xy = data.frame(x = x, y = dchisq(x, df))
shade = xy[x > chi.sq.stat$statistic, ]
xy %>% ggplot(aes(x =  x, y = y)) +
geom_line() +
geom_ribbon(data = shade, aes(ymax = y, ymin= 0), fill = 'red', alpha = 0.5) +
ggtitle('Chi-Square Distribution with 2 Degrees of Freedom')
xy
chi.sq.stat$statistic
x = seq(0, 50, 0.2)
xy = data.frame(x = x, y = dchisq(x, df))
shade = xy[x > chi.sq.stat$statistic, ]
xy %>% ggplot(aes(x =  x, y = y)) +
geom_line() +
geom_ribbon(data = shade, aes(ymax = y, ymin= 0), fill = 'red', alpha = 0.5) +
ggtitle('Chi-Square Distribution with 2 Degrees of Freedom')
#setwd("~/Google Drive/CUNY/git/DATA606/Lab6")
library(dplyr)
library(ggplot2)
# a function to return confidence interval for a proportion based on p, n and cl
prop.ci = function(p, n, cl) {
moe = qnorm(mean(c(cl, 1))) * sqrt(p * (1 - p) / n)
return(paste("(", round(p - moe, 4), ",", round(p + moe, 4), ")"))
}
# a function to return confidence interval for the difference between two proportions based on p, n and cl
prop.diff.ci = function(p1, n1, p2, n2, cl) {
moe = qnorm(mean(c(cl, 1))) * sqrt(p1 * (1 - p1) / n1 + p2 * (1 - p2) / n2)
return(paste("(", round(p1 - p2 - moe, 4), ",", round(p1 - p2 + moe, 4), ")"))
}
prop.ci(0.48, 1259, 0.95)
p = 0.48
moe = 0.02
cl = 0.95
n = (p * (1-p))^2 / moe^2 * qnorm(mean(c(cl, 1)))^2
n
prop.diff.ci(0.08, 11545, 0.088, 4691, 0.95)
# create data frame to house actual and expected results
rps = data.frame(actual = c(43, 21, 35), expected = c((43 + 21 + 35)/3, (43 + 21 + 35)/3, (43 + 21 + 35)/3),
row.names = c('Rock', 'Paper', 'Scissor'))
chi.sq = as.numeric(rps %>% mutate(Z2 = (actual - expected)^2 / expected) %>%
summarise(chi.sq = sum(Z2)))
df = nrow(rps) - 1
1 - pchisq(chi.sq, df)
chisq.test(rps$actual)
chi.sq.stat = chisq.test(rps$actual)
x = seq(0, 10, 0.1)
xy = data.frame(x = x, y = dchisq(x, df))
shade = xy[x > chi.sq.stat$statistic, ]
xy %>% ggplot(aes(x =  x, y = y)) +
geom_line() +
geom_ribbon(data = shade, aes(ymax = y, ymin= 0), fill = 'red', alpha = 0.5) +
ggtitle(paste('Chi-Square Distribution with', df, 'Degrees of Freedom')
#setwd("~/Google Drive/CUNY/git/DATA606/Lab6")
library(dplyr)
library(ggplot2)
# a function to return confidence interval for a proportion based on p, n and cl
prop.ci = function(p, n, cl) {
moe = qnorm(mean(c(cl, 1))) * sqrt(p * (1 - p) / n)
return(paste("(", round(p - moe, 4), ",", round(p + moe, 4), ")"))
}
# a function to return confidence interval for the difference between two proportions based on p, n and cl
prop.diff.ci = function(p1, n1, p2, n2, cl) {
moe = qnorm(mean(c(cl, 1))) * sqrt(p1 * (1 - p1) / n1 + p2 * (1 - p2) / n2)
return(paste("(", round(p1 - p2 - moe, 4), ",", round(p1 - p2 + moe, 4), ")"))
}
prop.ci(0.48, 1259, 0.95)
p = 0.48
moe = 0.02
cl = 0.95
n = (p * (1-p))^2 / moe^2 * qnorm(mean(c(cl, 1)))^2
n
prop.diff.ci(0.08, 11545, 0.088, 4691, 0.95)
# create data frame to house actual and expected results
rps = data.frame(actual = c(43, 21, 35), expected = c((43 + 21 + 35)/3, (43 + 21 + 35)/3, (43 + 21 + 35)/3),
row.names = c('Rock', 'Paper', 'Scissor'))
chi.sq = as.numeric(rps %>% mutate(Z2 = (actual - expected)^2 / expected) %>%
summarise(chi.sq = sum(Z2)))
df = nrow(rps) - 1
1 - pchisq(chi.sq, df)
chisq.test(rps$actual)
chi.sq.stat = chisq.test(rps$actual)
x = seq(0, 10, 0.1)
xy = data.frame(x = x, y = dchisq(x, df))
shade = xy[x > chi.sq.stat$statistic, ]
xy %>% ggplot(aes(x =  x, y = y)) +
geom_line() +
geom_ribbon(data = shade, aes(ymax = y, ymin= 0), fill = 'red', alpha = 0.5) +
ggtitle(paste('Chi-Square Distribution with', df, 'Degrees of Freedom'))
habitat = data.frame(actual = c(4, 16, 61, 345), expected = 426 * c(0.048, 0.147, 0.396, (1-0.048-0.147-0.396)),
row.names = c('Woods', 'Cultivatd grassplot', 'Deciduous forests', 'Other'))
chi.sq = habitat %>% mutate(Z2 = (actual - expected)^2 / expected) %>%
summarise(chi.sq = sum(Z2))
df = nrow(habitat) - 1
1 - pchisq(as.numeric(chi.sq), df)
chisq.test(habitat$actual, p = c(0.048, 0.147, 0.396, 1-0.048-0.147-0.396))
# first reproduce example on pg 298 in book
algo = data.frame(no.new = c(3511, 1749, 1818), new = c(1489, 751, 682), row.names = c('current', 'test1', 'test2'))
algo.expected.prop = algo %>%
mutate(total = no.new + new) %>%
summarise(no.new.prop = sum(no.new)/sum(total), new.prop = sum(new)/sum(total))
algo2 = algo %>%
mutate(total = no.new + new) %>%
mutate(no.new.expected = algo.expected.prop$no.new.prop * total, new.expected = algo.expected.prop$new.prop * total)
chi.sq = algo2 %>% mutate(Z2a = (no.new - no.new.expected)^2 / no.new.expected, Z2b = (new - new.expected)^2 / new.expected) %>%
summarise(chi.sq = sum(Z2a) + sum(Z2b))
df = (nrow(algo) - 1) * (ncol(algo) - 1)
1 - pchisq(as.numeric(chi.sq), df)
chisq.test(t(algo))
# attempt 6.47 using the same logic
offshore = data.frame(support = c(154, 132), oppose = c(180, 126), unsure = c(104, 131),
row.names = c('grad', 'notGrad'))
offshore.expected.prop = offshore %>%
mutate(total = support + oppose + unsure) %>%
summarise(support.prop = sum(support)/sum(total), oppose.prop = sum(oppose)/sum(total), unsure.prop = sum(unsure)/sum(total))
offshore2 = offshore %>%
mutate(total = support + oppose + unsure) %>%
mutate(support.expected = offshore.expected.prop$support.prop * total,
oppose.expected = offshore.expected.prop$oppose.prop * total,
unsure.expected = offshore.expected.prop$unsure.prop * total)
chi.sq = offshore2 %>% mutate(Z2a = (support - support.expected)^2 / support.expected,
Z2b = (oppose - oppose.expected)^2 / oppose.expected,
Z2c = (unsure - unsure.expected)^2 / unsure.expected) %>%
summarise(chi.sq = sum(Z2a) + sum(Z2b) + sum(Z2c))
chi.sq
df = (nrow(offshore) -1)* (ncol(offshore) - 1)
1 - pchisq(as.numeric(chi.sq), df)
chisq.test(t(offshore))
coffee = data.frame('1perWeek' = c(670, 11545), '2-6perWeek' = c(373, 6244), '1perDay' = c(905, 16329),
'2-3perDay' = c(564, 11726), '4perDay' = c(95, 2288), row.names = c('yes', 'no'))
coffee.expected.prop = coffee %>%
mutate(total = X1perWeek + X2.6perWeek + X1perDay + X2.3perDay + X4perDay) %>%
mutate(prop = total / sum(total)) %>%
select(prop)
coffee.expected.prop
coffee2 = data.frame(intake = colnames(coffee), t(coffee)) %>%
mutate(total = yes + no) %>%
mutate(yes.exp = coffee.expected.prop$prop[1] * total, no.exp = coffee.expected.prop$prop[2] * total)
coffee2
chi.sq = coffee2 %>% mutate(Z2a = (yes - yes.exp)^2 / yes.exp, Z2b = (no - no.exp)^2 / no.exp) %>%
summarise(chi.sq = sum(Z2a) + sum(Z2b))
chi.sq
df = (nrow(coffee) - 1) * (ncol(coffee) -1)
1 - pchisq(as.numeric(chi.sq), df)
chisq.test(coffee)
chi.sq.stat = chisq.test(coffee)
x = seq(0, 50, 0.2)
xy = data.frame(x = x, y = dchisq(x, df))
shade = xy[x > chi.sq.stat$statistic, ]
xy %>% ggplot(aes(x =  x, y = y)) +
geom_line() +
geom_ribbon(data = shade, aes(ymax = y, ymin= 0), fill = 'red', alpha = 0.5) +
ggtitle(paste('Chi-Square Distribution with', df, 'Degrees of Freedom'))
