">=",
"<=",
">=",
"<=",
"==",
#           rep("<=", num.players),
"<=",
"==")
b <- c(1,  # numQBstarters
2,  # numRBstarters,
3,  # numRBstarters,
3,  #numWRstarters,
4,  #numWRstarters,
1,  #numTEstarters,
2,  #numTEstarters,
1,  #numDSTstarters,
#         rep(maxRisk, num.players),
50000,  # maxCost,
9)  # numTotalStarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b, types = var.types)
sol$playerInfo <- as.data.frame(cbind(all[sol$solution == 1, "Name"], #, with=FALSE],
round(points[sol$solution == 1], 2),
round(all[sol$solution == 1, "avgPtsPerGame"]),
playerCost[sol$solution == 1]))
names(sol$playerInfo) <- c("Name","sharpePtsPerSalary","avgPtsPerGame","avgSalary")
sol$totalCost <- sum(playerCost * sol$solution)
sol$players <- all$Name[sol$solution == 1]
return(sol)
}
sol = optimizeTeam()
sum(sol$playerInfo$avgPtsPerGame)
sol
sol$playerInfo
all[sol$solution == 1, "avgPtsPerGame"]
optimizeTeam <- function(points=all$sharpePtsPerSalary, playerCost=all$avgSalary, maxRisk=5){ #can change points, cost, or risk
num.players <- nrow(all)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(all$Pos == "QB"), # num QB
as.numeric(all$Pos == "RB"), # min num RB
as.numeric(all$Pos == "RB"), # max num RB
as.numeric(all$Pos == "WR"), # min num WR
as.numeric(all$Pos == "WR"), # max num WR
as.numeric(all$Pos == "TE"), # min num TE
as.numeric(all$Pos == "TE"), # max num TE
as.numeric(all$Pos == 'Def'), # num DST
#             diag(projections$risk),              # player's risk
playerCost,                           # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c("==",
">=",
"<=",
">=",
"<=",
">=",
"<=",
"==",
#           rep("<=", num.players),
"<=",
"==")
b <- c(1,  # numQBstarters
2,  # numRBstarters,
3,  # numRBstarters,
3,  #numWRstarters,
4,  #numWRstarters,
1,  #numTEstarters,
2,  #numTEstarters,
1,  #numDSTstarters,
#         rep(maxRisk, num.players),
50000,  # maxCost,
9)  # numTotalStarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b, types = var.types)
sol$playerInfo <- as.data.frame(cbind(all[sol$solution == 1, "Name"], #, with=FALSE],
round(points[sol$solution == 1], 2),
playerCost[sol$solution == 1]))
names(sol$playerInfo) <- c("Name","sharpePtsPerSalary","avgSalary")
sol$totalCost <- sum(playerCost * sol$solution)
sol$players <- all$Name[sol$solution == 1]
return(sol)
}
sol = optimizeTeam()
sol
optimizeTeam <- function(points=all$sharpePtsPerSalary, playerCost=all$avgSalary) { #can change points, cost, or risk
num.players <- nrow(all)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(all$Pos == "QB"), # num QB
as.numeric(all$Pos == "RB"), # min num RB
as.numeric(all$Pos == "RB"), # max num RB
as.numeric(all$Pos == "WR"), # min num WR
as.numeric(all$Pos == "WR"), # max num WR
as.numeric(all$Pos == "TE"), # min num TE
as.numeric(all$Pos == "TE"), # max num TE
as.numeric(all$Pos == 'Def'), # num DST
#             diag(projections$risk),              # player's risk
playerCost,                           # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c("==",
">=",
"<=",
">=",
"<=",
">=",
"<=",
"==",
#           rep("<=", num.players),
"<=",
"==")
b <- c(1,  # numQBstarters
2,  # numRBstarters,
3,  # numRBstarters,
3,  #numWRstarters,
4,  #numWRstarters,
1,  #numTEstarters,
2,  #numTEstarters,
1,  #numDSTstarters,
#         rep(maxRisk, num.players),
50000,  # maxCost,
9)  # numTotalStarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b, types = var.types)
sol$playerInfo <- as.data.frame(cbind(all[sol$solution == 1, "Name"], #, with=FALSE],
round(points[sol$solution == 1], 2),
playerCost[sol$solution == 1]))
names(sol$playerInfo) <- c("Name","sharpePtsPerSalary","avgSalary")
sol$totalCost <- sum(playerCost * sol$solution)
sol$players <- all$Name[sol$solution == 1]
return(sol)
}
sol = optimizeTeam()
sol
#Create Optimization Function
optimizeTeam <- function(points=all$sharpePtsPerSalary, playerCost=all$avgSalary){ #can change points, cost, or risk
num.players <- nrow(all)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(all$Pos == "QB"), # num QB
as.numeric(all$Pos == "RB"), # min num RB
as.numeric(all$Pos == "RB"), # max num RB
as.numeric(all$Pos == "WR"), # min num WR
as.numeric(all$Pos == "WR"), # max num WR
as.numeric(all$Pos == "TE"), # min num TE
as.numeric(all$Pos == "TE"), # max num TE
as.numeric(all$Pos == 'Def'), # num DST
#             diag(projections$risk),              # player's risk
playerCost,                           # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c("==",
">=",
"<=",
">=",
"<=",
">=",
"<=",
"==",
#           rep("<=", num.players),
"<=",
"==")
b <- c(1,  # numQBstarters
2,  # numRBstarters,
3,  # numRBstarters,
3,  #numWRstarters,
4,  #numWRstarters,
1,  #numTEstarters,
2,  #numTEstarters,
1,  #numDSTstarters,
#         rep(maxRisk, num.players),
50000,  # maxCost,
9)  # numTotalStarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b, types = var.types, max = TRUE)
sol$playerInfo <- as.data.frame(cbind(all[sol$solution == 1, "Name"], #, with=FALSE],
round(points[sol$solution == 1], 2),
round(all[sol$solution == 1, 'avgPtsPerGame']),
playerCost[sol$solution == 1]))
names(sol$playerInfo) <- c("Name","sharpePtsPerSalary","avgPtsPerGame","avgSalary")
sol$totalCost <- sum(playerCost * sol$solution)
sol$players <- all$Name[sol$solution == 1]
return(sol)
}
sol = optimizeTeam()
sol
#Create Optimization Function
optimizeTeam <- function(points=all$sharpePtsPerSalary, playerCost=all$avgSalary){ #can change points, cost, or risk
num.players <- nrow(all)
var.types <- rep("B", num.players)
A <- rbind(as.numeric(all$Pos == "QB"), # num QB
as.numeric(all$Pos == "RB"), # min num RB
as.numeric(all$Pos == "RB"), # max num RB
as.numeric(all$Pos == "WR"), # min num WR
as.numeric(all$Pos == "WR"), # max num WR
as.numeric(all$Pos == "TE"), # min num TE
as.numeric(all$Pos == "TE"), # max num TE
as.numeric(all$Pos == 'Def'), # num DST
#             diag(projections$risk),              # player's risk
playerCost,                           # total cost
rep(1,num.players))                   # num of players in starting lineup
dir <- c("==",
">=",
"<=",
">=",
"<=",
">=",
"<=",
"==",
#           rep("<=", num.players),
"<=",
"==")
b <- c(1,  # numQBstarters
2,  # numRBstarters,
3,  # numRBstarters,
3,  #numWRstarters,
4,  #numWRstarters,
1,  #numTEstarters,
2,  #numTEstarters,
1,  #numDSTstarters,
#         rep(maxRisk, num.players),
50000,  # maxCost,
9)  # numTotalStarters)
sol <- Rglpk_solve_LP(obj = points, mat = A, dir = dir, rhs = b, types = var.types, max = TRUE)
sol$playerInfo <- as.data.frame(cbind(all[sol$solution == 1, "Name"], #, with=FALSE],
round(points[sol$solution == 1], 2),
round(all[sol$solution == 1, "avgPtsPerGame"], 2),
playerCost[sol$solution == 1]))
names(sol$playerInfo) <- c("Name","sharpePtsPerSalary","avgPtsPerGame","avgSalary")
sol$totalCost <- sum(playerCost * sol$solution)
sol$players <- all$Name[sol$solution == 1]
return(sol)
}
sol = optimizeTeam()
sol
maxWeek = 5
url = paste0('http://rotoguru1.com/cgi-bin/fyday.pl?week=', week, '&game=dk&scsv=1')
tbl = url %>%  # rvest package instructions
read_html()
library(RCurl)
library(XML)
library(rvest)
library(stringr)
library(dplyr)
library(ggplot2)
url %>%  # rvest package instructions
read_html()
url %>%  # rvest package instructions
read_html()
url %>%  # rvest package instructions
read_html() %>%
html_nodes('pre')
library(rvest)
url = paste0('http://rotoguru1.com/cgi-bin/fyday.pl?week=', week, '&game=dk&scsv=1')
url %>%  # rvest package instructions
read_html()
maxWeek = 5
url %>%  # rvest package instructions
read_html()
url = paste0('http://rotoguru1.com/cgi-bin/fyday.pl?week=', week, '&game=dk&scsv=1')
week = 1
url = paste0('http://rotoguru1.com/cgi-bin/fyday.pl?week=', week, '&game=dk&scsv=1')
url %>%  # rvest package instructions
read_html()
tbl = url %>%  # rvest package instructions
read_html()
str(tbl)
tbl[1]
tbl$doc
tbl$node
tbl[[1]]
tbl[1]
tbl[1][1]
url %>%  # rvest package instructions
read_html() %>%
html_nodes('pre')
tbl = url %>%  # rvest package instructions
read_html() %>%
html_nodes('pre') %>%
html_text()
tbl
tbl %>%
str_split('\n', simplify = TRUE)
tbl %>%
str_split('\n', simplify = TRUE) %>%
str_split(';', simplify = TRUE)
library(stringr)
library(dplyr)
library(dbConnect)
username = 'data607'
password = 'project3'
dbname = 'ds_skills'
host = 'data607-project3.ce2dfe0qxt5q.us-west-2.rds.amazonaws.com'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
my_data <- read.csv("https://raw.githubusercontent.com/dhnanjay/607Project3/master/data1.csv",
stringsAsFactors = FALSE)
head(my_data)
# roles df
role_desc <- unique(str_replace(my_data$Job_Title, "\\'", ""))  # BH: removed apostrophes for SQL import
role_id <- seq.int(length(role_desc))
roles <- data.frame(role_id=role_id,role_desc=role_desc)
roles = roles %>% mutate(insertValue = paste0("(", role_id, ", '", role_desc, "')"))
insertValues = paste(unlist(roles$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO roles VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
# location df
locations <- unique(my_data[,c("City","State")])
locations <- cbind(loc_id =  seq.int(nrow(locations)), locations)
locations = locations %>% mutate(insertValue = paste0("(", loc_id, ", '", City, "', '", State, "')"))
insertValues = paste(unlist(locations$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO locations VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
# keywords df
key_list <- unlist(str_split(tolower(my_data$keywordtag),","))
key_desc <- unique(key_list[key_list!=""])
key_id <- seq.int(length(key_desc))
keywords <- data.frame(key_id = key_id, key_desc = key_desc)
keywords = keywords %>% mutate(insertValue = paste0("(", key_id, ", '", key_desc, "')"))
insertValues = paste(unlist(keywords$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO keywords VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
# post_keys df
key_list <- str_split(tolower(my_data$keywordtag),",")
key_list <- lapply(key_list,unique)
post_id = integer(); key_desc = character()
for (i in 1:length(key_list)){
for (j in 1:length(key_list[[i]])) {
post_id <- append(post_id,i)
key_desc <- append(key_desc,key_list[[i]][[j]])
}
}
post_keys <- data.frame(post_id = post_id,key_desc = key_desc)
post_keys <- filter(post_keys, key_desc != "" & key_desc !=" ")
post_keys <- merge(keywords, post_keys, by = "key_desc")
post_keys <- subset(post_keys, select = c(post_id, key_id))
post_keys = post_keys %>% mutate(insertValue = paste0("(", post_id, ", '", key_id, "')"))
insertValues = paste(unlist(post_keys$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO post_keys VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
jobs <- my_data
names(jobs)[names(jobs)=="Job_Title"] <- "role_desc"
names(jobs)[names(jobs)=="X.1"] <- "post_id"
jobs <- merge(jobs, roles, by ="role_desc")
jobs <- merge(jobs, locations, by= c("City","State"))
jobs <- subset(jobs, select= c(post_id,role_id,loc_id))
jobs = jobs %>% mutate(insertValue = paste0("(", post_id, ", ", role_id, ", ", loc_id, ")"))
insertValues = paste(unlist(jobs$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO jobs VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
jobs <- my_data
names(jobs)[names(jobs)=="Job_Title"] <- "role_desc"
names(jobs)[names(jobs)=="X.1"] <- "post_id"
jobs <- merge(jobs, roles, by ="role_desc")
jobs <- merge(jobs, locations, by= c("City","State"))
jobs <- subset(jobs, select= c(post_id,role_id,loc_id))
str(jobs)
View(jobs)
View(my_data)
jobs <- my_data
head(jobs)
View(jobs)
jobs <- my_data
names(jobs)[names(jobs)=="Job_Title"] <- "role_desc"
names(jobs)[names(jobs)=="X"] <- "post_id"
jobs <- merge(jobs, roles, by ="role_desc")
jobs <- merge(jobs, locations, by= c("City","State"))
jobs <- subset(jobs, select= c(post_id,role_id,loc_id))
jobs = jobs %>% mutate(insertValue = paste0("(", post_id, ", ", role_id, ", ", loc_id, ")"))
insertValues = paste(unlist(jobs$insertValue), collapse = ', ')
insertQry = dbSendQuery(myDb, paste0("INSERT INTO jobs VALUES ", insertValues, ";"))
fetch(insertQry, n = -1)
library(dbConnect)
username = 'data607'
password = 'project3'
dbname = 'ds_skills'
host = 'data607-project3.ce2dfe0qxt5q.us-west-2.rds.amazonaws.com'
myDb = dbConnect(MySQL(), user=username, password=password, dbname=dbname, host=host)
qryString = 'SELECT jobs.post_id, role_desc, city, state, keyword_desc
FROM jobs
INNER JOIN locations
ON jobs.loc_id = locations.loc_id
INNER JOIN roles
ON jobs.role_id = roles.role_id
INNER JOIN post_keys
ON jobs.post_id = post_keys.post_id
INNER JOIN  keywords
ON post_keys.key_id = keywords.key_id
;'
selectQry = dbSendQuery(myDb, qryString)
results = fetch(selectQry, n = -1)
results
library(RODBC)
library(dplyr)
library(tidyr)
library(zoo)
library(TTR)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(plotly)
# insert benchmark here
benchmark = 'MSCI ACWI USD'
# import necessary data
dbhandle <- odbcDriverConnect('driver={SQL Server};server=sql01.capricornllc.net;
database=CapricornUser;trusted_connection=true')
qryString = paste0("SELECT Name, PeriodDate, [Return] FROM v_benchmarksBloomberg WHERE Name = '",
benchmark, "' AND PeriodType = 'MonthEnd'")
bm = sqlQuery(dbhandle, qryString)
bm = rename(bm, Benchmark = Name, BmReturn = Return, Date = PeriodDate)
bm$Date = as.Date(bm$Date, '%Y/%m/%d')
mgr = read.csv('G:/INVESTMENT TEAM/Invest Statements/Internal Reporting/R/SICM 1 TE ACWI Backtest.csv',
stringsAsFactors = FALSE)
mgr$Date = as.Date(mgr$Date, '%m/%d/%Y')
names(mgr)[2] = 'MgrReturn'
selectStats = left_join(mgr, bm, by = 'Date') %>% arrange(Date)
# calculate trailing return statistics
selectStats = selectStats %>%
mutate(MgrReturnLog = log(1 + MgrReturn), BmReturnLog = log(1 + BmReturn)) %>%
mutate(MgrReturnL1Y = exp(rollsum(MgrReturnLog, 12, fill = NA, align = 'right'))-1,
BmReturnL1Y = exp(rollsum(BmReturnLog, 12, fill = NA, align = 'right'))-1) %>%
mutate(MgrReturnL3Y = exp(rollsum(MgrReturnLog, 36, fill = NA, align = 'right'))^(1/3)-1,
BmReturnL3Y = exp(rollsum(BmReturnLog, 36, fill = NA, align = 'right'))^(1/3)-1) %>%
mutate(MgrReturnL5Y = exp(rollsum(MgrReturnLog, 60, fill = NA, align = 'right'))^(1/5)-1,
BmReturnL5Y = exp(rollsum(BmReturnLog, 60, fill = NA, align = 'right'))^(1/5)-1) %>%
mutate(MgrReturnITD = exp(rollsum(MgrReturnLog, n(), fill = NA, align = 'right'))^(1/n())-1,
BmReturnITD = exp(rollsum(BmReturnLog, n(), fill = NA, align = 'right'))^(1/n())-1)
# correlation stats
selectStats$CorrelationL1Y = runCor(selectStats$MgrReturn, selectStats$BmReturn, 12)
selectStats$CorrelationL3Y = runCor(selectStats$MgrReturn, selectStats$BmReturn, 36)
selectStats$CorrelationL5Y = runCor(selectStats$MgrReturn, selectStats$BmReturn, 60)
selectStats$CorrelationITD = runCor(selectStats$MgrReturn, selectStats$BmReturn, nrow(selectStats))
# volatility stats
selectStats$MgrVolL1Y = runSD(selectStats$MgrReturn, 12) * sqrt(12)
selectStats$MgrVolL3Y = runSD(selectStats$MgrReturn, 36) * sqrt(12)
selectStats$MgrVolL5Y = runSD(selectStats$MgrReturn, 60) * sqrt(12)
selectStats$MgrVolITD = runSD(selectStats$MgrReturn, nrow(selectStats)) * sqrt(12)
selectStats$BmVolL1Y = runSD(selectStats$BmReturn, 12) * sqrt(12)
selectStats$BmVolL3Y = runSD(selectStats$BmReturn, 36) * sqrt(12)
selectStats$BmVolL5Y = runSD(selectStats$BmReturn, 60) * sqrt(12)
selectStats$BmVolITD = runSD(selectStats$BmReturn, nrow(selectStats)) * sqrt(12)
# alpha and beta stats
selectStats = selectStats %>%
mutate(AlphaL1Y = MgrReturnL1Y - BmReturnL1Y,
AlphaL3Y = MgrReturnL3Y - BmReturnL3Y,
AlphaL5Y = MgrReturnL5Y - BmReturnL5Y,
AlphaITD = MgrReturnITD - BmReturnITD,
BetaL1Y = CorrelationL1Y * MgrVolL1Y / BmVolL1Y,
BetaL3Y = CorrelationL3Y * MgrVolL3Y / BmVolL3Y,
BetaL5Y = CorrelationL5Y * MgrVolL5Y / BmVolL5Y,
BetaITD = CorrelationITD * MgrVolITD / BmVolITD)
# reorganize data for last date
selectStatsLast = selectStats %>%
select(-c(Benchmark, MgrReturn, BmReturn, MgrReturnLog, BmReturnLog)) %>%
arrange(desc(Date)) %>%
filter(row_number() == 1) %>%
gather('MetricName', 'MetricValue', -1) %>%
mutate(PeriodType = substr(MetricName, nchar(MetricName) - 2, nchar(MetricName))) %>%
mutate(MetricName = substr(MetricName, 1, nchar(MetricName) - 3))
grid.arrange(p1, p2, ncol = 2)
?subplot
library(IS606)
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA606")
startLab('lab6')
startLab('Lab6')
setwd("C:/Users/bhao/Google Drive/CUNY/git/DATA606/Lab6")
load('more/atheism.RData')
atheism[6,]
atheism[6,]
atheism[4:8,]
str(atheism)
head(atheism, 30)
us12 <- subset(atheism, nationality == "United States" & year == "2012")
us12
table(us12)
str(us12)
library(dplyr)
library(tidyr)
us12 %>% group_by(nationality)
us12 %>% group_by(response) %>%
summarise(n = n())
us12 %>% group_by(response) %>%
summarise(freq = n() / sum(n()))
us12 %>% group_by(response) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n()))
us12 %>% group_by(response) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
us12 %>% group_by(response) %>%
summarise(n = n()) %>%
mutate(freq = round(n / sum(n), 2))
inference(us12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
p = us12 %>% group_by(response) %>%
summarise(n = n()) %>%
mutate(freq = round(n / sum(n), 2))[1, 2]
us12 %>% group_by(response) %>%
summarise(n = n()) %>%
mutate(freq = round(n / sum(n), 2))
us12 %>% group_by(response) %>%
summarise(n = n()) %>%
mutate(freq = round(n / sum(n), 2))[1, 2]
p = us12 %>% group_by(response) %>%
summarise(n = n()) %>%
mutate(freq = round(n / sum(n), 2))
p
p[1,2]
p[1,3]
p = p[1, 3]
n = us12 %>% group_by(response) %>%
summarise(n = n())
n
n = us12 %>% summarise(n = n())
n
str(n_distinct)
str(n)
n = us12 %>% summarise(n = n())[1]
n = n[1, 1]
se
se = sqrt(p * (1 - p) / n)
se
