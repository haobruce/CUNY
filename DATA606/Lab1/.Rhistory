# short shares
s <- -1 * round(init / spyAdjPrices[maxLookBack], 0)
c <- c + s * spyAdjPrices[maxLookBack]
dfAdd <- data.frame(spyDates[maxLookBack], ewma8_32[maxLookBack], c, s, abs(s) * spyAdjPrices[maxLookBack] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
# move forward with investment strategy
for (i in maxLookBack:length(ewma8_32)) { # setup for a 32 day lookback period
if (ewma8_32[i] < 0) { # if trend is downward
if (s > 0) { # if you have shares
# sell existing shares
c <- c + s * spyAdjPrices[i]
s <- 0
dfAdd <- data.frame(spyDates[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
} else if (s == 0) { # if no shares
# then short
s <- -1 * round(c / spyAdjPrices[i], 0)
c <- c + s * spyAdjPrices[i]
dfAdd <- data.frame(spyDates[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
} else if (ewma8_32[i] > 0) { # if trend is upward
if (s < 0) { # if you are short
# cover short shares
c <- c - s * spyAdjPrices[i]
s <- 0
dfAdd <- data.frame(spyDates[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
} else if (s == 0) { # if you have no shares
# then buy
s <- round(c / spyAdjPrices[i], 0)
c <- c - s * spyAdjPrices[i]
dfAdd <- data.frame(spyDates[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
}
}
print(df)
# start from first date and start investing
init <- 100000 # define initial investment amount
c <- init # define initial cash balance
s <- 0 # define initial shares owned
p <- 0 # define initial profit
maxLookBack <- 32
# create empty data frame to house performance results
df <- data.frame(Dates=numeric(), Price=numeric(), EWMA=numeric(), Cash=numeric(), Shares=numeric(), Balance=numeric())
#dfAdd <- data.frame(spyDates[maxLookBack], init, 0)
#df <- rbind(df, setNames(dfAdd, names(df)))
if (ewma8_32[maxLookBack] > 0) {
# buy shares
s <- round(init / spyAdjPrices[maxLookBack], 0)
c <- c - s * spyAdjPrices[maxLookBack]
dfAdd <- data.frame(spyDates[maxLookBack], spyAdjPrices[maxLookBack], ewma8_32[maxLookBack], c, s, abs(s) * spyAdjPrices[maxLookBack] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
} else {
# short shares
s <- -1 * round(init / spyAdjPrices[maxLookBack], 0)
c <- c + s * spyAdjPrices[maxLookBack]
dfAdd <- data.frame(spyDates[maxLookBack], spyAdjPrices[maxLookBack], ewma8_32[maxLookBack], c, s, abs(s) * spyAdjPrices[maxLookBack] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
# move forward with investment strategy
for (i in maxLookBack:length(ewma8_32)) { # setup for a 32 day lookback period
if (ewma8_32[i] < 0) { # if trend is downward
if (s > 0) { # if you have shares
# sell existing shares
c <- c + s * spyAdjPrices[i]
s <- 0
dfAdd <- data.frame(spyDates[i], spyAdjPrices[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
} else if (s == 0) { # if no shares
# then short
s <- -1 * round(c / spyAdjPrices[i], 0)
c <- c + s * spyAdjPrices[i]
dfAdd <- data.frame(spyDates[i], spyAdjPrices[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
} else if (ewma8_32[i] > 0) { # if trend is upward
if (s < 0) { # if you are short
# cover short shares
c <- c - s * spyAdjPrices[i]
s <- 0
dfAdd <- data.frame(spyDates[i], spyAdjPrices[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
} else if (s == 0) { # if you have no shares
# then buy
s <- round(c / spyAdjPrices[i], 0)
c <- c - s * spyAdjPrices[i]
dfAdd <- data.frame(spyDates[i], spyAdjPrices[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
}
}
print(df)
# start from first date and start investing
init <- 100000 # define initial investment amount
c <- init # define initial cash balance
s <- 0 # define initial shares owned
p <- 0 # define initial profit
maxLookBack <- 32
# create empty data frame to house performance results
df <- data.frame(Dates=numeric(), Price=numeric(), EWMA=numeric(), Cash=numeric(), Shares=numeric(), Balance=numeric())
#dfAdd <- data.frame(spyDates[maxLookBack], init, 0)
#df <- rbind(df, setNames(dfAdd, names(df)))
if (ewma8_32[maxLookBack] > 0) {
# buy shares
s <- round(init / spyAdjPrices[maxLookBack], 0)
c <- c - s * spyAdjPrices[maxLookBack]
dfAdd <- data.frame(spyDates[maxLookBack], spyAdjPrices[maxLookBack], ewma8_32[maxLookBack], c, s, abs(s) * spyAdjPrices[maxLookBack] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
} else {
# short shares
s <- -1 * round(init / spyAdjPrices[maxLookBack], 0)
c <- c + s * spyAdjPrices[maxLookBack]
dfAdd <- data.frame(spyDates[maxLookBack], spyAdjPrices[maxLookBack], ewma8_32[maxLookBack], c, s, abs(s) * spyAdjPrices[maxLookBack] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
# move forward with investment strategy
for (i in maxLookBack:length(ewma8_32)) { # setup for a 32 day lookback period
if (ewma8_32[i] < 0) { # if trend is downward
if (s >= 0) { # if you have shares
# sell existing shares
c <- c + s * spyAdjPrices[i]
s <- 0
# then short
s <- -1 * round(c / spyAdjPrices[i], 0)
c <- c + s * spyAdjPrices[i]
dfAdd <- data.frame(spyDates[i], spyAdjPrices[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
} else if (ewma8_32[i] > 0) { # if trend is upward
if (s <= 0) { # if you are short
# cover short shares
c <- c - s * spyAdjPrices[i]
s <- 0
# then buy
s <- round(c / spyAdjPrices[i], 0)
c <- c - s * spyAdjPrices[i]
dfAdd <- data.frame(spyDates[i], spyAdjPrices[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
}
print(df)
# start from first date and start investing
init <- 100000 # define initial investment amount
c <- init # define initial cash balance
s <- 0 # define initial shares owned
p <- 0 # define initial profit
maxLookBack <- 32
# create empty data frame to house performance results
df <- data.frame(Dates=numeric(), Price=numeric(), EWMA=numeric(), Cash=numeric(), Shares=numeric(), Balance=numeric())
#dfAdd <- data.frame(spyDates[maxLookBack], init, 0)
#df <- rbind(df, setNames(dfAdd, names(df)))
if (ewma8_32[maxLookBack] > 0) {
# buy shares
s <- round(init / spyAdjPrices[maxLookBack], 0)
c <- c - s * spyAdjPrices[maxLookBack]
dfAdd <- data.frame(spyDates[maxLookBack], spyAdjPrices[maxLookBack], ewma8_32[maxLookBack], c, s, abs(s) * spyAdjPrices[maxLookBack] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
} else {
# short shares
s <- -1 * round(init / spyAdjPrices[maxLookBack], 0)
c <- c + s * spyAdjPrices[maxLookBack]
dfAdd <- data.frame(spyDates[maxLookBack], spyAdjPrices[maxLookBack], ewma8_32[maxLookBack], c, s, abs(s) * spyAdjPrices[maxLookBack] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
# move forward with investment strategy
for (i in maxLookBack:length(ewma8_32)) { # setup for a 32 day lookback period
if (ewma8_32[i] < 0) { # if trend is downward
if (s >= 0) { # if you have shares
# sell existing shares
c <- c + s * spyAdjPrices[i]
s <- 0
# then short
s <- -1 * round(c / spyAdjPrices[i], 0)
c <- c + s * spyAdjPrices[i]
dfAdd <- data.frame(spyDates[i], spyAdjPrices[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
} else if (ewma8_32[i] > 0) { # if trend is upward
if (s <= 0) { # if you are short
# cover short shares
c <- c - s * spyAdjPrices[i]
s <- 0
# then buy
s <- round(c / spyAdjPrices[i], 0)
c <- c - s * spyAdjPrices[i]
dfAdd <- data.frame(spyDates[i], spyAdjPrices[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
}
}
print(df)
plot(df$Date, df$Shares)
df$Date
plot(df$Date, df$Shares, type="l")
plot(as.numeric(df$Date), df$Shares, type="l")
plot(as.Date(df$Date), df$Shares, type="l")
# start from first date and start investing
init <- 100000 # define initial investment amount
c <- init # define initial cash balance
s <- 0 # define initial shares owned
p <- 0 # define initial profit
maxLookBack <- 32
# create empty data frame to house performance results
df <- data.frame(Dates=numeric(), Price=numeric(), EWMA=numeric(), Cash=numeric(), Shares=numeric(), Balance=numeric())
#dfAdd <- data.frame(spyDates[maxLookBack], init, 0)
#df <- rbind(df, setNames(dfAdd, names(df)))
if (ewma8_32[maxLookBack] > 0) {
# buy shares
s <- round(init / spyAdjPrices[maxLookBack], 0)
c <- c - s * spyAdjPrices[maxLookBack]
dfAdd <- data.frame(spyDates[maxLookBack], spyAdjPrices[maxLookBack], ewma8_32[maxLookBack], c, s, abs(s) * spyAdjPrices[maxLookBack] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
} else {
# short shares
s <- -1 * round(init / spyAdjPrices[maxLookBack], 0)
c <- c + s * spyAdjPrices[maxLookBack]
dfAdd <- data.frame(spyDates[maxLookBack], spyAdjPrices[maxLookBack], ewma8_32[maxLookBack], c, s, abs(s) * spyAdjPrices[maxLookBack] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
# move forward with investment strategy
for (i in maxLookBack:length(ewma8_32)) { # setup for a 32 day lookback period
if (ewma8_32[i] < 0) { # if trend is downward
if (s >= 0) { # if you have shares
# sell existing shares
c <- c + s * spyAdjPrices[i]
s <- 0
# then short
s <- -1 * round(c / spyAdjPrices[i], 0)
c <- c + s * spyAdjPrices[i]
dfAdd <- data.frame(spyDates[i], spyAdjPrices[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
} else if (ewma8_32[i] > 0) { # if trend is upward
if (s <= 0) { # if you are short
# cover short shares
c <- c - s * spyAdjPrices[i]
s <- 0
# then buy
s <- round(c / spyAdjPrices[i], 0)
c <- c - s * spyAdjPrices[i]
dfAdd <- data.frame(spyDates[i], spyAdjPrices[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
}
}
print(df)
201/178-1
# start from first date and start investing
init <- 100000 # define initial investment amount
c <- init # define initial cash balance
s <- 0 # define initial shares owned
p <- 0 # define initial profit
maxLookBack <- 32
# create empty data frame to house performance results
df <- data.frame(Dates=numeric(), Price=numeric(), EWMA=numeric(), Cash=numeric(), Shares=numeric(), Balance=numeric())
#dfAdd <- data.frame(spyDates[maxLookBack], init, 0)
#df <- rbind(df, setNames(dfAdd, names(df)))
if (ewma8_32[maxLookBack] > 0) {
# buy shares
s <- round(init / spyAdjPrices[maxLookBack], 0)
c <- c - s * spyAdjPrices[maxLookBack]
dfAdd <- data.frame(spyDates[maxLookBack], spyAdjPrices[maxLookBack], ewma8_32[maxLookBack], c, s, abs(s) * spyAdjPrices[maxLookBack] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
} else {
# short shares
s <- -1 * round(init / spyAdjPrices[maxLookBack], 0)
c <- c + s * spyAdjPrices[maxLookBack]
dfAdd <- data.frame(spyDates[maxLookBack], spyAdjPrices[maxLookBack], ewma8_32[maxLookBack], c, s, abs(s) * spyAdjPrices[maxLookBack] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
# move forward with investment strategy
for (i in maxLookBack:length(ewma8_32)) { # setup for a 32 day lookback period
if (ewma8_32[i] < 0) { # if trend is downward
if (s > 0) { # if you have shares
# sell existing shares
c <- c + s * spyAdjPrices[i]
s <- 0
dfAdd <- data.frame(spyDates[i], spyAdjPrices[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
} else if (s == 0) { # if no shares
# then short
s <- -1 * round(c / spyAdjPrices[i], 0)
c <- c + s * spyAdjPrices[i]
dfAdd <- data.frame(spyDates[i], spyAdjPrices[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
} else if (ewma8_32[i] > 0) { # if trend is upward
if (s < 0) { # if you are short
# cover short shares
c <- c - s * spyAdjPrices[i]
s <- 0
dfAdd <- data.frame(spyDates[i], spyAdjPrices[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
} else if (s == 0) { # if you have no shares
# then buy
s <- round(c / spyAdjPrices[i], 0)
c <- c - s * spyAdjPrices[i]
dfAdd <- data.frame(spyDates[i], spyAdjPrices[i], ewma8_32[i], c, s, abs(s) * spyAdjPrices[i] + c)
df <- rbind(df, setNames(dfAdd, names(df)))
}
}
}
print(df)
rm(list=all())
rm(list=ls())
gold = read.csv("/Users/brucehao/desktop/table.csv", headers=T)
gold = read.csv("/Users/brucehao/desktop/table.csv", header=T)
gold
gold = read.csv("/Users/brucehao/desktop/table.csv", header=T)
gold
model = lm(GG ~ GOLDSPOT, data=gold)
summary(model)
---
---
title: "BridgeR_03_Mushrooms"
author: "Bruce"
date: "July 28, 2016"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown Documentation of Downloading and Relabeling Mushroom Data from UCI
Install hash library.
```{r, echo=FALSE}
require(hash)
```
Read UCI data into dataframe and rename columns.
```{r}
df = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data", header=FALSE)
colnames(df) = c('classes','cap_shape','cap_surface','cap_color','bruises?','odor','gill_attachment','gill_spacing','gill_size','gill_color','stalk_shape','stalk_root','stalk_surface_above_ring','stalk_surface_below_ring','stalk_color_above_ring','stalk_color_below_ring','veil_type','veil_color','ring_number','ring_type','spore_print_color', 'population','habitat')
```
Create hashes with abbreviations as keys and expanded names as values for each column. For brevity, only the first four columns are shown below.
```{r}
classes = hash(keys=c('e','p'), values=c('edible','poisonous'))
cap_shape = hash(keys=c('b','c','x','f','k','s'), values=c('bell','conical','convex','flat','knobbed','sunken'))
cap_surface = hash(keys=c('f','g','y','s'), values=c('fibrous','grooves','scaly','smooth'))
cap_color = hash(keys=c('n','b','c','g','r','p','u','e','w','y'), values=c('brown','buff','cinnamon','gray','green','pink','purple','red','white','yellow'))
```
Loop through dataframe columns and add expanded levels. For brevity, only first first columns are looped through below.
```{r}
for (i in 1:4) {
columnName = colnames(df)[i]
for (key in as.list(keys(get(columnName)))) {
levels(df[[columnName]]) = c(levels(df[[columnName]]), get(columnName)[[key]])
df[df[columnName]==key, columnName] = get(columnName)[[key]]
}
}
knitr::kable(head(df[1:4]))
```
library(hash)
install.packages('hash')
library(hash)
v = [383.6, 347.1, 371.9, 347.6, 325.8, 337]
v = ([)383.6, 347.1, 371.9, 347.6, 325.8, 337)
v = (383.6, 347.1, 371.9, 347.6, 325.8, 337)
v = list(383.6, 347.1, 371.9, 347.6, 325.8, 337)
v
v = c(383.6, 347.1, 371.9, 347.6, 325.8, 337)
v
mean(v)
sd(v)
?qnorm
mu = mean(v)
sig = sd(v)
qnorm(0.1, mu, sig)
qnorm(0.05, mu, sig)
qnorm(0.95, mu, sig)
?qt
n = length(v)
n
t = abs(qt(0.5, n-1))
t
qt(0.05, n-1)
t = abs(qt(0.05, n-1))
qnorm(0.05, 0, 1)
qnorm(0.95, 0, 1)
qnorm(0.975, 0, 1)
qnorm(0.025, 0, 1)
se = sig/sqrt(n)
se
mu + se*t
mu - se*t
t = abs(qt(0.2/2, 16-1))
t
mu = 46.4
sig = 2.45
se = sig / sqrt(16)
mu + se * t
mu - se * t
1.9/0.13
(1.9/0.13)^2
qnorm(0.025, 0, 1)
qnorm(0.005, 0, 1)
t = abs(qnorm(0.005, 0, 1))
8+t*1.9
8+t*1.9/(0.13/2)
(8+t*1.9/(0.13/2))^2
t
t*1.9
t*1.9/0.13
(t*1.9/0.13)^2
t = qnorm(0.025, 0, 1)
t
t = abs(qnorm(0.025, 0, 1))
(t*12.6/0.19)^2
(t*3.61^0.5/0.19)^2
1-1734/2089
se = sqrt(0.17*0.83/2089)
se
qnorm(0.01, 0.17, se)
qnorm(0.99, 0.17, se)
p = 156/474
p
se = p*(1-p)/474
qnorm(0.025, p, se)
qnorm(0.975, p, se)
se
se = sqrt(p*(1-p)/474)
qnorm(0.975, p, se)
qnorm(0.025, p, se)
install.packages(c('openintro','OIdata','devtools','ggplot2','psych','reshape2',
'knitr','markdown','shiny'))
devtools::install_github("jbryer/IS606")
library('IS606')
install.packages('dbConnect')
myDb = dbConnect(MySQL(), user='root', password='Aspire123', dbname='movies', host='127.0.0.1')
library(dbConnect)
myDb = dbConnect(MySQL(), user='root', password='Aspire123', dbname='movies', host='127.0.0.1')
rs1 = dbSendQuery(myDb, 'SELECT * FROM movie_names')
data = fetch(rs1, n=-1)
Query movie_names table.
```{r}
rs1 = dbSendQuery(myDb, 'SELECT * FROM movie_names')
movie_names = fetch(rs1, n=-1)
movie_names
```
Query movie_ratings table.
```{r}
rs2 = dbSendQuery(myDb, 'SELECT * FROM movie_ratings')
movie_ratings = fetch(rs2, n=-1)
movie_ratings
```
rs = dbSendQuery(myDb, 'SELECT names.*, ratings.user_id, ratings_rating
rs = dbSendQuery(myDb, 'SELECT names.*, ratings.user_id, ratings_rating
FROM movie_names names INNER JOIN movie_ratings ratings
ON names.movie_name = ratings.movie_name')
movies = fetch(rs, n=-1)
movies
rs = dbSendQuery(myDb, 'SELECT names.*, ratings.user_id, ratings_rating
FROM movie_names names INNER JOIN movie_ratings ratings
ON names.movie_name = ratings.movie_name')
rs = dbSendQuery(myDb, 'SELECT names.*, ratings.user_id, ratings.rating
FROM movie_names names INNER JOIN movie_ratings ratings
ON names.movie_name = ratings.movie_name')
movies = fetch(rs, n=-1)
movies
table(movies)
library(psych)
describeBy(movies, movie_names)
describeBy(movies, movie_ratings)
table(movies$movie_name, movies$rating)
table(movies$movie_name, avg(movies$rating))
table(movies$movie_name, movies$rating)
length(unique(movies$user_id))
(unique(movies$user_id))
length(unique(movies$user_id))
table(movies$movie_name, movies$rating/length(unique(movies$user_id)))
movies$avg_rating = movies$rating / length(unique(movies$user_id))
table(movies$movie_name, movies$avg_rating)
wd
curwd
curWd
getwd()
setwd("~/Google Drive/CUNY/git/DATA606/Lab1")
library(IS606)
source("more/cdc.R")
barplot(prop.table(table(cdc$height)))
library(dplyr)
cdc %>% summarise(age_prop = age / sum(age))
cdc %>% summarise(n=n()) %>% mutate(freq=n /sum(n))
cdc %>% group_by(age) %>% summarise(n=n()) %>% mutate(freq=n /sum(n))
age_freq = cdc %>% group_by(age) %>% summarise(n=n()) %>% mutate(freq=n /sum(n))
library(ggvis)
age_freq %>% ggvis()
age_freq %>% ggvis(age, freq)
age_freq
as.data.frame(age_freq)
as.data.frame(age_freq) %>% ggvis(age, freq))
as.data.frame(age_freq) %>% ggvis(age, freq)
head(as.data.frame(age_freq))
as.data.frame(age_freq) %>% ggvis(~age, ~freq)
as.data.frame(age_freq) %>% ggvis(~age, ~freq) %>% layer_bars()
barplot(prop.table(table(cdc$age)))
age_freq %>% ggvis(~age, ~freq) %>% layer_bars()
height_freq = cdc %>% group_by(height) %>% summarise(n=n()) %>% mutate(height_freq=n/sum(n))
height_freq %>% ggvis(~height, ~height_freq)
height_freq %>% ggvis(~height, ~height_freq) %>% layers_bars()
height_freq %>% ggvis(~height, ~height_freq) %>% layers_bar()
height_freq %>% ggvis(~height, ~height_freq) %>% layer_bars()
age_freq %>% ggvis(~age, ~age_freq) %>% layer_bars()
age_freq = cdc %>% group_by(age) %>% summarise(n=n()) %>% mutate(n/sum(n))
age_freq %>% ggvis(~age, ~age_freq) %>% layer_bars()
age_freq = cdc %>% group_by(age) %>% summarise(n=n()) %>% mutate(age_freq=n/sum(n))
age_freq %>% ggvis(~age, ~age_freq) %>% layer_bars()
cdc %>% group_by(height)
cdc %>% group_by(height) %>% summarise(n=n())
cdc %>% group_by(height) %>% summarise(n=n()) %>% mutate(total=sum(n))
cdc %>% group_by(height) %>% summarise(n=n()) %>% mutate(total=sum(n), freq=n/total)
